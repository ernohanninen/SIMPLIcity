{"ast":null,"code":"import _slicedToArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli-app/src/getMetadata.js\";\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { render } from '@testing-library/react'; //import GetSettings from \"./getSettings.js\"\n\nvar GetMetadata = forwardRef(function (props, ref) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      submitting = _useState2[0],\n      setSubmitting = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      renderArea = _useState4[0],\n      setRenderArea = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      allMarkers = _useState6[0],\n      setAllMarkes = _useState6[1]; // const [inputFields, setInputFields] = useState([]);\n\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      samplesDict = _useState8[0],\n      setSamplesDict = _useState8[1];\n\n  var inputFields = []; //var samplesDict = {}\n\n  useImperativeHandle(ref, function () {\n    return {\n      getProcesses: function getProcesses() {\n        axios.get(\"/submitSettings\").then(function (response) {\n          console.log(\"=========================================================================\");\n          console.log(response);\n          console.log(response.data[0]);\n          console.log(response.data[1]);\n          setSamplesDict(response.data[1]); //setSamples(JSON.parse(response.data[1]))\n          //console.log(samples)\n          //console.log(typeof(samples))\n          //Parse values from response data to boolean format\n\n          for (var prop in response.data[0]) {\n            if (response.data[0].hasOwnProperty(prop)) {\n              response.data[0][prop] = response.data[0][prop] == 'true' || response.data[0][prop] == 'false' ? response.data[0][prop] === 'true' : response.data[0][prop];\n            }\n          } //Checkbox to Compute marker positive areas to all markers\n          //+ input fields to custom markers\n\n\n          if (response.data[0].execute_area == true) {\n            console.log(\"RENDER SOMETHING\");\n            console.log(allMarkers);\n            setRenderArea(true); //console.log(\"Render area \", renderArea)\n          } else if (response.data[0].execute_area == false) setRenderArea(false);\n\n          if (response.data[0].execute_sd_segmentation == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_type_identification == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_clustering == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_thresholding == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_homotypic_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_heterotypic_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_permuted_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          } //console.log(skip_area)\n          //console.log(response.data.skip_area)\n\n        });\n      },\n      submitMetadata: function submitMetadata() {\n        console.log(\"metadata\");\n        console.log(allMarkers);\n        console.log(\"getMETADATA\");\n      }\n    };\n  });\n  /*if(allMarkers === true){\n      console.log(\"checked\")\n      console.log(samplesDict)\n      //Maps the key value pairs in samplesDict\n      Object.keys(samplesDict).forEach(function(key, index){\n          console.log(key)\n          console.log(samplesDict[key])\n          //setInputFields([...inputFields, { id: uuidv4(),  marker: samplesDict[key], mainMarker: samplesDict[key] }])\n          //console.log(inputFields)\n      })\n   }*/\n\n  var allMarkersChecked = function allMarkersChecked() {\n    /*inputFields.map(i => {\n        const values  = inputFields\n        values.splice(values.findIndex(value => value.id === i.id), inputFields.length-1);       \n        setInputFields(values);\n      })\n    setInputFields([\n      { id: uuidv4(), marker: '', mainMarker: ''}, ])\n    setSubmitting(true);\n    setTimeout(() => {\n      setSubmitting(false);\n    }, 1);*/\n    inputFields = []; //setInputFields([ { marker: '', mainMarker: ''}, ])\n\n    console.log(\"INPUTFIELDS\", inputFields);\n    setAllMarkes(!allMarkers);\n    console.log(allMarkers);\n\n    if (allMarkers === true) {\n      console.log(\"checked\");\n      console.log(samplesDict);\n    } //Maps the key value pairs in samplesDict\n\n\n    Object.keys(samplesDict).forEach(function (key, index) {\n      console.log(key);\n      console.log(samplesDict[key]); //setInputFields([{  marker: samplesDict[key], mainMarker: samplesDict[key] }])\n      //setInputFields([...inputFields, samplesDict[key]])\n\n      inputFields.push(samplesDict[key]); // inputFields.push({  marker: samplesDict[key], mainMarker: samplesDict[key] })\n\n      console.log(inputFields);\n      console.log(\"READY\");\n    });\n    console.log(\"MAP over array\");\n    inputFields.map(function (inputField) {\n      return console.log(inputField);\n    });\n  };\n\n  var handleChangeInput = function handleChangeInput(id, event) {\n    var newInputFields = inputFields.map(function (i) {\n      if (id === i.id) {\n        console.log(event.target.name);\n      }\n\n      return i;\n    }); //setInputFields(newInputFields);  \n  };\n\n  var renderList = inputFields.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 56\n      }\n    }, item, \" \");\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    class: \"metadataForm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }, \"Submit metadata:\"), renderArea ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 25\n    }\n  }, \"Area\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"checkbox\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 29\n    }\n  }, \"Select all markers: \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    name: \"cbAreas\",\n    onChange: function onChange() {\n      return allMarkersChecked();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 33\n    }\n  })), allMarkers ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 28\n    }\n  }, renderList) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 37\n    }\n  }, \"Marker\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"marker\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 37\n    }\n  }, \"Main marker\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"main_marker\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 37\n    }\n  }))))) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n});\nexport default GetMetadata; //<div>{allMarkers && <p>Loading...</p>}</div>#setAllMarkes(!allMarkers);","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","axios","v4","uuidv4","render","GetMetadata","props","ref","submitting","setSubmitting","renderArea","setRenderArea","allMarkers","setAllMarkes","samplesDict","setSamplesDict","inputFields","getProcesses","get","then","response","console","log","data","prop","hasOwnProperty","execute_area","execute_sd_segmentation","execute_cell_type_identification","execute_cell_clustering","execute_cell_thresholding","execute_homotypic_interactions","execute_heterotypic_interactions","execute_permuted_interactions","submitMetadata","allMarkersChecked","Object","keys","forEach","key","index","push","map","inputField","handleChangeInput","id","event","newInputFields","i","target","name","renderList","item"],"sources":["/home/ernohanninen/simpli-app/src/getMetadata.js"],"sourcesContent":["import React,  { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { render } from '@testing-library/react';\n//import GetSettings from \"./getSettings.js\"\n\n\nconst GetMetadata = forwardRef((props, ref)=>{\n      const [submitting, setSubmitting] = useState(false);\n\n    const [renderArea, setRenderArea] = useState(false)\n    const [allMarkers, setAllMarkes]  = useState(false)\n   // const [inputFields, setInputFields] = useState([]);\n    const [samplesDict, setSamplesDict] = useState({})\n    let inputFields = []\n\n    //var samplesDict = {}\n    useImperativeHandle(ref, ()=>({\n        getProcesses(){\n            axios.get(\"/submitSettings\")\n            .then(function(response){\n                console.log(\"=========================================================================\")\n\n                console.log(response)\n                console.log(response.data[0])\n                console.log(response.data[1])\n                setSamplesDict(response.data[1])\n\n                \n                //setSamples(JSON.parse(response.data[1]))\n                //console.log(samples)\n                //console.log(typeof(samples))\n                //Parse values from response data to boolean format\n                for (let prop in response.data[0]) {\n                    if (response.data[0].hasOwnProperty(prop)) {\n                        response.data[0][prop] = (response.data[0][prop] == 'true' || response.data[0][prop] == 'false')? response.data[0][prop] === 'true': response.data[0][prop] ;\n                    }\n                } \n                //Checkbox to Compute marker positive areas to all markers\n                //+ input fields to custom markers\n                if(response.data[0].execute_area == true){\n\n                    console.log(\"RENDER SOMETHING\")\n                    console.log(allMarkers)\n                    setRenderArea(true)\n                    //console.log(\"Render area \", renderArea)\n\n                }\n                else if(response.data[0].execute_area == false)setRenderArea(false)\n                \n                if(response.data[0].execute_sd_segmentation == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_type_identification == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_clustering == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_thresholding == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_homotypic_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_heterotypic_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_permuted_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                \n                //console.log(skip_area)\n                //console.log(response.data.skip_area)\n            })\n        },\n        submitMetadata(){\n\n            console.log(\"metadata\")\n            console.log(allMarkers)\n\n            console.log(\"getMETADATA\")\n        }\n    }))\n\n \n    \n    /*if(allMarkers === true){\n        console.log(\"checked\")\n        console.log(samplesDict)\n        //Maps the key value pairs in samplesDict\n        Object.keys(samplesDict).forEach(function(key, index){\n            console.log(key)\n            console.log(samplesDict[key])\n            //setInputFields([...inputFields, { id: uuidv4(),  marker: samplesDict[key], mainMarker: samplesDict[key] }])\n            //console.log(inputFields)\n        })\n\n    }*/\n\n    const allMarkersChecked = () => {\n        /*inputFields.map(i => {\n            const values  = inputFields\n            values.splice(values.findIndex(value => value.id === i.id), inputFields.length-1);       \n            setInputFields(values);\n          })\n        setInputFields([\n          { id: uuidv4(), marker: '', mainMarker: ''}, ])\n        setSubmitting(true);\n        setTimeout(() => {\n          setSubmitting(false);\n        }, 1);*/\n\n        inputFields = []\n        \n        //setInputFields([ { marker: '', mainMarker: ''}, ])\n        console.log(\"INPUTFIELDS\", inputFields)\n        setAllMarkes(!allMarkers)\n        console.log(allMarkers)\n        if(allMarkers === true){\n            console.log(\"checked\")\n            console.log(samplesDict)\n        }\n        \n        //Maps the key value pairs in samplesDict\n        Object.keys(samplesDict).forEach(function(key, index){\n            console.log(key)\n            console.log(samplesDict[key])\n            //setInputFields([{  marker: samplesDict[key], mainMarker: samplesDict[key] }])\n            //setInputFields([...inputFields, samplesDict[key]])\n            inputFields.push(samplesDict[key])\n           // inputFields.push({  marker: samplesDict[key], mainMarker: samplesDict[key] })\n            console.log(inputFields)\n            console.log(\"READY\")\n        })\n        console.log(\"MAP over array\")\n        inputFields.map(inputField => (\n             console.log(inputField)\n             ))\n    }\n\n    const handleChangeInput = (id, event) => {\n        const newInputFields = inputFields.map(i => {\n          if(id === i.id) {\n            console.log(event.target.name)\n          }      \n          return i;\n        })   \n        //setInputFields(newInputFields);  \n      }\n\n    const renderList = inputFields.map((item,index) => <div key={index}>{item} </div>)\n \n    return(\n        <div>\n            <form class=\"metadataForm\">\n                <b>Submit metadata:</b>\n                {renderArea ? (\n                    \n                    <div>\n                        <p>Area</p>\n                            <div class = \"checkbox\" >\n\n                            <p>Select all markers: </p>\n                                <input type = \"checkbox\" name=\"cbAreas\" onChange={() => allMarkersChecked()}/>\n                        </div>\n                        {allMarkers ? (\n                           <div>\n                            {renderList}\n                            </div>\n\n                         ):(\n                            <div>\n                                \n                                <div class=\"row\">\n                                <div class=\"col-1\">    \n                                    <p>Marker</p>\n                                    <input name=\"marker\"/>                \n                                </div>\n                                <div class=\"col-2\">    \n                                    <p>Main marker</p>\n                                    <input name=\"main_marker\"/>\n                                </div>\n                                </div>\n                            </div>\n\n                         )}\n                    </div>\n                   \n                            \n                ):(<></>)}\n\n\n          \n            </form>\n        </div>\n    \n        )\n   \n})\nexport default GetMetadata;\n//<div>{allMarkers && <p>Loading...</p>}</div>#setAllMarkes(!allMarkers);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}