{"ast":null,"code":"import _toConsumableArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli-app/src/getResults.js\";\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport Table from \"./sample_table.js\";\n\nvar GetResults = function GetResults() {\n  //Variables\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      plotPaths = _useState2[0],\n      setPlotPaths = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      areaPlots = _useState4[0],\n      setAreaPlots = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sampleImages = _useState6[0],\n      setSampleImages = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dropDownSamples = _useState8[0],\n      setDropDownSamples = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      dropDownMarkers = _useState10[0],\n      setDropDownMarkers = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      checkbox = _useState12[0],\n      setCheckbox = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      displaySegmentationCb = _useState14[0],\n      setDisplaySegmentationCb = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      preprocessedCb = _useState16[0],\n      setPreprocessedCb = _useState16[1];\n\n  var _useState17 = useState(true),\n      _useState18 = _slicedToArray(_useState17, 2),\n      firstCall = _useState18[0],\n      setFirstCall = _useState18[1];\n\n  var _useState19 = useState({}),\n      _useState20 = _slicedToArray(_useState19, 2),\n      totalCells = _useState20[0],\n      setTotalCells = _useState20[1];\n\n  var _useState21 = useState({}),\n      _useState22 = _slicedToArray(_useState21, 2),\n      resultingCells = _useState22[0],\n      setResultingCells = _useState22[1];\n\n  var _useState23 = useState(\"\"),\n      _useState24 = _slicedToArray(_useState23, 2),\n      markerImages = _useState24[0],\n      setMarkerImages = _useState24[1];\n\n  var _useState25 = useState([]),\n      _useState26 = _slicedToArray(_useState25, 2),\n      mergedImages = _useState26[0],\n      setMergedImages = _useState26[1];\n\n  var _useState27 = useState(\"\"),\n      _useState28 = _slicedToArray(_useState27, 2),\n      pixelComparisonPlot = _useState28[0],\n      setPixelComparisonPlot = _useState28[1];\n\n  var _useState29 = useState(\"\"),\n      _useState30 = _slicedToArray(_useState29, 2),\n      pixelSamplePlot = _useState30[0],\n      setPixelSamplePlot = _useState30[1];\n\n  var _useState31 = useState(\"\"),\n      _useState32 = _slicedToArray(_useState31, 2),\n      dropDownPixel = _useState32[0],\n      setDropDownPixels = _useState32[1];\n\n  var _useState33 = useState(\"\"),\n      _useState34 = _slicedToArray(_useState33, 2),\n      cellArea = _useState34[0],\n      setCellArea = _useState34[1]; //const [displaySegmented, setDisplaySegmented] = useState(true)\n\n\n  var sample = \"\";\n  var marker = \"\";\n  var pixelImage = \"\"; //Function which get the images from backend\n\n  var displayResults = function displayResults() {\n    document.getElementById(\"resultsButton\").style.display = \"none\";\n    axios.get(\"/fetchResults\").then(function (response) {\n      setTotalCells(response.data[1]);\n      setResultingCells(response.data[2]);\n      console.log(\"PALUU ARVO\");\n      console.log(response.data);\n      console.log(response.data[1]);\n      console.log(response.data[2]);\n      console.log(response.data[3]);\n      console.log(response.data[4]); //Extracting values from dictionary\n\n      var samples = response.data[0][\"samples\"];\n      var area = response.data[0][\"area\"];\n      var intensity = response.data[0][\"intensity\"];\n      console.log(area);\n      console.log(samples);\n      setPlotPaths(area);\n      displayImages(area, samples, intensity, response.data[1], response.data[2], response.data[3], response.data[4]); //Calling function which displays the images         \n    });\n  }; //Function which displays the images to the user\n\n\n  var displayImages = function displayImages(area, samples, intensity, totalCells, resultingCells, intensityCellType, cellAreaMeasurements) {\n    var segmentation = false;\n    var merged = false;\n    var mergedOverlays = false;\n    var counter = 0;\n    Object.entries(samples[Object.keys(samples)[0]]).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      console.log(key);\n      console.log(value);\n      console.log(Object.keys(Object.assign.apply(Object, [{}].concat(_toConsumableArray(value)))));\n\n      if (Object.keys(Object.assign.apply(Object, [{}].concat(_toConsumableArray(value)))).includes(\"overlays\")) {\n        console.log(\"SEGMENTATION\");\n        segmentation = true;\n      }\n    }); //Creates the options for sample dropdown menu\n\n    var sampleOptions = Object.entries(Object.keys(samples)).map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          key = _ref4[0],\n          value = _ref4[1];\n\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: value,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }\n      }, value);\n    }); //Creates the options for markers dropdown menu\n\n    var markerOptions = Object.entries(samples[Object.keys(samples)[0]]).map(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n          key = _ref6[0],\n          value = _ref6[1];\n\n      console.log(key);\n\n      if (key == \"merged_tiff\") {\n        merged = true;\n      }\n\n      if (key == \"merged_overlays\") {\n        mergedOverlays = true;\n      }\n\n      if (key != \"merged_tiff\" && key != \"merged_overlays\") {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: key,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 24\n          }\n        }, key);\n      }\n    }); //Create the dropdown list for samples\n    //The options are created above\n\n    setDropDownSamples( /*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, \"Samples: \"), /*#__PURE__*/React.createElement(\"select\", {\n      name: \"sampleSelector\",\n      id: \"sampleSelector\",\n      onChange: function onChange(event) {\n        return handleChangeSelect(event, segmentation, merged, \"sampleDropDown\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      id: \"optionNoneSample\",\n      value: \"None\",\n      selected: \"true\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 18\n      }\n    }, \"None\"), sampleOptions))); //If the backend response contains images where channels are merged (multi channel images) this if clause is executed \n\n    if (merged == true) {\n      //Creates dropdown menu for markers\n      //The options are passed in a varible. The variable is initialized above\n      setDropDownMarkers( /*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }\n      }, \"Markers: \"), /*#__PURE__*/React.createElement(\"select\", {\n        name: \"markerSelector\",\n        id: \"markerSelector\",\n        onChange: function onChange(event) {\n          return handleChangeSelect(event, segmentation, merged, \"markerDropDown\");\n        },\n        disabled: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        id: \"optionNonemarker\",\n        value: \"None\",\n        selected: \"true\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 26\n        }\n      }, \"None\"), markerOptions))); //Temp lists where the html elements are stored\n\n      var mergedImagesTemp = [];\n      var markerImagesTemp = []; //Map thru a dictionary, with sample names and paths to the images/plots\n\n      Object.entries(samples).map(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            key1 = _ref8[0],\n            value1 = _ref8[1];\n\n        //Add a counter in here\n        //Id to images and divs, key1 contains the sample name\n        var idMergedTiff = \"idTiff\" + key1;\n        var idMergedOverlay = \"idOverlay\" + key1;\n        var idMergedTiffDiv = \"tiffDiv\" + key1;\n        var idMergedOverlayDiv = \"overlayDiv\" + key1; //Append the list with HTML element\n        //These are the merged images\n\n        mergedImagesTemp.push( /*#__PURE__*/React.createElement(\"div\", {\n          id: key1,\n          hidden: true,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 39\n          }\n        }, /*#__PURE__*/React.createElement(\"b\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 21\n          }\n        }, \"Merged image channels\"), /*#__PURE__*/React.createElement(\"div\", {\n          id: idMergedTiffDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }\n        }, key1, \" merged image channels:\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idMergedTiff,\n          src: require(\"../src/images/\" + value1[\"merged_tiff\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idMergedTiff);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }\n        })), mergedOverlays ? /*#__PURE__*/React.createElement(\"div\", {\n          id: idMergedOverlayDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }\n        }, \" \", key1, \" segmented cells:\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idMergedOverlay,\n          src: require(\"../src/images/\" + value1[\"merged_overlays\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idMergedOverlay);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }\n        })) : /*#__PURE__*/React.createElement(React.Fragment, null))); //Map thru the single channel images (preprocessed, segmented, thresholded)\n\n        Object.entries(value1).map(function (_ref9) {\n          var _ref10 = _slicedToArray(_ref9, 2),\n              key = _ref10[0],\n              value = _ref10[1];\n\n          if (key != \"merged_tiff\" && key != \"merged_overlays\") {\n            //The merged files are skipped\n            //Initialize id to images and divs, key1 is the sample name and key is the marker\n            var idPreprocessed = \"idPre\" + key1 + key;\n            var idThresholded = \"idThres\" + key1 + key;\n            var idSegmented = \"idSeg\" + key1 + key;\n            var idPreprocessedDiv = \"preDiv\" + key1 + key;\n            var idThresholdedDiv = \"thresDiv\" + key1 + key;\n            var idSegmentedDiv = \"segDiv\" + key1 + key; //Append the list with HTML element\n            //These are the single channel images\n            //THe segmented image is appended only if segmentation is executed\n\n            markerImagesTemp.push( /*#__PURE__*/React.createElement(\"div\", {\n              id: key1 + key,\n              hidden: true,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 47\n              }\n            }, /*#__PURE__*/React.createElement(\"b\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 29\n              }\n            }, \"Single-channel image\"), /*#__PURE__*/React.createElement(\"div\", {\n              id: idPreprocessedDiv,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 33\n              }\n            }, key1, \" preprocessed \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n              class: \"contain\",\n              id: idPreprocessed,\n              src: require(\"../src/images/\" + value[0][\"preprocessed\"]),\n              onClick: function onClick(event) {\n                return displayFullScreen(idPreprocessed);\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 33\n              }\n            })), /*#__PURE__*/React.createElement(\"div\", {\n              id: idThresholdedDiv,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 33\n              }\n            }, key1, \" thresholded \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n              class: \"contain\",\n              id: idThresholded,\n              src: require(\"../src/images/\" + value[1][\"thresholded\"]),\n              onClick: function onClick(event) {\n                return displayFullScreen(idThresholded);\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 33\n              }\n            })), segmentation ? /*#__PURE__*/React.createElement(\"div\", {\n              id: idSegmentedDiv,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 37\n              }\n            }, key1, \" segmented \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n              class: \"contain\",\n              id: idSegmented,\n              src: require(\"../src/images/\" + value[2][\"overlays\"]),\n              onClick: function onClick(event) {\n                return displayFullScreen(idSegmented);\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 37\n              }\n            }), /*#__PURE__*/React.createElement(\"br\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 37\n              }\n            }), /*#__PURE__*/React.createElement(\"br\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 37\n              }\n            })) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n          }\n        });\n      }); //Add the temp lists to the state variable\n\n      setMergedImages(mergedImagesTemp);\n      setMarkerImages(markerImagesTemp);\n    } //If backend response contains single channel images, this if clause is executed\n    else if (merged == false) {\n      //Map thru the samples and images\n      //The return value is directly updated to state variable\n      setSampleImages(Object.entries(samples).map(function (_ref11) {\n        var _ref12 = _slicedToArray(_ref11, 2),\n            key = _ref12[0],\n            value = _ref12[1];\n\n        //Id to images and divs, key contains the sample name\n        var idPreprocessed = \"idPre\" + key;\n        var idThresholded = \"idThres\" + key;\n        var idSegmented = \"idSeg\" + key;\n        var idPreprocessedDiv = \"preDiv\" + key;\n        var idThresholdedDiv = \"thresDiv\" + key;\n        var idSegmentedDiv = \"segDiv\" + key; //Return the html element\n        //THe segmented image and the counts are appended to the list only if the segmentation is executed\n\n        return [].concat(_toConsumableArray(sampleImages), [/*#__PURE__*/React.createElement(\"div\", {\n          id: key,\n          hidden: true,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          id: idPreprocessedDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 25\n          }\n        }, \"Preprocessed \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idPreprocessed,\n          src: require(\"../src/images/\" + Object.values(value)[0][0][\"preprocessed\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idPreprocessed);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 25\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          id: idThresholdedDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 25\n          }\n        }, \"Thresholded \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idThresholded,\n          src: require(\"../src/images/\" + Object.values(value)[0][1][\"thresholded\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idThresholded);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 25\n          }\n        })), segmentation ? /*#__PURE__*/React.createElement(\"div\", {\n          id: idSegmentedDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 29\n          }\n        }, \"Segmented \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idSegmented,\n          src: require(\"../src/images/\" + Object.values(value)[0][2][\"overlays\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idSegmented);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 29\n          }\n        }, \"Number of cells detected in image segmentation : \", totalCells[key]), /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 29\n          }\n        }, \"Number of cells after removing unassigned ones : \", resultingCells[key]), /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 29\n          }\n        })) : /*#__PURE__*/React.createElement(React.Fragment, null))]);\n      }));\n    }\n\n    var cellAreaList = [];\n\n    if (Object.keys(cellAreaMeasurements).length != 0) {\n      Object.entries(cellAreaMeasurements).map(function (_ref13) {\n        var _ref14 = _slicedToArray(_ref13, 2),\n            key1 = _ref14[0],\n            value1 = _ref14[1];\n\n        Object.entries(value1).map(function (_ref15) {\n          var _ref16 = _slicedToArray(_ref15, 2),\n              key = _ref16[0],\n              value = _ref16[1];\n\n          console.log(key);\n          console.log(value);\n        });\n      });\n      var cellType = Object.entries(cellAreaMeasurements).map(function (_ref17) {\n        var _ref18 = _slicedToArray(_ref17, 2),\n            key = _ref18[0],\n            value = _ref18[1];\n\n        return Object.entries(value).map(function (_ref19) {\n          var _ref20 = _slicedToArray(_ref19, 2),\n              key = _ref20[0],\n              value = _ref20[1];\n\n          return (\n            /*#__PURE__*/\n            //Goes thru at cell type level\n            React.createElement(\"td\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 17\n              }\n            }, key)\n          );\n        });\n      });\n      console.log(cellType);\n      var pixelCount = Object.entries(cellAreaMeasurements).map(function (_ref21) {\n        var _ref22 = _slicedToArray(_ref21, 2),\n            key = _ref22[0],\n            value = _ref22[1];\n\n        return Object.entries(value).map(function (_ref23) {\n          var _ref24 = _slicedToArray(_ref23, 2),\n              key = _ref24[0],\n              value = _ref24[1];\n\n          return (\n            /*#__PURE__*/\n            //Goes thru at cell type level\n            React.createElement(\"td\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 17\n              }\n            }, value[\"pixel_counts\"])\n          );\n        });\n      });\n      console.log(pixelCount);\n      var cellCount = Object.entries(cellAreaMeasurements).map(function (_ref25) {\n        var _ref26 = _slicedToArray(_ref25, 2),\n            key = _ref26[0],\n            value = _ref26[1];\n\n        return Object.entries(value).map(function (_ref27) {\n          var _ref28 = _slicedToArray(_ref27, 2),\n              key = _ref28[0],\n              value = _ref28[1];\n\n          return (\n            /*#__PURE__*/\n            //Goes thru at cell type level\n            React.createElement(\"td\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 17\n              }\n            }, value[\"cell_counts\"])\n          );\n        });\n      });\n      console.log(cellCount); //TÄHÄN\n\n      console.log(cellAreaMeasurements); //Object.entries(cellAreaMeasurements).map(([key,value]) => { //Goes thru at sample level\n\n      Object.entries(cellAreaMeasurements).map(function (_ref29) {\n        var _ref30 = _slicedToArray(_ref29, 2),\n            key1 = _ref30[0],\n            value1 = _ref30[1];\n\n        console.log(key1, value1);\n        Object.entries(value1).map(function (_ref31) {\n          var _ref32 = _slicedToArray(_ref31, 2),\n              key = _ref32[0],\n              value = _ref32[1];\n\n          console.log(key);\n          console.log(value);\n          cellAreaList.push( /*#__PURE__*/React.createElement(\"div\", {\n            id: \"cellMeasurementTable\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 29\n            }\n          }, key, \" cell area measurements\"), /*#__PURE__*/React.createElement(\"table\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(\"tr\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(\"th\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 33\n            }\n          }, \"Cell\"), /*#__PURE__*/React.createElement(\"th\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 33\n            }\n          }, \"Pixel count\"), /*#__PURE__*/React.createElement(\"th\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 33\n            }\n          }, \"Cell count\")), /*#__PURE__*/React.createElement(\"tr\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(\"th\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 33\n            }\n          }, key)), /*#__PURE__*/React.createElement(\"tr\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(\"th\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 33\n            }\n          }, value[\"pixel_counts\"])), /*#__PURE__*/React.createElement(\"tr\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(\"th\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 33\n            }\n          }, value[\"cell_counts\"])))));\n        });\n      });\n      setCellArea(cellAreaList);\n    } //If area measurements for the thresholded image is computed\n\n\n    if (area != \"\") {\n      //Add the plot to a state variable\n      setAreaPlots( /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 21\n        }\n      }, \"Measurement of marker positive area:\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        id: \"areaPlot\",\n        src: require(\"../src/images/Area/\" + area),\n        onClick: function onClick(event) {\n          return displayFullScreen(\"areaPlot\");\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 21\n        }\n      })));\n    }\n\n    if (Object.keys(intensity).length != 0) {\n      //Creates the options for markers dropdown menu\n      var intensityOptions = [];\n      intensityOptions.push(Object.keys(intensity).map(function (key, index) {\n        console.log(key);\n\n        if (key != \"group_plot\") {\n          return /*#__PURE__*/React.createElement(\"option\", {\n            value: key,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 28\n            }\n          }, key);\n        }\n      }));\n      console.log(intensityOptions);\n      var dropDownPixels = /*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 34\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 37\n        }\n      }, \"Sample distributions: \"), /*#__PURE__*/React.createElement(\"select\", {\n        name: \"pixelSampleSelector\",\n        id: \"pixelSampleSelector\",\n        onChange: function onChange(event) {\n          return handleChangeSelectPixel(event);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        id: \"optionNonePixel\",\n        value: \"None\",\n        selected: \"true\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 41\n        }\n      }, \"None\"), intensityOptions));\n      console.log(dropDownPixel);\n      var pixelTempList = [];\n      setPixelComparisonPlot( /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"b\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 21\n        }\n      }, \"Cell pixel intensity distribution\"), dropDownPixels, pixelTempList, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 21\n        }\n      }, intensityCellType, \"-cell pixel intensity distribution between two groups:\"), /*#__PURE__*/React.createElement(\"img\", {\n        id: \"comparisonIntensityPlot\",\n        src: require(\"../src/images/Intensity/\" + intensity[\"group_plot\"]),\n        onClick: function onClick(event) {\n          return displayFullScreen(\"comparisonIntensityPlot\");\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 21\n        }\n      })));\n      Object.keys(intensity).forEach(function (key, value) {\n        console.log(key);\n        console.log(value);\n\n        if (key != \"group_plot\") {\n          //Id to images and divs, key contains the sample name\n          var idIntensityPlot = \"idIntensity\" + key;\n          var idIntensityPlotDiv = \"idIntensityDiv\" + key;\n          console.log(intensity[key]); //Return the html element\n          //The segmented image and the counts are appended to the list only if the segmentation is executed\n\n          pixelTempList.push( /*#__PURE__*/React.createElement(\"div\", {\n            id: \"intensity\" + key,\n            hidden: true,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            id: idIntensityPlotDiv,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 33\n            }\n          }, \"Pixel intensities of \", intensityCellType, \"-cells in \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n            class: \"contain\",\n            id: idIntensityPlot,\n            src: require(\"../src/images/Intensity/\" + intensity[key]),\n            onClick: function onClick(event) {\n              return displayFullScreen(idIntensityPlot);\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 33\n            }\n          })), /*#__PURE__*/React.createElement(\"br\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 25\n            }\n          })));\n        }\n      });\n      setPixelSamplePlot(pixelTempList);\n      console.log(pixelSamplePlot);\n    }\n  }; //Function which displays the images full screen\n\n\n  var displayFullScreen = function displayFullScreen(id) {\n    var elem = document.getElementById(id); //Get element based on id\n\n    if (document.fullscreenElement) {\n      //Exit if fullscreen\n      document.exitFullscreen();\n    } //Otherwise, no image is in fullscreen mode \n    //Display image fullscreen\n    //THis function is dependent from the browser used\n    else {\n      if (elem.requestFullscreen) {\n        elem.requestFullscreen();\n      } else if (elem.webkitRequestFullscreen) {\n        /* Safari */\n        elem.webkitRequestFullscreen();\n      } else if (elem.msRequestFullscreen) {\n        /* IE11 */\n        elem.msRequestFullscreen();\n      }\n    }\n  }; //Handles changes in the sample drop-down list\n  //segmentation and merged are boolean parameters\n  //call parameter contains the source of the function call (sampleDropDown or markerDropDown)\n  //THis function is both for multi and single channel images. It is specified in the comments which images the if clause handles\n\n\n  var handleChangeSelect = function handleChangeSelect(event, segmentation, merged, call) {\n    //Displays the merged tiff and the merged masks\n    //For multichannel images\n    if (merged == true && event.target.value != \"None\" && call == \"sampleDropDown\") {\n      //Format the variables based on the selected value in drop down menu\n      var idMergedDiv = \"tiffDiv\" + event.target.value;\n      var idOverlayDiv = \"overlayDiv\" + event.target.value; //When sample is changed, change the value of markerSelector to None \n\n      document.getElementById(\"markerSelector\").value = \"None\";\n      document.getElementById(\"markerSelector\").disabled = false; //Display the markerSelector dropDown menu\n      //Display the images\n\n      document.getElementById(idMergedDiv).style.display = \"block\";\n      document.getElementById(idOverlayDiv).style.display = \"block\";\n    } //If the sampleSelector value is changed to None, hide the markerSelector dropdown menu\n    //For multichannel images\n    else if (merged == true && event.target.value == \"None\" && call == \"sampleDropDown\") {\n      document.getElementById(\"markerSelector\").value = \"None\"; //Changes value\n\n      document.getElementById(\"markerSelector\").disabled = true; //Hide\n    } //This if statement displays the the single channel images (input image, thresholded, and segmented)\n    //Displays also the checkboxes which can be used to hide the images listed above\n    //THis if statement is both for images which composes of multiple channels and single channels\n    else if (merged == true && event.target.value != \"None\" && call == \"markerDropDown\" || merged == false && event.target.value != \"None\" && call == \"sampleDropDown\") {\n      //IF the checkbox exists it is checked by default\n      if (document.getElementById(\"preprocessedImgCheck\") != null) {\n        document.getElementById(\"preprocessedImgCheck\").checked = true;\n      }\n\n      if (document.getElementById(\"thresholdImgCheck\") != null) {\n        document.getElementById(\"thresholdImgCheck\").checked = true;\n      }\n\n      if (document.getElementById(\"segmentedImgCheck\") != null) {\n        document.getElementById(\"segmentedImgCheck\").checked = true;\n      }\n\n      var idPreprocessedDiv = \"\";\n      var idThresholdedDiv = \"\";\n      var idSegmentedDiv = \"\"; //If statement for merged images (multiple channels)\n\n      if (merged == true) {\n        //Get's the current sample from the sampleSelector\n        var currentSample = document.getElementById(\"sampleSelector\").value; //THe current sample is used to create the id of the DIV where the images are stored\n        //event.target value contains the marker \n        //The id is in form preDiv + sample + marker (e.g preDivSample1LMX)\n\n        idPreprocessedDiv = \"preDiv\" + currentSample + event.target.value;\n        idThresholdedDiv = \"thresDiv\" + currentSample + event.target.value;\n        idSegmentedDiv = \"segDiv\" + currentSample + event.target.value; //Using the id to display the images\n\n        document.getElementById(idPreprocessedDiv).style.display = \"block\";\n        document.getElementById(idThresholdedDiv).style.display = \"block\";\n        document.getElementById(idSegmentedDiv).style.display = \"block\";\n      } // If statement for single channel images\n      else if (merged == false) {\n        //Build the div id from input value\n        idPreprocessedDiv = \"preDiv\" + event.target.value;\n        idThresholdedDiv = \"thresDiv\" + event.target.value;\n        idSegmentedDiv = \"segDiv\" + event.target.value; //If the image is hidden make them visible\n\n        document.getElementById(idPreprocessedDiv).style.display = \"block\";\n        document.getElementById(idThresholdedDiv).style.display = \"block\";\n\n        if (segmentation == true) {\n          document.getElementById(idSegmentedDiv).style.display = \"block\";\n        }\n      } //Creates the checkbox HTML element to each image\n\n\n      setCheckbox( /*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"colQC-1\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"checkbox\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 29\n        }\n      }, \"Preprocessed image: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"preprocessedImgCheck\",\n        onClick: function onClick() {\n          return handleCheckbox(idPreprocessedDiv, \"preprocessedImgCheck\");\n        },\n        defaultChecked: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"colQC-2\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"checkbox\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 29\n        }\n      }, \"Thresholded image: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"thresholdImgCheck\",\n        onClick: function onClick() {\n          return handleCheckbox(idThresholdedDiv, \"thresholdImgCheck\");\n        },\n        defaultChecked: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 29\n        }\n      }))), segmentation ? /*#__PURE__*/React.createElement(\"div\", {\n        class: \"colQC-3\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"checkbox\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 35\n        }\n      }, \"Segmented image: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"segmentedImgCheck\",\n        onClick: function onClick() {\n          return handleCheckbox(idSegmentedDiv, \"segmentedImgCheck\");\n        },\n        defaultChecked: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 35\n        }\n      }))) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n    } //Displays the main div where the merged sample specific images are stored\n    //Both for multi and single channel images\n\n\n    if (event.target.value != \"None\" && call == \"sampleDropDown\") {\n      document.getElementById(event.target.value).style.display = \"block\";\n    } //Displays the main div where the marker specific images are stored\n    //For multichannel images\n\n\n    if (event.target.value != \"None\" && call == \"markerDropDown\") {\n      document.getElementById(sample + event.target.value).style.display = \"block\";\n    } //Hides the previously selected sample, so that only on sample is displayed at the time\n\n\n    if (sample != \"\" && sample != \"None\" && sample != event.target.value && call == \"sampleDropDown\") {\n      if (merged == true) {\n        setCheckbox(\"\"); //after the sample changes, hide the checkbox which is used to control the single channel images\n      }\n\n      document.getElementById(sample).style.display = \"none\"; //Hides the chosen marker image after sample changes\n\n      if (marker != \"\" && marker != \"None\" && merged == true) {\n        document.getElementById(sample + marker).style.display = \"none\";\n      }\n    } //Hides the previously selected marker image, so that only one set of marker images is displayed at once\n    //Multichannel images\n    else if (marker != \"\" && marker != \"None\" && marker != event.target.value && call == \"markerDropDown\") {\n      document.getElementById(sample + marker).style.display = \"none\";\n    } //Empties (hides) the checkbox variable if marker is set to null\n    //Multichannel images\n    else if (call == \"markerDropDown\" && marker == \"None\" && checkbox != \"\") {\n      setCheckbox(\"\");\n    } //Hides previous images\n    //For single channel images\n    else if (sample != \"\" && sample != \"None\" && merged == false) {\n      document.getElementById(sample).style.display = \"none\";\n    } //Hides the checkboxes if condition is met\n    //THis if statement is bot for single and multi channel images\n\n\n    if (event.target.value == \"None\" && merged == false || event.target.value == \"None\" && call == \"markerDropDown\") {\n      setCheckbox(\"\");\n    } //Update the current sample and marker values, these values are \"previous\" values when the function is called next time\n\n\n    if (call == \"sampleDropDown\") {\n      sample = event.target.value;\n    }\n\n    if (call == \"markerDropDown\") {\n      marker = event.target.value;\n    }\n  }; //This function handles changes in checkboxes\n  //Parameters are the id of image div and id of checkbox\n  //The checkboxes are created in function above\n\n\n  var handleCheckbox = function handleCheckbox(idDiv, idCb) {\n    var elem = document.getElementById(idDiv); //Get the div element\n    //If clause which hides the element\n\n    if (window.getComputedStyle(elem).display == \"block\") {\n      elem.style.display = \"none\";\n      document.getElementById(idCb).defaultChecked = false;\n    } //If clause which displays the element\n    else if (window.getComputedStyle(elem).display == \"none\") {\n      elem.style.display = \"block\";\n      document.getElementById(idCb).defaultChecked = true;\n    }\n  };\n\n  var handleChangeSelectPixel = function handleChangeSelectPixel(event) {\n    console.log(pixelImage); //displays images/nothing depending of the selected drop-down value\n\n    var idIntensityDiv = \"idIntensityDiv\" + event.target.value;\n    console.log(idIntensityDiv); //Make the image DIV visible       \n\n    if (event.target.value != \"None\") {\n      //document.getElementById(idIntensityDiv).style.display = \"block\"\n      document.getElementById(\"intensity\" + event.target.value).style.display = \"block\";\n    } //Hides images depending of the value\n\n\n    if (pixelImage != \"\" && pixelImage != \"intensityNone\") {\n      document.getElementById(pixelImage).style.display = \"none\";\n    }\n\n    pixelImage = \"intensity\" + event.target.value; //Update the value to a global variable\n  }; //Display HTML to the user\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    class: \"resultsForm\",\n    id: \"resultsForm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"load\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 21\n    }\n  }, \"Running SIMPLI\")), /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"results\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 21\n    }\n  }, \"SIMPLI results\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"resultsButton\",\n    type: \"button\",\n    onClick: function onClick(event) {\n      return displayResults();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 21\n    }\n  }, \"Display results\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"colQC-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 25\n    }\n  }, dropDownSamples), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"colQC-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 25\n    }\n  }, dropDownMarkers)), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"colQC-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 21\n    }\n  }, checkbox), sampleImages, markerImages, mergedImages, cellArea, areaPlots, pixelComparisonPlot)));\n};\n\nexport default GetResults;","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","axios","Table","GetResults","plotPaths","setPlotPaths","areaPlots","setAreaPlots","sampleImages","setSampleImages","dropDownSamples","setDropDownSamples","dropDownMarkers","setDropDownMarkers","checkbox","setCheckbox","displaySegmentationCb","setDisplaySegmentationCb","preprocessedCb","setPreprocessedCb","firstCall","setFirstCall","totalCells","setTotalCells","resultingCells","setResultingCells","markerImages","setMarkerImages","mergedImages","setMergedImages","pixelComparisonPlot","setPixelComparisonPlot","pixelSamplePlot","setPixelSamplePlot","dropDownPixel","setDropDownPixels","cellArea","setCellArea","sample","marker","pixelImage","displayResults","document","getElementById","style","display","get","then","response","data","console","log","samples","area","intensity","displayImages","intensityCellType","cellAreaMeasurements","segmentation","merged","mergedOverlays","counter","Object","entries","keys","map","key","value","assign","includes","sampleOptions","markerOptions","event","handleChangeSelect","mergedImagesTemp","markerImagesTemp","key1","value1","idMergedTiff","idMergedOverlay","idMergedTiffDiv","idMergedOverlayDiv","push","require","displayFullScreen","idPreprocessed","idThresholded","idSegmented","idPreprocessedDiv","idThresholdedDiv","idSegmentedDiv","values","cellAreaList","length","cellType","pixelCount","cellCount","intensityOptions","index","dropDownPixels","handleChangeSelectPixel","pixelTempList","forEach","idIntensityPlot","idIntensityPlotDiv","id","elem","fullscreenElement","exitFullscreen","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","call","target","idMergedDiv","idOverlayDiv","disabled","checked","currentSample","handleCheckbox","idDiv","idCb","window","getComputedStyle","defaultChecked","idIntensityDiv"],"sources":["/home/ernohanninen/simpli-app/src/getResults.js"],"sourcesContent":["import React,  { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport Table from \"./sample_table.js\";\n\n\n\nconst GetResults = () => { \n    \n    //Variables\n    const [plotPaths, setPlotPaths] = useState(\"\")\n    const [areaPlots, setAreaPlots] = useState(\"\")\n    const [sampleImages, setSampleImages] = useState(\"\")\n\n    const [dropDownSamples, setDropDownSamples] = useState(\"\")\n    const [dropDownMarkers, setDropDownMarkers] = useState(\"\")\n    \n    const [checkbox, setCheckbox] = useState(\"\")\n    const [displaySegmentationCb, setDisplaySegmentationCb] = useState(false)\n    const [preprocessedCb, setPreprocessedCb] = useState(false)\n    const [firstCall,setFirstCall] = useState(true)\n    const [totalCells, setTotalCells] = useState({})\n    const [resultingCells, setResultingCells] = useState({})\n    const [markerImages, setMarkerImages] = useState(\"\")\n    const [mergedImages, setMergedImages] = useState([])\n    const [pixelComparisonPlot, setPixelComparisonPlot] = useState(\"\")\n    const [pixelSamplePlot, setPixelSamplePlot] = useState(\"\")\n    const [dropDownPixel, setDropDownPixels] = useState(\"\")\n    const [cellArea, setCellArea] = useState(\"\")\n    \n\n    \n    //const [displaySegmented, setDisplaySegmented] = useState(true)\n\n    \n    var sample = \"\"\n    var marker = \"\"\n    var pixelImage = \"\"\n\n    //Function which get the images from backend\n    const displayResults = () => {\n        document.getElementById(\"resultsButton\").style.display = \"none\"\n        axios.get(\"/fetchResults\")\n        .then(function(response){\n           setTotalCells(response.data[1])\n           setResultingCells(response.data[2])\n           console.log(\"PALUU ARVO\")\n           console.log(response.data)\n\n           console.log(response.data[1])\n           console.log(response.data[2])\n           console.log(response.data[3])\n           console.log(response.data[4])\n           //Extracting values from dictionary\n           let samples = response.data[0][\"samples\"]\n           let area = response.data[0][\"area\"]\n           let intensity = response.data[0][\"intensity\"]\n           console.log(area)\n           console.log(samples)\n        \n           setPlotPaths(area)    \n           displayImages(area, samples, intensity, response.data[1], response.data[2], response.data[3], response.data[4]) //Calling function which displays the images         \n        })\n    }\n    //Function which displays the images to the user\n    const displayImages = (area, samples, intensity, totalCells, resultingCells, intensityCellType, cellAreaMeasurements) => { \n\n        let segmentation = false\n        let merged = false\n        let mergedOverlays = false\n\n        let counter = 0\n\n        Object.entries(samples[Object.keys(samples)[0]]).map(([key,value]) => {\n            console.log(key)\n            console.log(value)\n            console.log(Object.keys(Object.assign({}, ...value)))\n            if(Object.keys(Object.assign({}, ...value)).includes(\"overlays\")){\n                console.log(\"SEGMENTATION\")\n                segmentation = true\n            }\n        })\n\n        \n        //Creates the options for sample dropdown menu\n        var sampleOptions = Object.entries(Object.keys(samples)).map(([key,value]) => \n            <option value={value}>{value}</option>\n        )\n        //Creates the options for markers dropdown menu\n        var markerOptions = Object.entries(samples[Object.keys(samples)[0]]).map(([key,value]) => {\n            console.log(key)\n            if(key == \"merged_tiff\"){\n                merged = true\n            }\n            if(key == \"merged_overlays\"){\n                mergedOverlays = true\n            }\n\n            if(key != \"merged_tiff\" && key != \"merged_overlays\"){\n                return <option value={key}>{key}</option>\n            }\n        })\n\n        \n        //Create the dropdown list for samples\n        //The options are created above\n        setDropDownSamples(\n        <div class=\"row\">\n            <p>Samples: </p>\n            <select name=\"sampleSelector\" id=\"sampleSelector\" onChange={event => handleChangeSelect(event, segmentation, merged, \"sampleDropDown\")}>\n                 <option id=\"optionNoneSample\" value=\"None\" selected=\"true\">None</option>  \n                 {sampleOptions}      \n            </select>             \n        </div>)\n        \n        //If the backend response contains images where channels are merged (multi channel images) this if clause is executed \n        if(merged == true){\n            //Creates dropdown menu for markers\n            //The options are passed in a varible. The variable is initialized above\n            setDropDownMarkers(\n                <div class=\"row\">\n                    <p>Markers: </p>\n                    <select name=\"markerSelector\" id=\"markerSelector\" onChange={event => handleChangeSelect(event, segmentation, merged, \"markerDropDown\")} disabled>\n                         <option id=\"optionNonemarker\" value=\"None\" selected=\"true\">None</option>  \n                         {markerOptions}         \n                    </select>               \n                </div>\n            )\n            //Temp lists where the html elements are stored\n            let mergedImagesTemp = []\n            let markerImagesTemp = []\n            //Map thru a dictionary, with sample names and paths to the images/plots\n            Object.entries(samples).map(([key1,value1]) => {\n\n                //Add a counter in here\n\n                //Id to images and divs, key1 contains the sample name\n                let idMergedTiff = \"idTiff\" + key1\n                let idMergedOverlay = \"idOverlay\" + key1\n                let idMergedTiffDiv = \"tiffDiv\" + key1\n                let idMergedOverlayDiv = \"overlayDiv\" + key1\n\n                //Append the list with HTML element\n                //These are the merged images\n                mergedImagesTemp.push(<div id = {key1} hidden>\n                    <b>Merged image channels</b>\n                    <div id = {idMergedTiffDiv}>\n                        <p>{key1} merged image channels:</p>    \n                        <img class=\"contain\" id ={idMergedTiff} src={require(\"../src/images/\" + value1[\"merged_tiff\"])} onClick= {event => displayFullScreen(idMergedTiff)}></img>\n                    </div>\n                    {mergedOverlays ? (\n                    <div id = {idMergedOverlayDiv}>\n                        <p> {key1} segmented cells:</p>\n                        <img class=\"contain\" id ={idMergedOverlay} src={require(\"../src/images/\" + value1[\"merged_overlays\"])}  onClick= {event => displayFullScreen(idMergedOverlay)}></img>\n                    </div>\n                    ):(<></>)         \n                }   \n                    \n                </div>)    \n                //Map thru the single channel images (preprocessed, segmented, thresholded)\n                Object.entries(value1).map(([key,value]) => { \n                    if(key != \"merged_tiff\" && key != \"merged_overlays\"){ //The merged files are skipped\n\n                        //Initialize id to images and divs, key1 is the sample name and key is the marker\n                        let idPreprocessed = \"idPre\" + key1 + key\n                        let idThresholded = \"idThres\" + key1+ key\n                        let idSegmented = \"idSeg\" + key1+ key\n        \n                        let idPreprocessedDiv = \"preDiv\" + key1+ key\n                        let idThresholdedDiv = \"thresDiv\"+ key1 + key\n                        let idSegmentedDiv = \"segDiv\"+ key1 + key\n                        \n                        //Append the list with HTML element\n                        //These are the single channel images\n                        //THe segmented image is appended only if segmentation is executed\n                        markerImagesTemp.push(<div id = {key1 + key} hidden>\n                            <b>Single-channel image</b>\n                            <div id = {idPreprocessedDiv}>\n                                <p>{key1} preprocessed {key}:</p>    \n                                <img class=\"contain\" id ={idPreprocessed} src={require(\"../src/images/\" + value[0][\"preprocessed\"])} onClick= {event => displayFullScreen(idPreprocessed)}></img>\n                            </div>\n                            <div id = {idThresholdedDiv}>\n                                <p>{key1} thresholded {key}:</p>\n                                <img class=\"contain\" id ={idThresholded} src={require(\"../src/images/\" + value[1][\"thresholded\"])}  onClick= {event => displayFullScreen(idThresholded)}></img>\n                            </div>\n                            {segmentation ? (\n                                <div id = {idSegmentedDiv}>\n                                    <p>{key1} segmented {key}:</p>\n                                    <img class=\"contain\" id ={idSegmented} src={require(\"../src/images/\" + value[2][\"overlays\"])}  onClick= {event => displayFullScreen(idSegmented)}></img>         \n                                    <br></br>\n                                    <br></br>\n                                </div>               \n                            ):(<></>)         \n                            }   \n                            </div>)\n                    }\n                })\n                \n            })\n            //Add the temp lists to the state variable\n            setMergedImages(mergedImagesTemp)\n            setMarkerImages(markerImagesTemp)\n\n\n            \n        }\n        //If backend response contains single channel images, this if clause is executed\n        else if(merged == false){\n            //Map thru the samples and images\n            //The return value is directly updated to state variable\n            setSampleImages(Object.entries(samples).map(([key,value]) => {\n                //Id to images and divs, key contains the sample name\n                let idPreprocessed = \"idPre\" + key\n                let idThresholded = \"idThres\" + key\n                let idSegmented = \"idSeg\" + key\n\n                let idPreprocessedDiv = \"preDiv\" + key\n                let idThresholdedDiv = \"thresDiv\" + key\n                let idSegmentedDiv = \"segDiv\" + key\n\n                //Return the html element\n                //THe segmented image and the counts are appended to the list only if the segmentation is executed\n                return([...sampleImages, \n                <div id = {key} hidden>\n                    \n                    <div id = {idPreprocessedDiv}>\n                        <p>Preprocessed {key}:</p>    \n                        <img class=\"contain\" id ={idPreprocessed} src={require(\"../src/images/\" + Object.values(value)[0][0][\"preprocessed\"])} onClick= {event => displayFullScreen(idPreprocessed)}></img>\n                    </div>\n                    <div id = {idThresholdedDiv}>\n                        <p>Thresholded {key}:</p>\n                        <img class=\"contain\" id ={idThresholded} src={require(\"../src/images/\" + Object.values(value)[0][1][\"thresholded\"])}  onClick= {event => displayFullScreen(idThresholded)}></img>\n                    </div>\n                    {segmentation ? (\n                        <div id = {idSegmentedDiv}>\n                            <p>Segmented {key}:</p>\n                            <img class=\"contain\" id ={idSegmented} src={require(\"../src/images/\" + Object.values(value)[0][2][\"overlays\"])}  onClick= {event => displayFullScreen(idSegmented)}></img>  \n                            <p>Number of cells detected in image segmentation : {totalCells[key]}</p> \n                            <p>Number of cells after removing unassigned ones : {resultingCells[key]}</p>       \n                            <br></br>\n                            <br></br>\n                        </div>               \n                    ):(<></>)         \n                    }   \n                </div>])\n            }))\n\n        }\n       \n\n        var cellAreaList = []\n        if(Object.keys(cellAreaMeasurements).length != 0){\n            Object.entries(cellAreaMeasurements).map(([key1, value1]) => {Object.entries(value1).map(([key,value]) => {\n                console.log(key)\n                console.log(value)\n            })})\n            var cellType = Object.entries(cellAreaMeasurements).map(([key, value]) => Object.entries(value).map(([key,value]) =>   //Goes thru at cell type level\n                <td>{key}</td>\n            ))\n            console.log(cellType)\n            var pixelCount = Object.entries(cellAreaMeasurements).map(([key, value]) => Object.entries(value).map(([key,value]) => //Goes thru at cell type level\n                <td>{value[\"pixel_counts\"]}</td>\n            ))\n            console.log(pixelCount)\n            var cellCount = Object.entries(cellAreaMeasurements).map(([key, value]) => Object.entries(value).map(([key,value]) =>  //Goes thru at cell type level\n                <td>{value[\"cell_counts\"]}</td>\n            ))\n            console.log(cellCount)\n            //TÄHÄN\n            console.log(cellAreaMeasurements)\n            //Object.entries(cellAreaMeasurements).map(([key,value]) => { //Goes thru at sample level\n            Object.entries(cellAreaMeasurements).map(([key1, value1]) => {\n                console.log(key1, value1)\n                Object.entries(value1).map(([key,value]) => {\n\n                console.log(key)\n                console.log(value)        \n                    cellAreaList.push(\n                        <div id=\"cellMeasurementTable\">\n                            <p>{key} cell area measurements</p>\n                            <table>\n                            <tr>\n                                <th>Cell</th>\n                                <th>Pixel count</th>\n                                <th>Cell count</th>\n                            </tr>\n                            <tr><th>{key}</th></tr>\n                            <tr><th>{value[\"pixel_counts\"]}</th></tr>\n                            <tr><th>{value[\"cell_counts\"]}</th></tr>\n       \n                            </table>\n                        </div>\n                    )\n                })})\n            setCellArea(cellAreaList)\n        }\n\n        \n\n        //If area measurements for the thresholded image is computed\n        if(area != \"\"){\n            //Add the plot to a state variable\n            setAreaPlots(\n                <div>\n                    <b>Measurement of marker positive area:</b>\n                    <br></br>\n                    <img id =\"areaPlot\" src={require(\"../src/images/Area/\" + area)} onClick= {event => displayFullScreen(\"areaPlot\")}></img>\n                </div>\n            )\n        }\n\n        if(Object.keys(intensity).length != 0){\n\n                   \n            //Creates the options for markers dropdown menu\n            var intensityOptions = []\n            intensityOptions.push(Object.keys(intensity).map((key,index) => {\n                console.log(key)\n                if(key != \"group_plot\"){\n                    return <option value={key}>{key}</option>\n                }\n            }))\n\n            console.log(intensityOptions)\n\n            var dropDownPixels = <div class=\"row\">\n                                    <p>Sample distributions: </p>\n                                    <select name=\"pixelSampleSelector\" id=\"pixelSampleSelector\" onChange={event => handleChangeSelectPixel(event)}>\n                                        <option id=\"optionNonePixel\" value=\"None\" selected=\"true\">None</option>  \n                                        {intensityOptions}              \n                                    </select>                     \n                                </div>\n            console.log(dropDownPixel)\n            var pixelTempList = []\n\n            setPixelComparisonPlot(\n                <div>\n                    <br></br>\n                    <b>Cell pixel intensity distribution</b>\n                    {dropDownPixels}\n                    {pixelTempList}                  \n                    <p>{intensityCellType}-cell pixel intensity distribution between two groups:</p>\n                    <img id=\"comparisonIntensityPlot\" src={require(\"../src/images/Intensity/\" + intensity[\"group_plot\"])} onClick = {event => displayFullScreen(\"comparisonIntensityPlot\")}></img>\n                </div>\n            )\n\n            Object.keys(intensity).forEach((key,value) => {\n                    console.log(key)\n                    console.log(value)\n                    if(key != \"group_plot\"){\n                        //Id to images and divs, key contains the sample name\n                        let idIntensityPlot = \"idIntensity\" + key\n                        let idIntensityPlotDiv = \"idIntensityDiv\" + key\n                        console.log(intensity[key])\n        \n                        //Return the html element\n                        //The segmented image and the counts are appended to the list only if the segmentation is executed\n                        pixelTempList.push(\n                        <div id = {\"intensity\" + key} hidden>       \n                            <div id = {idIntensityPlotDiv}>\n                                <p>Pixel intensities of {intensityCellType}-cells in {key}:</p>    \n                                <img class=\"contain\" id ={idIntensityPlot} src={require(\"../src/images/Intensity/\" + intensity[key])} onClick= {event => displayFullScreen(idIntensityPlot)}></img>\n                            </div>\n                        <br></br>    \n                        </div>)\n\n                    }             \n                }\n            )\n            setPixelSamplePlot(pixelTempList)\n            console.log(pixelSamplePlot)\n            \n\n        }    \n    } \n\n    //Function which displays the images full screen\n    const displayFullScreen = (id) => { \n        let elem = document.getElementById(id) //Get element based on id\n        if(document.fullscreenElement){ //Exit if fullscreen\n            document.exitFullscreen()\n        }\n        //Otherwise, no image is in fullscreen mode \n        //Display image fullscreen\n        //THis function is dependent from the browser used\n        else{\n            if (elem.requestFullscreen) {\n                elem.requestFullscreen();\n              } else if (elem.webkitRequestFullscreen) { /* Safari */\n                elem.webkitRequestFullscreen();\n              } else if (elem.msRequestFullscreen) { /* IE11 */\n                elem.msRequestFullscreen();\n              }\n        }\n        \n    }\n\n    //Handles changes in the sample drop-down list\n    //segmentation and merged are boolean parameters\n    //call parameter contains the source of the function call (sampleDropDown or markerDropDown)\n    //THis function is both for multi and single channel images. It is specified in the comments which images the if clause handles\n    const handleChangeSelect = (event, segmentation, merged, call) => { \n\n        //Displays the merged tiff and the merged masks\n        //For multichannel images\n        if(merged == true && event.target.value!=\"None\" && call == \"sampleDropDown\"){\n            //Format the variables based on the selected value in drop down menu\n            let idMergedDiv = \"tiffDiv\" + event.target.value\n            let idOverlayDiv = \"overlayDiv\" + event.target.value\n\n            //When sample is changed, change the value of markerSelector to None \n            document.getElementById(\"markerSelector\").value = \"None\" \n            document.getElementById(\"markerSelector\").disabled = false //Display the markerSelector dropDown menu\n            //Display the images\n            document.getElementById(idMergedDiv).style.display = \"block\"\n            document.getElementById(idOverlayDiv).style.display = \"block\" \n        }\n\n        //If the sampleSelector value is changed to None, hide the markerSelector dropdown menu\n        //For multichannel images\n        else if(merged == true && event.target.value==\"None\" && call == \"sampleDropDown\"){\n            document.getElementById(\"markerSelector\").value = \"None\" //Changes value\n            document.getElementById(\"markerSelector\").disabled = true //Hide\n        \n        }\n\n        //This if statement displays the the single channel images (input image, thresholded, and segmented)\n        //Displays also the checkboxes which can be used to hide the images listed above\n        //THis if statement is both for images which composes of multiple channels and single channels\n        else if(merged == true && event.target.value!=\"None\" && call == \"markerDropDown\" || merged == false && event.target.value != \"None\" && call == \"sampleDropDown\"){\n\n            //IF the checkbox exists it is checked by default\n            if(document.getElementById(\"preprocessedImgCheck\") != null){\n                document.getElementById(\"preprocessedImgCheck\").checked = true;    \n            }\n            if(document.getElementById(\"thresholdImgCheck\") != null){\n                document.getElementById(\"thresholdImgCheck\").checked = true; \n            }\n            if(document.getElementById(\"segmentedImgCheck\") != null){\n                document.getElementById(\"segmentedImgCheck\").checked = true;    \n            }    \n\n            let idPreprocessedDiv = \"\"\n            let idThresholdedDiv = \"\"\n            let idSegmentedDiv = \"\"\n\n            //If statement for merged images (multiple channels)\n            if(merged == true){\n                //Get's the current sample from the sampleSelector\n                let currentSample = document.getElementById(\"sampleSelector\").value\n                //THe current sample is used to create the id of the DIV where the images are stored\n                //event.target value contains the marker \n                //The id is in form preDiv + sample + marker (e.g preDivSample1LMX)\n                idPreprocessedDiv = \"preDiv\" + currentSample + event.target.value\n                idThresholdedDiv = \"thresDiv\"+ currentSample + event.target.value\n                idSegmentedDiv = \"segDiv\" + currentSample+ event.target.value\n\n                //Using the id to display the images\n                document.getElementById(idPreprocessedDiv).style.display = \"block\"\n                document.getElementById(idThresholdedDiv).style.display = \"block\"\n                document.getElementById(idSegmentedDiv).style.display = \"block\"\n            }\n            // If statement for single channel images\n            else if(merged == false){\n                //Build the div id from input value\n                idPreprocessedDiv = \"preDiv\" + event.target.value\n                idThresholdedDiv = \"thresDiv\" + event.target.value\n                idSegmentedDiv = \"segDiv\" + event.target.value\n\n                //If the image is hidden make them visible\n                document.getElementById(idPreprocessedDiv).style.display = \"block\"\n                document.getElementById(idThresholdedDiv).style.display = \"block\"\n                if(segmentation == true){\n                    document.getElementById(idSegmentedDiv).style.display = \"block\"\n                }\n\n            }\n            \n            //Creates the checkbox HTML element to each image\n            setCheckbox(\n                <div class=\"row\">\n                    <div class = \"colQC-1\">\n                        <div class=\"checkbox\">    \n                            <p>Preprocessed image: </p>\n                            <input type = \"checkbox\" id=\"preprocessedImgCheck\" onClick={()=>handleCheckbox(idPreprocessedDiv, \"preprocessedImgCheck\")} defaultChecked/>                \n                        </div>\n                    </div>\n                    <div class = \"colQC-2\">\n                        <div class=\"checkbox\">    \n                            <p>Thresholded image: </p>\n                            <input type = \"checkbox\" id=\"thresholdImgCheck\" onClick={()=>handleCheckbox(idThresholdedDiv, \"thresholdImgCheck\")} defaultChecked/>                \n                        </div>\n                    </div>\n                           \n                    {segmentation ? (\n                              <div class = \"colQC-3\">\n                              <div class=\"checkbox\">    \n                                  <p>Segmented image: </p>\n                                  <input type = \"checkbox\" id=\"segmentedImgCheck\" onClick={()=>handleCheckbox(idSegmentedDiv, \"segmentedImgCheck\")} defaultChecked/>                \n                              </div>         \n    \n                          </div>\n                    ):(<></>)         \n                    }         \n                </div>    \n            )             \n        }\n\n        //Displays the main div where the merged sample specific images are stored\n        //Both for multi and single channel images\n        if(event.target.value != \"None\" && call == \"sampleDropDown\"){\n            document.getElementById(event.target.value).style.display = \"block\"\n        }\n        //Displays the main div where the marker specific images are stored\n        //For multichannel images\n        if(event.target.value != \"None\" && call == \"markerDropDown\"){\n            document.getElementById(sample + event.target.value).style.display = \"block\"\n        }\n\n        //Hides the previously selected sample, so that only on sample is displayed at the time\n        if(sample != \"\" && sample != \"None\" && sample != event.target.value && call == \"sampleDropDown\"){\n            if(merged == true){\n                setCheckbox(\"\") //after the sample changes, hide the checkbox which is used to control the single channel images\n            }\n            document.getElementById(sample).style.display = \"none\"\n            //Hides the chosen marker image after sample changes\n            if(marker != \"\" && marker != \"None\" && merged == true){\n                document.getElementById(sample+marker).style.display = \"none\"\n            }\n\n        }\n        //Hides the previously selected marker image, so that only one set of marker images is displayed at once\n        //Multichannel images\n        else if(marker != \"\" && marker != \"None\" && marker != event.target.value && call == \"markerDropDown\"){\n            document.getElementById(sample + marker).style.display = \"none\"\n        }\n        //Empties (hides) the checkbox variable if marker is set to null\n        //Multichannel images\n        else if(call == \"markerDropDown\" && marker == \"None\" && checkbox != \"\"){\n            setCheckbox(\"\")\n        }\n        //Hides previous images\n        //For single channel images\n        else if(sample != \"\" && sample != \"None\" && merged == false){\n            document.getElementById(sample).style.display = \"none\"\n        }\n        //Hides the checkboxes if condition is met\n        //THis if statement is bot for single and multi channel images\n        if(event.target.value == \"None\" && merged == false || event.target.value == \"None\" && call == \"markerDropDown\"){\n            setCheckbox(\"\")\n        }\n\n        //Update the current sample and marker values, these values are \"previous\" values when the function is called next time\n        if(call == \"sampleDropDown\"){\n            sample = event.target.value\n        }\n        if(call == \"markerDropDown\"){\n            marker = event.target.value\n        }     \n    }\n\n    //This function handles changes in checkboxes\n    //Parameters are the id of image div and id of checkbox\n    //The checkboxes are created in function above\n    const handleCheckbox = (idDiv, idCb) => {\n\n        var elem = document.getElementById(idDiv) //Get the div element\n        //If clause which hides the element\n        if(window.getComputedStyle(elem).display == \"block\"){\n            elem.style.display = \"none\"\n            document.getElementById(idCb).defaultChecked = false;\n        }\n        //If clause which displays the element\n        else if(window.getComputedStyle(elem).display == \"none\"){\n            elem.style.display =\"block\"\n            document.getElementById(idCb).defaultChecked = true;\n        }\n\n    }\n \n    const handleChangeSelectPixel = (event) =>{\n        console.log(pixelImage)\n        //displays images/nothing depending of the selected drop-down value\n        let idIntensityDiv = \"idIntensityDiv\" + event.target.value\n         \n        console.log(idIntensityDiv)\n        //Make the image DIV visible       \n        if(event.target.value != \"None\"){\n            //document.getElementById(idIntensityDiv).style.display = \"block\"\n            document.getElementById(\"intensity\" + event.target.value).style.display = \"block\"\n        }\n\n        //Hides images depending of the value\n        if(pixelImage != \"\" && pixelImage != \"intensityNone\"){\n            document.getElementById(pixelImage).style.display = \"none\"\n        }\n        pixelImage = \"intensity\" + event.target.value //Update the value to a global variable\n        \n    }\n    //Display HTML to the user\n    return(\n        <div>\n            <form class=\"resultsForm\" id=\"resultsForm\">\n                <div hidden id=\"load\">\n                    <p>Running SIMPLI</p>         \n                </div>\n                \n                <div hidden id=\"results\">  \n                    <b>SIMPLI results</b>  \n                    <br></br>\n                    <button id=\"resultsButton\" type=\"button\" onClick={event => displayResults()}>Display results</button>\n                    <div class = \"row\">\n                        <div class = \"colQC-1\">\n                            {dropDownSamples}     \n                        </div>\n                        <div class = \"colQC-2\">\n                            {dropDownMarkers}     \n                        </div>\n                       \n                    </div>\n                    <div class = \"colQC-1\">\n                            {checkbox}                     \n                    </div>\n                        \n                    {sampleImages}\n                    {markerImages}\n                    {mergedImages}\n                    {cellArea}\n                    {areaPlots}\n                    {pixelComparisonPlot}\n\n                </div>\n            </form>\n        </div>\n    )\n}\nexport default GetResults;"],"mappings":"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"},"metadata":{},"sourceType":"module"}