{"ast":null,"code":"import _defineProperty from \"/home/ernohanninen/simpli_project/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/ernohanninen/simpli_project/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/ernohanninen/simpli_project/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/home/ernohanninen/simpli_project/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/ernohanninen/simpli_project/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli_project/App/src/getMetadata.js\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\n/*\nTitle: getMetadata.js\nDate: 2021-09-03\nAuthor: Erno Hänninen\nDescription:\n  - In this page the settings regarding the selected processes are inputted\n  - Collecting and validating input\n  \n\nProcedure:\n - Display the settings forms for selected processes\n - Collect the data\n - Validate the input\n - Run the pipeline\n\n\n*/\n//Import libraries and css file\nimport React, { useState, forwardRef, useImperativeHandle, useRef } from 'react';\nimport axios from \"axios\";\nimport './App.css'; //Check that the colors for cell_masking_metadata are okay\n//Global variables\n\nvar options = [];\nvar maskTemp = {\n  cellType: \"\",\n  thresholdMarker: \"\",\n  thresholdValue: null,\n  color: \"\"\n};\nvar submitted_markers = []; //Function which is called from APP.js script\n\nvar GetMetadata = forwardRef(function (props, ref) {\n  //State variables\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      renderArea = _useState2[0],\n      setRenderArea = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      renderSegmentation = _useState4[0],\n      setRenderSegmentation = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      renderMasking = _useState6[0],\n      setRenderMasking = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      renderIntensity = _useState8[0],\n      setRenderIntensity = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      renderCellArea = _useState10[0],\n      setRenderCellArea = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      intensityTb = _useState12[0],\n      setIntensityTb = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      allMarkers = _useState14[0],\n      setAllMarkes = _useState14[1];\n\n  var _useState15 = useState([{}]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      markersDict = _useState16[0],\n      setMarkersDict = _useState16[1];\n\n  var _useState17 = useState(0),\n      _useState18 = _slicedToArray(_useState17, 2),\n      counter = _useState18[0],\n      setCounter = _useState18[1];\n\n  var _useState19 = useState(0),\n      _useState20 = _slicedToArray(_useState19, 2),\n      markerKeyCounter = _useState20[0],\n      setMarkerKeyCounter = _useState20[1];\n\n  var markerTemp = {\n    marker: \"\",\n    mainMarker: \"\"\n  };\n\n  var _useState21 = useState(0),\n      _useState22 = _slicedToArray(_useState21, 2),\n      maskCounter = _useState22[0],\n      setMaskCounter = _useState22[1];\n\n  var _useState23 = useState(0),\n      _useState24 = _slicedToArray(_useState23, 2),\n      maskKeyCounter = _useState24[0],\n      setMaskKeyCounter = _useState24[1];\n\n  var _useState25 = useState(0),\n      _useState26 = _slicedToArray(_useState25, 2),\n      cellAreaCounter = _useState26[0],\n      setCellAreaCounter = _useState26[1];\n\n  var _useState27 = useState(false),\n      _useState28 = _slicedToArray(_useState27, 2),\n      newMask = _useState28[0],\n      setNewMask = _useState28[1];\n\n  var inputFields = [];\n\n  var _useState29 = useState(\"\"),\n      _useState30 = _slicedToArray(_useState29, 2),\n      analysisReady = _useState30[0],\n      setAnalysisReady = _useState30[1];\n\n  var _useState31 = useState(\"\"),\n      _useState32 = _slicedToArray(_useState31, 2),\n      markerOptions = _useState32[0],\n      setMarkerOptions = _useState32[1];\n\n  var _useState33 = useState([]),\n      _useState34 = _slicedToArray(_useState33, 2),\n      originalMarkers = _useState34[0],\n      setOriginalMarkers = _useState34[1]; //This list keeps in track about the markers that the user inputted\n\n\n  var _useState35 = useState(\"\"),\n      _useState36 = _slicedToArray(_useState35, 2),\n      markerTextBox = _useState36[0],\n      setMarkerTextBox = _useState36[1];\n\n  var _useState37 = useState(\"\"),\n      _useState38 = _slicedToArray(_useState37, 2),\n      modelDropDown = _useState38[0],\n      setModelDropDown = _useState38[1];\n\n  var _useState39 = useState(\"\"),\n      _useState40 = _slicedToArray(_useState39, 2),\n      model = _useState40[0],\n      setModel = _useState40[1];\n\n  var _useState41 = useState(\"\"),\n      _useState42 = _slicedToArray(_useState41, 2),\n      segmentationSettings = _useState42[0],\n      setSegmentationSettings = _useState42[1];\n\n  var _useState43 = useState(\"\"),\n      _useState44 = _slicedToArray(_useState43, 2),\n      probTreshold = _useState44[0],\n      setProbThreshold = _useState44[1];\n\n  var _useState45 = useState(\"\"),\n      _useState46 = _slicedToArray(_useState45, 2),\n      overlapThreshold = _useState46[0],\n      setOverlapThreshold = _useState46[1];\n\n  var _useState47 = useState(\"\"),\n      _useState48 = _slicedToArray(_useState47, 2),\n      maskingTextBox = _useState48[0],\n      setMaskingTextBox = _useState48[1];\n\n  var _useState49 = useState([{}]),\n      _useState50 = _slicedToArray(_useState49, 2),\n      maskDict = _useState50[0],\n      setMaskDict = _useState50[1];\n\n  var _useState51 = useState(\"\"),\n      _useState52 = _slicedToArray(_useState51, 2),\n      errorMessageArea = _useState52[0],\n      setErrorMessageArea = _useState52[1];\n\n  var _useState53 = useState(\"\"),\n      _useState54 = _slicedToArray(_useState53, 2),\n      intensityCellType = _useState54[0],\n      setIntensityCellType = _useState54[1];\n\n  var _useState55 = useState([]),\n      _useState56 = _slicedToArray(_useState55, 2),\n      cellAreaTb = _useState56[0],\n      setCellAreaTb = _useState56[1];\n\n  var _useState57 = useState([]),\n      _useState58 = _slicedToArray(_useState57, 2),\n      cellAreaList = _useState58[0],\n      setCellAreaList = _useState58[1];\n\n  var _useState59 = useState(\"\"),\n      _useState60 = _slicedToArray(_useState59, 2),\n      expressionFraction = _useState60[0],\n      setExpressionFraction = _useState60[1];\n\n  useImperativeHandle(ref, function () {\n    return {\n      //THis axios call is used to get the processes to run\n      getProcesses: function getProcesses() {\n        function getData() {\n          return _getData.apply(this, arguments);\n        }\n\n        function _getData() {\n          _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            var response;\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return axios({\n                      url: \"/getSettings\",\n                      method: \"get\"\n                    });\n\n                  case 3:\n                    response = _context.sent;\n                    return _context.abrupt(\"return\", response.data);\n\n                  case 7:\n                    _context.prev = 7;\n                    _context.t0 = _context[\"catch\"](0);\n                    console.log(_context.t0);\n\n                  case 10:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[0, 7]]);\n          }));\n          return _getData.apply(this, arguments);\n        }\n\n        getData() //If no error parse the response\n        .then(function (response) {\n          //Parse values from response data to boolean format\n          for (var prop in response[0]) {\n            if (response[0].hasOwnProperty(prop)) {\n              //Converts the objects properties from string to boolean values\n              response[0][prop] = response[0][prop] == 'true' || response[0][prop] == 'false' ? response[0][prop] === 'true' : response[0][prop];\n            }\n          } //Before rendering any process settings forms, the settings inputted on sample page are validated\n          //Check that the source of images is selected\n\n\n          if (response[0].instrument == \"\") {\n            alert(\"Select source of images\");\n          } //Check that all the processes which are dependent on each other is checked\n          //Alert user if some of the required processes is not checked\n          else if (response[0].execute_sd_segmentation == false || response[0].execute_cell_type_identification == false) {\n            alert(\"To run the analysis, check atleast image segmentation and cell type identification\");\n          } else if ((response[0].execute_sd_segmentation == false || response[0].execute_cell_type_identification == false) && (response[0].execute_intensity == true || response[0].execute_measure_cell_areas == true)) {\n            alert(\"To run cell-based analysis, check image segmentation and cell type identification\");\n          } else if (response[0].execute_cell_clustering == false && response[0].execute_cell_thresholding == true || response[0].execute_homotypic_interactions == true || response[0].execute_heterotypic_interactions == true || response[0].execute_permuted_interactions == true) {\n            alert(\"To run cell clustering, check cell type identification\");\n          } else if (response[0].execute_cell_thresholding == false && response[0].execute_homotypic_interactions == true || response[0].execute_heterotypic_interactions == true || response[0].execute_permuted_interactions == true) {\n            alert(\"To run cell thresholding, check cell clustering\");\n          } else if (response[0].execute_cell_thresholding == false && response[0].execute_homotypic_interactions == true) {\n            alert(\"To run homotypic interactions, check cell thresholding\");\n          } else if (response[0].execute_cell_thresholding == false && response[0].execute_heterotypic_interactions == true) {\n            alert(\"To run heterotypic interactions, check cell thresholding\");\n          } else if (response[0].execute_cell_thresholding == false && response[0].execute_permuted_interactions == true) {\n            alert(\"To run permuted interactions, check cell thresholding\");\n          } //If the processes were correct display the getMetadata page and hide the getSettings page\n          else {\n            document.getElementById(\"settingsPage\").style.display = \"none\";\n            document.getElementById(\"nextButton2\").style.display = \"none\";\n            document.getElementById(\"returnButton\").style.display = \"none\";\n            document.getElementById(\"returnButton2\").style.display = \"block\";\n            document.getElementById(\"nextButton3\").style.display = \"block\";\n            document.getElementById(\"metadataPage\").style.display = \"block\"; //These if statements contols which input fields are rendered. This depdends of the processes to run\n            //Calls the function to prepare the forms with default values\n\n            if (response[0].execute_area == true) {\n              setRenderArea(true);\n              setMarkerTextBox(\"\");\n              var markers = response[1]; //dictionary of markers\n\n              allMarkersChecked(markers);\n              setOriginalMarkers(response[2]);\n            } else if (response[0].execute_area == false) setRenderArea(false); //If segmentation is executed, display elements and call function\n\n\n            if (response[0].execute_sd_segmentation == true) {\n              setRenderSegmentation(true);\n              segmentationInput();\n            } else if (response[0].execute_sd_segmentation == false) setRenderSegmentation(false); //If cell type identification is executed, display elements and call function\n\n\n            if (response[0].execute_cell_type_identification == true) {\n              var _markers = response[1];\n              setRenderMasking(true);\n              maskingInput(_markers);\n            } //if cell type identification is not executed, hide elements\n            else if (response[0].execute_cell_type_identification == false) {\n              setRenderMasking(false);\n              setMaskingTextBox(\"\");\n            } //If cell type pixel intensity measuremnts is executed, display elements and call function\n\n\n            if (response[0].execute_intensity == true) {\n              setRenderIntensity(true);\n              intensityInput();\n            } //if pixel analysis is not executed, hide elements\n            else if (response[0].execute_intensity == false) setRenderIntensity(false); //If cell area measuremnts is executed, display elements and call function\n\n\n            if (response[0].execute_measure_cell_areas == true) {\n              setRenderCellArea(true);\n              cellAreaInput();\n            } //Hide elements\n            else if (response[0].execute_measure_cell_areas == false) setRenderCellArea(false);\n\n            if (response[0].execute_cell_clustering == true) {\n              console.log(\"RENDER SOMETHING\");\n            }\n\n            if (response[0].execute_cell_thresholding == true) {\n              console.log(\"RENDER SOMETHING\");\n            }\n\n            if (response[0].execute_homotypic_interactions == true) {\n              console.log(\"RENDER SOMETHING\");\n            }\n\n            if (response[0].execute_heterotypic_interactions == true) {\n              console.log(\"RENDER SOMETHING\");\n            }\n\n            if (response[0].execute_permuted_interactions == true) {\n              console.log(\"RENDER SOMETHING\");\n            }\n          }\n        });\n      },\n      //Function which makes a request call to the backend to submit the settings\n      submitMetadata: function submitMetadata() {\n        var error = false;\n        var temp_list_markers = []; //Reads the markers which the user wants to use to identify the corresponding cells\n\n        if (maskTemp[\"thresholdMarker\"] != \"\") {\n          for (var i = 0; i < Object.values(maskDict).length; i++) {\n            temp_list_markers.push(Object.values(Object.values(maskDict)[i])[1][\"threshold_marker\"]);\n          }\n        } //Checks that the segmentation form is correctly filled\n\n\n        if (renderSegmentation == true && model == \"\" || probTreshold == \"\" || overlapThreshold == \"\" || isNaN(probTreshold) != false || isNaN(overlapThreshold) != false || probTreshold < 0 || probTreshold > 1 || overlapThreshold < 0 || overlapThreshold > 1) {\n          alert(\"Error in model or thresholds in cell segmentation settings. Probability and overlap threshold should have value between 0-1\");\n          error = true;\n        } //Check if cell type identification fields are empty\n        else if (renderMasking == true && maskTemp[\"thresholdMarker\"] == \"\" || maskTemp[\"cellType\"] == \"\" || maskTemp[\"thresholdValue\"] == null || maskTemp[\"color\"] == \"\") {\n          alert(\"Fill all the fields in cell type identification before proceeding\");\n          error = true;\n        } //Checks that the threshold value field has accepted value\n        else if (maskTemp[\"thresholdValue\"] != \"NA\" && isNaN(maskTemp[\"thresholdValue\"]) == true || isNaN(maskTemp[\"thresholdValue\"]) == false && maskTemp[\"thresholdValue\"] < 0 || maskTemp[\"thresholdValue\"] > 1) {\n          alert(\"Only values between 0-1 or NA are accepted in threshold value textbox\");\n          error = true;\n        } //Checks that all the markers submitted in submit sample page are identified, by checking the length of these lists\n        else if (temp_list_markers.length != submitted_markers.length) {\n          alert(\"All the submitted markers on submit sample page should be identified\");\n          error = true;\n        } //Checks the same thing as above but by checking that all the items match\n        else if (submitted_markers.every(function (item) {\n          return temp_list_markers.includes(item);\n        }) == false) {\n          alert(\"All the submitted markers on submit sample page should be identified\");\n          error = true;\n        } //Checks that the cell type in intensity form matches one of the cell types in the identification process\n        else if (renderIntensity == true) {\n          var boolIntensity = false; //Checks that the cell type in input field corresponds one of the cell types\n\n          for (var _i = 0; _i < Object.values(maskDict).length; _i++) {\n            if (Object.values(Object.values(maskDict)[_i])[0][\"cell_type\"] == intensityCellType) {\n              boolIntensity = true;\n            }\n          } //Displays the error message\n\n\n          if (boolIntensity == false) {\n            error = true;\n            alert(\"Cell type in pixel intensity form should match one of the cell types in cell type identification\");\n          }\n        } //Checks that the co expression value is between 0-1\n\n\n        if (renderCellArea == true && error == false) {\n          if (isNaN(expressionFraction) != false || expressionFraction == \"\" || expressionFraction < 0 || expressionFraction > 1) {\n            error = true;\n            alert(\"Co-expression factor should set between 0-1\");\n          } //If the value is okay, next check that the input are cells identified in cell identification process\n\n\n          if (error == false) {\n            var temp_list_comparison = [];\n            var temp_list_types = [];\n            var boolCellArea = true; // loops over the cell area measurements input field\n\n            for (var _i2 = 0; _i2 < cellAreaList.length; _i2++) {\n              if (cellAreaList[_i2].includes(\"/\")) {\n                //If \"/\" we are looking for co-expressing cells -> cellAreaList contains more than 1 cell type\n                var cells = cellAreaList[_i2].split(\"/\"); //Splitting the different cell types to a list\n\n\n                temp_list_comparison = temp_list_comparison.concat(cells); //Concatenate the cells array to the temp arrray\n              } else {\n                temp_list_comparison.push(cellAreaList[_i2]); // if no \"/\" -> only one cell type -> push it directly to the temp list\n              }\n            } //Get the cell types identified in cell type identification\n\n\n            for (var _i3 = 0; _i3 < Object.values(maskDict).length; _i3++) {\n              temp_list_types.push(Object.values(Object.values(maskDict)[_i3])[0][\"cell_type\"]);\n            } //If the cell area measurements has input which is not identified in cell type identification error is raisen\n\n\n            if (!temp_list_comparison.every(function (r) {\n              return temp_list_types.includes(r);\n            })) {\n              boolCellArea = false;\n            }\n\n            if (boolCellArea == false) {\n              error = true;\n              alert(\"Some cell type(s) in cell area measurement form doesn't match the cell types in cell type identification\");\n            }\n          }\n        }\n\n        console.log(error);\n\n        if (error == false) {\n          //If no error in the input submit the data to backend\n          //store the parameters for segmentation to dictionary\n          var segmentingDict = {\n            \"model\": model,\n            \"probThreshold\": probTreshold,\n            \"overlapThreshold\": overlapThreshold\n          };\n          var url = '/submitMetadata'; //url for the request\n          //send data to backend \n\n          axios.post(url, {\n            //Collect the data to the post request\n            \"markers\": markersDict,\n            \"segmentingSettings\": segmentingDict,\n            \"masks\": maskDict,\n            \"intensityCellType\": intensityCellType,\n            \"fraction\": expressionFraction,\n            \"cellAreaList\": cellAreaList\n          }) //Handle the response from backend\n          .then(function (response) {\n            if (response.data == \"error\") {\n              //If error\n              console.log(\"########ERROR########\");\n            } else {\n              //IF everyting okay\n              console.log(\"READY\");\n            }\n          });\n          document.getElementById(\"metadataPage\").style.display = \"none\";\n          document.getElementById(\"resultsPage\").style.display = \"block\";\n          document.getElementById(\"returnButton2\").style.display = \"none\";\n          document.getElementById(\"nextButton3\").style.display = \"none\";\n          document.getElementById('load').style.display = 'block'; //This axios request sends request to /run url, from where the image analysis pipeline is executed\n\n          var url2 = '/run';\n          axios.post(url2, \"RUN\").then(function (response) {\n            if (response.data == \"error\") {\n              //If error\n              console.log(\"########ERROR########\");\n              console.log(\"ERROR IN AXIOS CALL\"); //alert(\"Error when performing the analysis, please check your input files and try again.\")\n\n              document.getElementById('load').style.display = 'none';\n            } else {\n              //IF everything okay\n              console.log(\"Analysis ready\"); //Display results page for user\n              //Parses the resonse.data which contains the output message from Nextflow pipeline\n              //If error string is found -> assume that error accured -> show error message\n\n              if (response.data.includes(\"Error\")) {\n                document.getElementById(\"pipelineStatus\").innerHTML = \"An error occured during the analysis. The error can be tracked from the message below or from nextflow.log file. Note, some of the results are missing because of the error.\";\n              } else {\n                document.getElementById(\"pipelineStatus\").innerHTML = \"The pipeline ran successfully, please display the results\";\n              } //Get the cell type and corresponding color. These are displayed in result page\n\n\n              var color_elem = [];\n\n              for (var _i4 = 0; _i4 < Object.values(maskDict).length; _i4++) {\n                color_elem += Object.values(Object.values(maskDict)[_i4])[3]['color'] + \": \" + Object.values(Object.values(maskDict)[_i4])[0]['cell_type'] + \"     \";\n              } //Display and hide elements\n\n\n              document.getElementById(\"color_label\").innerHTML += color_elem;\n              document.getElementById(\"outputB\").style.display = \"block\";\n              document.getElementById(\"outputMessage\").innerHTML = response.data;\n              document.getElementById('load').style.display = 'none';\n              document.getElementById('results').style.display = 'block';\n            }\n          });\n        }\n      }\n    };\n  }); // ################################################## Metadata for positive marker area measurements #################################################################################\n  //THis is commented away from the pipeline\n\n  var allMarkersChecked = function allMarkersChecked(markers) {\n    setMarkersDict(markers);\n    var count = -1; //let markers = originalMarkers //Using a temp list because the state variable doesn't update immediately \n\n    setMarkerKeyCounter(Object.keys(markers).length);\n    setMarkerTextBox(Object.entries(markers).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          index = _ref2[1];\n\n      var obj = markers[key];\n      console.log(obj);\n      var marker = Object.keys(obj)[0];\n      console.log(marker); //if(marker in originalMarkers){//THis doesn't work because the marker is located in 0:{marker:mainMarker}\n\n      console.log(\"INCLUDES\");\n      count = count + 1;\n      var id = \"marker\" + count;\n      setCounter(count);\n      console.log(count);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        id: id,\n        value: marker,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 28\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-1\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: id,\n        value: marker,\n        disabled: true,\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-2\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: id,\n        value: marker,\n        disabled: true,\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-3\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return removeMarker(count);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 29\n        }\n      }, \"Remove\")));\n    }));\n  };\n\n  var addMarkers = function addMarkers(event) {\n    //Disables element after new one is added\n    if (Object.keys(markersDict).includes(counter.toString())) {\n      var name = \"marker\" + counter;\n      console.log(name);\n      document.getElementsByName(name).forEach(function (e) {\n        e.disabled = true;\n      });\n    }\n\n    var count = counter + 1;\n    var id = \"marker\" + count;\n    setMarkerTextBox([].concat(_toConsumableArray(markerTextBox), [/*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      id: id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: id,\n      onBlur: function onBlur(event) {\n        return handleChangeMarker(id, event, \"marker\");\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: id,\n      onBlur: function onBlur(event) {\n        return handleChangeMarker(id, event, \"mainMarker\");\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: markerTextBox.length === 0,\n      onClick: function onClick() {\n        return removeMarker(id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 17\n      }\n    }, \"Remove\")))]));\n    setCounter(count);\n  };\n\n  var removeMarker = function removeMarker(id) {\n    var key = document.getElementById(id).getAttribute(\"value\");\n    delete markersDict[key];\n    document.getElementById(id).remove();\n  };\n\n  var handleChangeMarker = function handleChangeMarker(id, event, input) {\n    setMarkerKeyCounter(markerKeyCounter + 1); //Update the counter\n    //Checks what is the input of the function and stores the input to a dictionary \n\n    if (input === \"marker\") {\n      var inputError = validateMarker(event.target.value);\n      console.log(inputError);\n\n      if (inputError === true) {\n        alert(\"Error in marker input: There is no marker \" + event.target.value + \" in the data\");\n      } else {\n        markerTemp = _objectSpread({}, markerTemp, {\n          marker: event.target.value\n        });\n      }\n    } else if (input === \"mainMarker\") {\n      var _inputError = validateMarker(event.target.value);\n\n      if (_inputError === false) {\n        markerTemp = _objectSpread({}, markerTemp, {\n          mainMarker: event.target.value\n        });\n      } else {\n        alert(\"Error in main marker input: There is no marker \" + event.target.value + \" in the data\");\n      }\n    }\n\n    var exists = false; //After the temp dictionary is filled store the properties to the main dictionary\n\n    if (Object.values(markerTemp).filter(function (x) {\n      return x === \"\";\n    }).length === 0) {\n      console.log(\"OBJECT ENTRIES\");\n      Object.entries(markersDict).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            key = _ref4[0],\n            value = _ref4[1];\n\n        if (Object.keys(value)[0] === markerTemp[\"marker\"] && Object.values(value)[0] === markerTemp[\"mainMarker\"]) {\n          exists = true;\n        }\n      });\n\n      if (exists === true) {\n        alert([markerTemp[\"marker\"]] + \" : \" + markerTemp[\"mainMarker\"] + \" already exists, please change the input\");\n      } else {\n        setMarkersDict(_objectSpread({}, markersDict, _defineProperty({}, markerKeyCounter, _defineProperty({}, markerTemp[\"marker\"], markerTemp[\"mainMarker\"]))));\n      }\n    }\n  };\n\n  function validateMarker(marker) {\n    var inputMarkers = [];\n    console.log(\"INPUMarker\", marker);\n    var regex = /^[a-zA-Z0-9!&|]+$/;\n    var inputError = false;\n\n    if (!marker.match(regex)) {\n      alert(\"Error in input: Only letters, numbers and logical operators (!&|) are accepted.\");\n    } else {\n      console.log(\"VALIDATE\"); //Checks the logical operators the user inputted\n\n      if (marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")) {\n        inputMarkers = marker.split(/[&!|]+/); //Makes a list of the markers\n      } else {\n        //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n        inputMarkers.push(marker);\n      } //Loop that checks the user inputted a marker that that the tiff-images have\n\n\n      for (var elem in inputMarkers) {\n        console.log(elem); //If the marker is in the data returns false otherwise returns inputError true\n\n        if (originalMarkers.includes(inputMarkers[elem])) {\n          inputError = false;\n        } else {\n          inputError = true;\n          break;\n        }\n      }\n    }\n\n    return inputError;\n  } // #################################################################### Settings for segmentation ################################################################################\n  //Function which prepares the dropdown menu\n\n\n  var segmentationInput = function segmentationInput() {\n    setModelDropDown( /*#__PURE__*/React.createElement(\"div\", {\n      class: \"dropbox\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"model\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 13\n      }\n    }, \"Choose stardist model: \"), /*#__PURE__*/React.createElement(\"select\", {\n      name: \"model\",\n      id: \"model\",\n      onChange: function onChange(event) {\n        return handleChangeSelectModel(event);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      selected: \"true\",\n      disabled: \"disabled\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 17\n      }\n    }, \"Select\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"HuNu\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 17\n      }\n    }, \"HuNu_model\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"TH\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 17\n      }\n    }, \"TH_model\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"ChAT\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 17\n      }\n    }, \"ChAT_model\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"LMX\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 17\n      }\n    }, \"LMX_TH_model\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2D_versatile_fluo\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 17\n      }\n    }, \"2D_versatile_fluo\"))));\n  }; //Checks the corresponding default threshold values for the selected model\n\n\n  var handleChangeSelectModel = function handleChangeSelectModel(event) {\n    var selectedModel = event.target.value;\n    setModel(selectedModel);\n\n    if (selectedModel === \"HuNu\") {\n      setProbThreshold(\"0.58\");\n      setOverlapThreshold(\"0.3\");\n    } else if (selectedModel === \"TH\") {\n      setProbThreshold(\"0.5\");\n      setOverlapThreshold(\"0.5\");\n    } else if (selectedModel === \"ChAT\") {\n      setProbThreshold(\"0.4\");\n      setOverlapThreshold(\"0.4\");\n    } else if (selectedModel === \"LMX\") {\n      setProbThreshold(\"0.20\");\n      setOverlapThreshold(\"0.30\");\n    } else if (selectedModel === \"2D_versatile_fluo\") {\n      setProbThreshold(\"0.6\");\n      setOverlapThreshold(\"0.4\");\n    }\n  }; // ################################################################### Metadata for cell identification #####################################################################################\n  //Input for cell type identification\n\n\n  var maskingInput = function maskingInput(markers) {\n    //Initialize drop down menu options for markers\n    options = [/*#__PURE__*/React.createElement(\"option\", {\n      value: \"Select\",\n      selected: \"true\",\n      disabled: \"disabled\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 20\n      }\n    }, \"Select\")]; //First time the page rendered set the input fields\n\n    if (maskingTextBox == 0) {\n      //Set the submitted markers to dropdown menu and to a list, which is later used to validate the input of cell area measuremnts\n      Object.entries(markers).map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            key = _ref6[0],\n            index = _ref6[1];\n\n        submitted_markers.push(Object.keys(markers[key])[0]);\n        options.push( /*#__PURE__*/React.createElement(\"option\", {\n          value: Object.keys(markers[key])[0],\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 30\n          }\n        }, Object.keys(markers[key])[0]));\n      }); //Initialize the id, the id is unique because maskCounter is updated after adding new item\n\n      var mask_id = \"maskInput_\" + maskCounter;\n      var value_id = \"value_\" + maskCounter; //set the options to the variable, which is now a dropdown menu\n\n      setMarkerOptions(options); //set the input fields\n\n      setMaskingTextBox(Object.entries(maskingTextBox + 1).map(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            key = _ref8[0],\n            index = _ref8[1];\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          class: \"row\",\n          id: mask_id,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-1\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 29\n          }\n        }, \"Cell type\"), /*#__PURE__*/React.createElement(\"input\", {\n          name: mask_id,\n          onChange: function onChange(event) {\n            return handleChangeMask(mask_id, event, \"cellType\", \"add\");\n          },\n          size: \"10\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-2\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 29\n          }\n        }, \"Marker\"), /*#__PURE__*/React.createElement(\"select\", {\n          name: mask_id,\n          id: \"colorSelector\",\n          onChange: function onChange(event) {\n            return handleChangeMask(mask_id, event, \"thresholdMarker\", \"add\");\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 29\n          }\n        }, options)), /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-3\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 29\n          }\n        }, \"Threshold value\"), /*#__PURE__*/React.createElement(\"input\", {\n          id: value_id,\n          name: mask_id,\n          onChange: function onChange(event) {\n            return handleChangeMask(mask_id, event, \"thresholdValue\", \"add\");\n          },\n          size: \"10\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-4\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 29\n          }\n        }, \"Color\"), /*#__PURE__*/React.createElement(\"select\", {\n          name: mask_id,\n          id: \"colorSelector\",\n          onChange: function onChange(event) {\n            return handleChangeMask(mask_id, event, \"color\", \"add\");\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"option\", {\n          value: \"Select\",\n          selected: \"true\",\n          disabled: \"disabled\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 33\n          }\n        }, \"Select\"), /*#__PURE__*/React.createElement(\"option\", {\n          value: \"red\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 33\n          }\n        }, \"Red\"), /*#__PURE__*/React.createElement(\"option\", {\n          value: \"blue\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 33\n          }\n        }, \"Blue\"), /*#__PURE__*/React.createElement(\"option\", {\n          value: \"yellow\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 33\n          }\n        }, \"Yellow\"), /*#__PURE__*/React.createElement(\"option\", {\n          value: \"green\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 33\n          }\n        }, \"Green\"), /*#__PURE__*/React.createElement(\"option\", {\n          value: \"purple\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 616,\n            columnNumber: 33\n          }\n        }, \"Purple\"), /*#__PURE__*/React.createElement(\"option\", {\n          value: \"orange\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 33\n          }\n        }, \"Orange\"))));\n      }));\n    }\n  }; //add new cell type\n\n\n  var addMasks = function addMasks(event) {\n    //Validates the input of previously added cell type\n    //Chekcs that all values are filled\n    if (maskTemp[\"thresholdMarker\"] == \"\" || maskTemp[\"cellType\"] == \"\" || maskTemp[\"thresholdValue\"] == null || maskTemp[\"color\"] == \"\") {\n      alert(\"Fill all the fields before adding new cell type\");\n    } //Checj that threshold value is NA or between 0-1\n    else if (maskTemp[\"thresholdValue\"] != \"NA\" && isNaN(maskTemp[\"thresholdValue\"]) == true || isNaN(maskTemp[\"thresholdValue\"]) == false && maskTemp[\"thresholdValue\"] < 0 || maskTemp[\"thresholdValue\"] > 1) {\n      alert(\"Only values between 0-1 or NA are accepted in threshold value textbox\");\n    } else {\n      //If no error in previous output add new input  fields\n      setNewMask(false);\n      var name = \"maskInput_\" + maskCounter; //disable the previously added cell type, so that user can't edit it\n\n      document.getElementsByName(name).forEach(function (e) {\n        e.disabled = true;\n      }); //Update the counter and ID\n\n      var count = maskCounter + 1;\n      var mask_id = \"maskInput_\" + count;\n      var value_id = \"value_\" + count;\n      setMaskCounter(count); //Create new inputfields\n\n      setMaskingTextBox([].concat(_toConsumableArray(maskingTextBox), [/*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        id: mask_id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-1\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 21\n        }\n      }, \"Cell type\"), /*#__PURE__*/React.createElement(\"input\", {\n        name: mask_id,\n        onChange: function onChange(event) {\n          return handleChangeMask(mask_id, event, \"cellType\", \"add\");\n        },\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-2\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 17\n        }\n      }, \"Marker\"), /*#__PURE__*/React.createElement(\"select\", {\n        name: mask_id,\n        id: \"colorSelector\",\n        onChange: function onChange(event) {\n          return handleChangeMask(mask_id, event, \"thresholdMarker\", \"add\");\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 21\n        }\n      }, markerOptions)), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-3\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 668,\n          columnNumber: 21\n        }\n      }, \"Threshold value\"), /*#__PURE__*/React.createElement(\"input\", {\n        id: value_id,\n        name: mask_id,\n        disabled: Object.keys(maskDict).includes(maskKeyCounter - 1),\n        onBlur: function onBlur(event) {\n          return handleChangeMask(mask_id, event, \"thresholdValue\", \"add\");\n        },\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-4\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 21\n        }\n      }, \"Color\"), /*#__PURE__*/React.createElement(\"select\", {\n        name: mask_id,\n        disabled: Object.keys(maskDict).includes(maskKeyCounter - 1),\n        id: \"colorSelector\",\n        onChange: function onChange(event) {\n          return handleChangeMask(mask_id, event, \"color\", \"add\");\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 674,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"Select\",\n        selected: \"true\",\n        disabled: \"disabled\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 37\n        }\n      }, \"Select\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"red\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 37\n        }\n      }, \"Red\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"blue\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 37\n        }\n      }, \"Blue\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"yellow\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 37\n        }\n      }, \"Yellow\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"green\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 37\n        }\n      }, \"Green\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"purple\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 37\n        }\n      }, \"Purple\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"orange\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 37\n        }\n      }, \"Orange\"))))])); //Empty the temp variable\n\n      maskTemp = {\n        cellType: \"\",\n        thresholdMarker: \"\",\n        thresholdValue: null,\n        color: \"\"\n      };\n    }\n  }; //Handels changes in the input fields\n\n\n  var handleChangeMask = function handleChangeMask(id, event, input, call) {\n    setMaskKeyCounter(maskKeyCounter + 1); //Checks from which component the function was called and stores the input to dictionary to the object\n\n    if (input === \"cellType\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        cellType: event.target.value\n      });\n    } else if (input === \"thresholdMarker\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        thresholdMarker: event.target.value\n      });\n    } else if (input === \"thresholdValue\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        thresholdValue: event.target.value\n      });\n    } else if (input === \"color\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        color: event.target.value\n      });\n    }\n\n    if (Object.values(maskTemp).filter(function (x) {\n      return x === \"\";\n    }).length === 1) {\n      //counts the number of empty values\n      setNewMask(true);\n    } //After the temp dictionary is filled store the properties to the main dictionary\n\n\n    if (call == \"add\") {\n      if (Object.values(maskTemp).filter(function (x) {\n        return x === \"\";\n      }).length === 0) {\n        setMaskDict(_objectSpread({}, maskDict, _defineProperty({}, maskKeyCounter, [{\n          cell_type: maskTemp[\"cellType\"]\n        }, {\n          threshold_marker: maskTemp[\"thresholdMarker\"]\n        }, {\n          threshold_value: maskTemp[\"thresholdValue\"]\n        }, {\n          color: maskTemp[\"color\"]\n        }])));\n      }\n    } //If the call came from reset we don't want to use the spread operator beacuse now we are updating to an empty array\n    else if (call == \"reset\") {\n      if (Object.values(maskTemp).filter(function (x) {\n        return x === \"\";\n      }).length === 0) {\n        setMaskDict(_defineProperty({}, maskKeyCounter, [{\n          cell_type: maskTemp[\"cellType\"]\n        }, {\n          threshold_marker: maskTemp[\"thresholdMarker\"]\n        }, {\n          threshold_value: maskTemp[\"thresholdValue\"]\n        }, {\n          color: maskTemp[\"color\"]\n        }]));\n      }\n    }\n  }; //Resets the cell type identification form and empties the temp directory\n\n\n  var resetMask = function resetMask() {\n    maskTemp = {\n      cellType: \"\",\n      thresholdMarker: \"\",\n      thresholdValue: null,\n      color: \"\"\n    };\n    var name = \"maskInput_\" + 0; //Removes the disabled property\n\n    document.getElementsByName(name).forEach(function (e) {\n      console.log(e);\n      e.disabled = false;\n      e.value = \"\";\n    }); //reinitialize the values\n\n    setMaskDict([{}]);\n    setMaskCounter(0);\n    var mask_id = \"maskInput_0\";\n    var value_id = \"value_0\"; //Set new input fields after resetting the form\n\n    setMaskingTextBox([/*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      id: mask_id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749,\n        columnNumber: 25\n      }\n    }, \"Cell type\"), /*#__PURE__*/React.createElement(\"input\", {\n      name: mask_id,\n      onChange: function onChange(event) {\n        return handleChangeMask(mask_id, event, \"cellType\", \"reset\");\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 752,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 25\n      }\n    }, \"Marker\"), /*#__PURE__*/React.createElement(\"select\", {\n      name: mask_id,\n      id: \"colorSelector\",\n      onChange: function onChange(event) {\n        return handleChangeMask(mask_id, event, \"thresholdMarker\", \"reset\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 25\n      }\n    }, options)), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759,\n        columnNumber: 25\n      }\n    }, \"Threshold value\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: value_id,\n      name: mask_id,\n      onChange: function onChange(event) {\n        return handleChangeMask(mask_id, event, \"thresholdValue\", \"reset\");\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-4\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763,\n        columnNumber: 25\n      }\n    }, \"Color\"), /*#__PURE__*/React.createElement(\"select\", {\n      name: mask_id,\n      id: \"colorSelector\",\n      onChange: function onChange(event) {\n        return handleChangeMask(mask_id, event, \"color\", \"reset\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Select\",\n      selected: \"true\",\n      disabled: \"disabled\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765,\n        columnNumber: 29\n      }\n    }, \"Select\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"red\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766,\n        columnNumber: 29\n      }\n    }, \"Red\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"blue\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 767,\n        columnNumber: 29\n      }\n    }, \"Blue\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"yellow\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 768,\n        columnNumber: 29\n      }\n    }, \"Yellow\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"green\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769,\n        columnNumber: 29\n      }\n    }, \"Green\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"purple\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770,\n        columnNumber: 29\n      }\n    }, \"Purple\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"orange\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771,\n        columnNumber: 29\n      }\n    }, \"Orange\"))))]);\n  }; //#################################################################### Input for cell intensity measurements ######################################################################################\n  //set the input field for intensity measurements\n\n\n  var intensityInput = function intensityInput() {\n    setIntensityTb( /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      for: \"intensity\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789,\n        columnNumber: 13\n      }\n    }, \"Cell type: \"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"intensity\",\n      size: \"10\",\n      onChange: function onChange(event) {\n        return handleChangeIntensity(event);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 790,\n        columnNumber: 13\n      }\n    })));\n  }; //Handles change in intensity input field\n\n\n  var handleChangeIntensity = function handleChangeIntensity(event) {\n    setIntensityCellType(event.target.value);\n    console.log(event.target.value);\n  }; //######################################################################## Input for cell area measurements ###########################################################################\n  //Prepares the input field for cell area measurements\n\n\n  var cellAreaInput = function cellAreaInput() {\n    var area_id = \"cellAreaInput_\" + cellAreaCounter;\n\n    if (Object.keys(cellAreaTb).length === 0) {\n      setCellAreaTb([].concat(_toConsumableArray(cellAreaTb), [/*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 804,\n          columnNumber: 42\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 805,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        for: area_id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 806,\n          columnNumber: 17\n        }\n      }, \"Cell type(s) to measure: \"), /*#__PURE__*/React.createElement(\"input\", {\n        id: area_id,\n        size: \"15\",\n        onChange: function onChange(event) {\n          return handleChangeCellArea(event, \"add\");\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 17\n        }\n      }))]));\n    }\n  }; //Handles change in cell area measurement input field\n\n\n  var handleChangeCellArea = function handleChangeCellArea(event, call) {\n    if (!cellAreaList.includes(event.target.value) & call != \"reset\") {\n      setCellAreaList([].concat(_toConsumableArray(cellAreaList), [event.target.value]));\n    } else if (call == \"reset\") {\n      setCellAreaList([event.target.value]);\n    }\n  }; //reset the textboxes of cell area measurement\n\n\n  var resetCellArea = function resetCellArea() {\n    //Empties the input field and removes the diabled property\n    document.getElementById(\"cellAreaInput_0\").value = \"\";\n    document.getElementById(\"cellAreaInput_0\").removeAttribute(\"disabled\"); //Updates statevariables\n\n    setCellAreaList([]);\n    setCellAreaCounter(0); //Add new cell area measuement inputfields\n\n    setCellAreaTb([/*#__PURE__*/React.createElement(\"div\", {\n      id: \"firstArea\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 836,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 837,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      for: \"cellAreaInput_0\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838,\n        columnNumber: 13\n      }\n    }, \"Cell type(s) to measure: \"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"cellAreaInput_0\",\n      size: \"15\",\n      onChange: function onChange(event) {\n        return handleChangeCellArea(event, \"reset\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 839,\n        columnNumber: 13\n      }\n    }))]);\n  }; //Add more cell area measurement inputfields\n\n\n  var addCells = function addCells(event) {\n    //disable the previous input\n    document.getElementById(\"cellAreaInput_\" + cellAreaCounter).setAttribute(\"disabled\", \"disabled\"); //Update variables\n\n    var counter = cellAreaCounter + 1;\n    var area_id = \"cellAreaInput_\" + counter;\n    setCellAreaCounter(counter); //Create html element\n\n    setCellAreaTb([].concat(_toConsumableArray(cellAreaTb), [/*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 856,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"cellArea\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 857,\n        columnNumber: 21\n      }\n    }, \"Cell type(s) to measure: \"), /*#__PURE__*/React.createElement(\"input\", {\n      id: area_id,\n      size: \"15\",\n      onChange: function onChange(event) {\n        return handleChangeCellArea(event, \"add\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 858,\n        columnNumber: 21\n      }\n    }))]));\n  }; //Show instructions to the user\n\n\n  var showInstructions = function showInstructions(arg1, arg2, arg3) {\n    document.getElementById(arg1).style.display = \"block\";\n    document.getElementById(arg2).style.display = \"none\";\n    document.getElementById(arg3).style.display = \"block\";\n  }; //Hide instructions\n\n\n  var hideInstructions = function hideInstructions(arg1, arg2, arg3) {\n    document.getElementById(arg1).style.display = \"none\";\n    document.getElementById(arg2).style.display = \"block\";\n    document.getElementById(arg3).style.display = \"none\";\n  }; //############################################################################# HTML form to be rendered ###############################################################################################\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 885,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    class: \"metadataForm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 886,\n      columnNumber: 13\n    }\n  }, renderArea ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 889,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 890,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 891,\n      columnNumber: 25\n    }\n  }, \"Measurement of positive-marker areas\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 892,\n      columnNumber: 26\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 894,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 895,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 896,\n      columnNumber: 37\n    }\n  }, \"Marker\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 898,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 899,\n      columnNumber: 37\n    }\n  }, \"Main marker\"))), markerTextBox, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addMarkers,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 903,\n      columnNumber: 25\n    }\n  }, \"Add markers\"))) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 908,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 909,\n      columnNumber: 17\n    }\n  }), renderSegmentation ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 912,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 913,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 914,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 915,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 916,\n      columnNumber: 33\n    }\n  }, \"Cell segmentation\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 918,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"infoBtnSegment\",\n    class: \"btn-instructions2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 919,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return showInstructions(\"instructionsSegment\", \"infoBtnSegment\", \"hideInfoBtnSegment\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 920,\n      columnNumber: 37\n    }\n  }, \"Info\")), /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"hideInfoBtnSegment\",\n    class: \"btn-instructions2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 922,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return hideInstructions(\"instructionsSegment\", \"infoBtnSegment\", \"hideInfoBtnSegment\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 923,\n      columnNumber: 37\n    }\n  }, \"Hide info\")))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 927,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 929,\n      columnNumber: 21\n    }\n  }, modelDropDown), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 932,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 933,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 934,\n      columnNumber: 29\n    }\n  }, \"Probability threshold\"), /*#__PURE__*/React.createElement(\"input\", {\n    value: probTreshold,\n    onChange: function onChange(e) {\n      return setProbThreshold(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 935,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 937,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 938,\n      columnNumber: 29\n    }\n  }, \"Overlap threshold\"), /*#__PURE__*/React.createElement(\"input\", {\n    value: overlapThreshold,\n    onChange: function onChange(e) {\n      return setOverlapThreshold(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 939,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"instructionsSegment\",\n    class: \"textarea-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 942,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    disabled: true,\n    readonly: true,\n    rows: \"20\",\n    cols: \"50\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 943,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 944,\n      columnNumber: 29\n    }\n  }, \"Instructions:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 944,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 944,\n      columnNumber: 54\n    }\n  })), /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 945,\n      columnNumber: 29\n    }\n  }, \"Choose StarDist model: \"), \"Model to be used in cell segmentation.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 945,\n      columnNumber: 97\n    }\n  }), /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 946,\n      columnNumber: 29\n    }\n  }, \"Probability threshold: \"), \"Higher values leads to fewer segmented objects, but will likely avoid false positives.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 946,\n      columnNumber: 145\n    }\n  }), /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 947,\n      columnNumber: 29\n    }\n  }, \"Overlap threshold: \"), \"Higher values allow segmented objects to overlap substantially.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 947,\n      columnNumber: 118\n    }\n  }))))) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 957,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 958,\n      columnNumber: 17\n    }\n  }), renderMasking ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 961,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 962,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 963,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 964,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 965,\n      columnNumber: 33\n    }\n  }, \"Cell type identification\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 967,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"infoBtnIdentification\",\n    class: \"btn-instructions2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 968,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return showInstructions(\"instructionsIdentification\", \"infoBtnIdentification\", \"hideInfoBtnIdentification\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 969,\n      columnNumber: 37\n    }\n  }, \"Info\")), /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"hideInfoBtnIdentification\",\n    class: \"btn-instructions2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 971,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return hideInstructions(\"instructionsIdentification\", \"infoBtnIdentification\", \"hideInfoBtnIdentification\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 972,\n      columnNumber: 37\n    }\n  }, \"Hide info\")))), maskingTextBox, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addMasks,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 978,\n      columnNumber: 25\n    }\n  }, \"New cell type\"), \"\\xA0\\xA0\\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return resetMask();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 979,\n      columnNumber: 25\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"instructionsIdentification\",\n    class: \"textarea-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 981,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    disabled: true,\n    readonly: true,\n    rows: \"20\",\n    cols: \"50\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 982,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 983,\n      columnNumber: 33\n    }\n  }, \"Instructions: \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 983,\n      columnNumber: 50\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 983,\n      columnNumber: 59\n    }\n  })), /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 984,\n      columnNumber: 33\n    }\n  }, \"Cell type: \"), \"Name of cell type.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 984,\n      columnNumber: 69\n    }\n  }), /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 985,\n      columnNumber: 33\n    }\n  }, \"Marker: \"), \"Marker corresponding the cell type. Should correspond a label column in submit samples page.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 985,\n      columnNumber: 140\n    }\n  }), /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 986,\n      columnNumber: 33\n    }\n  }, \"Threshold value: \"), \"1 - fraction of area overlap between the segmented object and the thresholded image. Object is classified as a cell, if it overlaps the mask by fraction higher than threshold marker. Higher threshold value leads to more objects classified as cells. Values between 0-1 or NA to classify all segmented objects to cells.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 986,\n      columnNumber: 374\n    }\n  }), /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 987,\n      columnNumber: 33\n    }\n  }, \"Color: \"), \"Color used to represent this cell type\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 987,\n      columnNumber: 85\n    }\n  }))))) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 999,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1000,\n      columnNumber: 17\n    }\n  }), renderIntensity ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1003,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1004,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1005,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1006,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1007,\n      columnNumber: 34\n    }\n  }, \"Pixel intensity measurement between groups\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1009,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"infoBtnIntensity\",\n    class: \"btn-instructions2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1010,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return showInstructions(\"instructionsIntensity\", \"infoBtnIntensity\", \"hideInfoBtnIntensity\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1011,\n      columnNumber: 37\n    }\n  }, \"Info\")), /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"hideInfoBtnIntensity\",\n    class: \"btn-instructions2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1013,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return hideInstructions(\"instructionsIntensity\", \"infoBtnIntensity\", \"hideInfoBtnIntensity\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1014,\n      columnNumber: 37\n    }\n  }, \"Hide info\")))), intensityTb, /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"instructionsIntensity\",\n    class: \"textarea-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1020,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    disabled: true,\n    readonly: true,\n    rows: \"20\",\n    cols: \"50\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1021,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1022,\n      columnNumber: 33\n    }\n  }, \"Instructions:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1022,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1022,\n      columnNumber: 58\n    }\n  })), /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1023,\n      columnNumber: 33\n    }\n  }, \"Cell type: \"), \"Name of cell type to perform the intensity analysis, should match one of the cell types in cell type identification.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1023,\n      columnNumber: 167\n    }\n  }))))) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1034,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1035,\n      columnNumber: 17\n    }\n  }), renderCellArea ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1038,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1039,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1040,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1041,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1042,\n      columnNumber: 33\n    }\n  }, \"Cell area measurements\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1044,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"infoBtnCellArea\",\n    class: \"btn-instructions2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1045,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return showInstructions(\"instructionsCellArea\", \"infoBtnCellArea\", \"hideInfoBtnCellArea\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1046,\n      columnNumber: 37\n    }\n  }, \"Info\")), /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"hideInfoBtnCellArea\",\n    class: \"btn-instructions2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1048,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return hideInstructions(\"instructionsCellArea\", \"infoBtnCellArea\", \"hideInfoBtnCellArea\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1049,\n      columnNumber: 37\n    }\n  }, \"Hide info\")))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1053,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1054,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    for: \"fraction\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1055,\n      columnNumber: 29\n    }\n  }, \"Co-expression fraction: \"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"fraction\",\n    size: \"6\",\n    onChange: function onChange(event) {\n      return setExpressionFraction(event.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1056,\n      columnNumber: 29\n    }\n  })), cellAreaTb, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addCells,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1061,\n      columnNumber: 25\n    }\n  }, \"Add new\"), \"\\xA0\\xA0\\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return resetCellArea();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1062,\n      columnNumber: 25\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1063,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"instructionsCellArea\",\n    class: \"textarea-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1065,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    disabled: true,\n    readonly: true,\n    rows: \"20\",\n    cols: \"50\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1066,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1067,\n      columnNumber: 33\n    }\n  }, \"Instructions:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1067,\n      columnNumber: 49\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1067,\n      columnNumber: 58\n    }\n  })), /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1068,\n      columnNumber: 33\n    }\n  }, \"Co-expression fraction: \"), \"Value between 0-1. Describes the overlap threshold between two cells to be classified as co-expression. This need's to be specified even if you don't measure for douple positive cells.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1068,\n      columnNumber: 248\n    }\n  }), /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1069,\n      columnNumber: 33\n    }\n  }, \"Cell type(s) to measure: \"), \" Cell type(s) used to compute the area positve for cell type. To measure douple cells separate the different cell types with \\\"/\\\" (cell1/cell2), i.e cell1 which are also cell2. Cells should match the cell types listed above in cell type identification form.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1069,\n      columnNumber: 321\n    }\n  }))))) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1079,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1080,\n      columnNumber: 13\n    }\n  })));\n});\nexport default GetMetadata;","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","useRef","axios","options","maskTemp","cellType","thresholdMarker","thresholdValue","color","submitted_markers","GetMetadata","props","ref","renderArea","setRenderArea","renderSegmentation","setRenderSegmentation","renderMasking","setRenderMasking","renderIntensity","setRenderIntensity","renderCellArea","setRenderCellArea","intensityTb","setIntensityTb","allMarkers","setAllMarkes","markersDict","setMarkersDict","counter","setCounter","markerKeyCounter","setMarkerKeyCounter","markerTemp","marker","mainMarker","maskCounter","setMaskCounter","maskKeyCounter","setMaskKeyCounter","cellAreaCounter","setCellAreaCounter","newMask","setNewMask","inputFields","analysisReady","setAnalysisReady","markerOptions","setMarkerOptions","originalMarkers","setOriginalMarkers","markerTextBox","setMarkerTextBox","modelDropDown","setModelDropDown","model","setModel","segmentationSettings","setSegmentationSettings","probTreshold","setProbThreshold","overlapThreshold","setOverlapThreshold","maskingTextBox","setMaskingTextBox","maskDict","setMaskDict","errorMessageArea","setErrorMessageArea","intensityCellType","setIntensityCellType","cellAreaTb","setCellAreaTb","cellAreaList","setCellAreaList","expressionFraction","setExpressionFraction","getProcesses","getData","url","method","response","data","console","log","then","prop","hasOwnProperty","instrument","alert","execute_sd_segmentation","execute_cell_type_identification","execute_intensity","execute_measure_cell_areas","execute_cell_clustering","execute_cell_thresholding","execute_homotypic_interactions","execute_heterotypic_interactions","execute_permuted_interactions","document","getElementById","style","display","execute_area","markers","allMarkersChecked","segmentationInput","maskingInput","intensityInput","cellAreaInput","submitMetadata","error","temp_list_markers","i","Object","values","length","push","isNaN","every","item","includes","boolIntensity","temp_list_comparison","temp_list_types","boolCellArea","cells","split","concat","r","segmentingDict","post","url2","innerHTML","color_elem","count","keys","entries","map","key","index","obj","id","removeMarker","addMarkers","event","toString","name","getElementsByName","forEach","e","disabled","handleChangeMarker","getAttribute","remove","input","inputError","validateMarker","target","value","exists","filter","x","inputMarkers","regex","match","elem","handleChangeSelectModel","selectedModel","mask_id","value_id","handleChangeMask","addMasks","call","cell_type","threshold_marker","threshold_value","resetMask","handleChangeIntensity","area_id","handleChangeCellArea","resetCellArea","removeAttribute","addCells","setAttribute","showInstructions","arg1","arg2","arg3","hideInstructions"],"sources":["/home/ernohanninen/simpli_project/App/src/getMetadata.js"],"sourcesContent":["/*\nTitle: getMetadata.js\nDate: 2021-09-03\nAuthor: Erno Hänninen\nDescription:\n  - In this page the settings regarding the selected processes are inputted\n  - Collecting and validating input\n  \n\nProcedure:\n - Display the settings forms for selected processes\n - Collect the data\n - Validate the input\n - Run the pipeline\n\n\n*/\n\n//Import libraries and css file\nimport React,  { useState, forwardRef, useImperativeHandle, useRef } from 'react';\nimport axios from \"axios\";\nimport './App.css';\n\n\n//Check that the colors for cell_masking_metadata are okay\n\n\n//Global variables\nvar options = []\nvar maskTemp = ({cellType:\"\", thresholdMarker:\"\", thresholdValue:null, color:\"\"})\nvar submitted_markers = []\n\n//Function which is called from APP.js script\nconst GetMetadata = forwardRef((props, ref)=>{\n\n    //State variables\n    const [renderArea, setRenderArea] = useState(false)\n    const [renderSegmentation, setRenderSegmentation] = useState(false)\n    const [renderMasking, setRenderMasking] = useState(false)\n    const [renderIntensity, setRenderIntensity] = useState(false)\n    const [renderCellArea, setRenderCellArea] = useState(false)\n    const [intensityTb, setIntensityTb] = useState(\"\")\n    const [allMarkers, setAllMarkes]  = useState(false)\n    const [markersDict, setMarkersDict] = useState([{}])\n    const [counter, setCounter] = useState(0)\n    const [markerKeyCounter, setMarkerKeyCounter] = useState(0)\n    let markerTemp = ({marker:\"\", mainMarker:\"\"})\n    const [maskCounter, setMaskCounter] = useState(0)\n    const [maskKeyCounter, setMaskKeyCounter] = useState(0)\n    const [cellAreaCounter, setCellAreaCounter] = useState(0)\n    const [newMask, setNewMask] = useState(false)\n    let inputFields = []\n    const [analysisReady, setAnalysisReady] = useState(\"\")\n    const[markerOptions, setMarkerOptions] = useState(\"\")\n    const [originalMarkers, setOriginalMarkers] = useState([]) //This list keeps in track about the markers that the user inputted\n    const [markerTextBox, setMarkerTextBox] = useState(\"\")\n    const [modelDropDown, setModelDropDown] = useState(\"\")\n    const [model, setModel] = useState(\"\")\n    const [segmentationSettings, setSegmentationSettings] = useState(\"\")\n    const [probTreshold, setProbThreshold] = useState(\"\")\n    const [overlapThreshold, setOverlapThreshold] = useState(\"\")\n    const [maskingTextBox, setMaskingTextBox] = useState(\"\")\n    const [maskDict, setMaskDict] = useState([{}])\n    const [errorMessageArea, setErrorMessageArea] = useState(\"\")\n    const [intensityCellType, setIntensityCellType] = useState(\"\")\n    const [cellAreaTb, setCellAreaTb] = useState([])\n    const [cellAreaList, setCellAreaList] = useState([])\n    const [expressionFraction, setExpressionFraction] = useState(\"\")\n\n\n    useImperativeHandle(ref, ()=>({\n        //THis axios call is used to get the processes to run\n        getProcesses(){\n            async function getData(){\n                try {\n                    let response = await axios({\n                        url: \"/getSettings\",\n                        method: \"get\"\n                    })\n\n                    return response.data\n                }\n                catch(err){\n                    console.log(err)\n                }\n            }\n           \n            getData()\n            //If no error parse the response\n            .then(function(response){\n                //Parse values from response data to boolean format\n                for (let prop in response[0]) {\n                    if (response[0].hasOwnProperty(prop)) {\n                        //Converts the objects properties from string to boolean values\n                        response[0][prop] = (response[0][prop] == 'true' || response[0][prop] == 'false')? response[0][prop] === 'true': response[0][prop] ;\n                    }\n                } \n\n                //Before rendering any process settings forms, the settings inputted on sample page are validated\n                //Check that the source of images is selected\n                if(response[0].instrument == \"\"){\n                    alert(\"Select source of images\")\n                }\n                //Check that all the processes which are dependent on each other is checked\n                //Alert user if some of the required processes is not checked\n                else if(response[0].execute_sd_segmentation == false || response[0].execute_cell_type_identification == false){\n                    alert(\"To run the analysis, check atleast image segmentation and cell type identification\")\n\n                }\n                else if((response[0].execute_sd_segmentation == false || response[0].execute_cell_type_identification == false) && (response[0].execute_intensity == true || response[0].execute_measure_cell_areas == true)){\n                    alert(\"To run cell-based analysis, check image segmentation and cell type identification\")\n                }\n                else if(response[0].execute_cell_clustering == false && response[0].execute_cell_thresholding == true || response[0].execute_homotypic_interactions == true || response[0].execute_heterotypic_interactions == true || response[0].execute_permuted_interactions == true){\n                    alert(\"To run cell clustering, check cell type identification\")\n                }\n                else if(response[0].execute_cell_thresholding == false && response[0].execute_homotypic_interactions == true || response[0].execute_heterotypic_interactions == true || response[0].execute_permuted_interactions == true){\n                    alert(\"To run cell thresholding, check cell clustering\")\n                }\n                else if(response[0].execute_cell_thresholding == false && response[0].execute_homotypic_interactions == true){\n                    alert(\"To run homotypic interactions, check cell thresholding\")\n                }\n                else if(response[0].execute_cell_thresholding == false && response[0].execute_heterotypic_interactions == true){\n                    alert(\"To run heterotypic interactions, check cell thresholding\")\n                }\n                else if(response[0].execute_cell_thresholding == false && response[0].execute_permuted_interactions == true){\n                    alert(\"To run permuted interactions, check cell thresholding\")\n                }\n                //If the processes were correct display the getMetadata page and hide the getSettings page\n                else{\n                    document.getElementById(\"settingsPage\").style.display= \"none\";\n                    document.getElementById(\"nextButton2\").style.display = \"none\";\n                    document.getElementById(\"returnButton\").style.display = \"none\"\n                    document.getElementById(\"returnButton2\").style.display = \"block\"\n                    document.getElementById(\"nextButton3\").style.display = \"block\"\n                    document.getElementById(\"metadataPage\").style.display = \"block\"\n\n                    //These if statements contols which input fields are rendered. This depdends of the processes to run\n                    //Calls the function to prepare the forms with default values\n\n                    if(response[0].execute_area == true){ \n                        setRenderArea(true)\n                        setMarkerTextBox(\"\")\n                        let markers = response[1] //dictionary of markers\n                        allMarkersChecked(markers)\n                        setOriginalMarkers(response[2])\n                        \n                    }\n                    else if(response[0].execute_area == false)setRenderArea(false)\n                    \n                    //If segmentation is executed, display elements and call function\n                    if(response[0].execute_sd_segmentation == true){\n                        setRenderSegmentation(true)\n                        segmentationInput()\n                    }\n                    else if(response[0].execute_sd_segmentation == false)setRenderSegmentation(false)\n                    //If cell type identification is executed, display elements and call function\n                    if(response[0].execute_cell_type_identification == true){\n                        let markers = response[1]\n                        setRenderMasking(true)\n                        maskingInput(markers)\n                    }\n                    //if cell type identification is not executed, hide elements\n                    else if(response[0].execute_cell_type_identification == false){\n                        setRenderMasking(false)\n                        setMaskingTextBox(\"\")\n    \n                    }\n                    //If cell type pixel intensity measuremnts is executed, display elements and call function\n                    if(response[0].execute_intensity == true){\n                        setRenderIntensity(true)\n                        intensityInput()\n                    }\n                    //if pixel analysis is not executed, hide elements\n                    else if(response[0].execute_intensity == false)setRenderIntensity(false)\n\n                    //If cell area measuremnts is executed, display elements and call function\n                    if(response[0].execute_measure_cell_areas == true){\n                        setRenderCellArea(true)\n                        cellAreaInput()\n                    }\n                    //Hide elements\n                    else if(response[0].execute_measure_cell_areas == false)setRenderCellArea(false)\n\n                    if(response[0].execute_cell_clustering == true){\n                        console.log(\"RENDER SOMETHING\")\n                    }\n                    if(response[0].execute_cell_thresholding == true){\n                        console.log(\"RENDER SOMETHING\")\n                    }\n                    if(response[0].execute_homotypic_interactions == true){\n                        console.log(\"RENDER SOMETHING\")\n                    }\n                    if(response[0].execute_heterotypic_interactions == true){\n                        console.log(\"RENDER SOMETHING\")\n                    }\n                    if(response[0].execute_permuted_interactions == true){\n                        console.log(\"RENDER SOMETHING\")\n                    }\n                }\n\n            })\n        },\n\n        //Function which makes a request call to the backend to submit the settings\n        submitMetadata(){\n            let error = false\n            var temp_list_markers = []\n\n            //Reads the markers which the user wants to use to identify the corresponding cells\n            if(maskTemp[\"thresholdMarker\"] != \"\"){\n                for(let i = 0;i < Object.values(maskDict).length; i++){\n                    temp_list_markers.push(Object.values(Object.values(maskDict)[i])[1][\"threshold_marker\"])\n                }\n            }\n            //Checks that the segmentation form is correctly filled\n            if(renderSegmentation == true && model ==\"\" || probTreshold == \"\" || overlapThreshold == \"\" || isNaN(probTreshold) != false || isNaN(overlapThreshold) != false || probTreshold < 0 || probTreshold > 1 || overlapThreshold < 0 || overlapThreshold > 1){\n                alert(\"Error in model or thresholds in cell segmentation settings. Probability and overlap threshold should have value between 0-1\")\n                error = true\n            }   \n            //Check if cell type identification fields are empty\n            else if(renderMasking == true && maskTemp[\"thresholdMarker\"] == \"\" || maskTemp[\"cellType\"] == \"\" || maskTemp[\"thresholdValue\"] == null || maskTemp[\"color\"]==\"\"){\n                alert(\"Fill all the fields in cell type identification before proceeding\")\n                error = true\n            }\n            //Checks that the threshold value field has accepted value\n            else if((maskTemp[\"thresholdValue\"] != \"NA\" && isNaN(maskTemp[\"thresholdValue\"]) == true) || (isNaN(maskTemp[\"thresholdValue\"]) == false && maskTemp[\"thresholdValue\"] < 0 || maskTemp[\"thresholdValue\"] > 1)){\n                alert(\"Only values between 0-1 or NA are accepted in threshold value textbox\")\n                error = true\n            }\n            //Checks that all the markers submitted in submit sample page are identified, by checking the length of these lists\n            else if(temp_list_markers.length != submitted_markers.length){\n                alert(\"All the submitted markers on submit sample page should be identified\")\n                error = true\n            }\n            //Checks the same thing as above but by checking that all the items match\n            else if(submitted_markers.every((item)=>temp_list_markers.includes(item))==false){\n                alert(\"All the submitted markers on submit sample page should be identified\")\n                error = true\n            }\n            //Checks that the cell type in intensity form matches one of the cell types in the identification process\n            else if(renderIntensity == true){\n                let boolIntensity = false\n                //Checks that the cell type in input field corresponds one of the cell types\n                for(let i = 0;i < Object.values(maskDict).length; i++){\n                    if(Object.values(Object.values(maskDict)[i])[0][\"cell_type\"] == intensityCellType){\n                        boolIntensity = true\n                    }\n                }\n                //Displays the error message\n                if(boolIntensity == false){\n                    error = true\n                    alert(\"Cell type in pixel intensity form should match one of the cell types in cell type identification\")\n                }      \n            }\n            //Checks that the co expression value is between 0-1\n            if(renderCellArea == true && error==false){\n                if(isNaN(expressionFraction)!=false || expressionFraction==\"\" || expressionFraction < 0 || expressionFraction > 1){\n                    error = true\n                    alert(\"Co-expression factor should set between 0-1\")\n                }//If the value is okay, next check that the input are cells identified in cell identification process\n                if(error == false){\n                    var temp_list_comparison = []\n                    let temp_list_types = []\n                    let boolCellArea = true\n                    // loops over the cell area measurements input field\n                    for(let i = 0; i < cellAreaList.length; i++){\n                        if(cellAreaList[i].includes(\"/\")){ //If \"/\" we are looking for co-expressing cells -> cellAreaList contains more than 1 cell type\n                            let cells = cellAreaList[i].split(\"/\") //Splitting the different cell types to a list\n                            temp_list_comparison = temp_list_comparison.concat(cells) //Concatenate the cells array to the temp arrray\n                        }\n                        else{\n                            temp_list_comparison.push(cellAreaList[i]) // if no \"/\" -> only one cell type -> push it directly to the temp list\n                        }\n                    }\n                    //Get the cell types identified in cell type identification\n                    for(let i = 0;i < Object.values(maskDict).length; i++){\n                        temp_list_types.push(Object.values(Object.values(maskDict)[i])[0][\"cell_type\"])\n                    }\n                    //If the cell area measurements has input which is not identified in cell type identification error is raisen\n                    if(!temp_list_comparison.every(r => temp_list_types.includes(r))){\n                        boolCellArea = false\n                    }\n                    if(boolCellArea == false){\n                        error = true\n                        alert(\"Some cell type(s) in cell area measurement form doesn't match the cell types in cell type identification\")\n                    }\n                }\n            }\n            console.log(error)\n            if(error == false) { //If no error in the input submit the data to backend\n\n                //store the parameters for segmentation to dictionary\n                let segmentingDict = {\"model\" : model, \"probThreshold\": probTreshold, \"overlapThreshold\": overlapThreshold}\n\n                const url = '/submitMetadata'; //url for the request\n                //send data to backend \n                axios.post(url, { \n                    //Collect the data to the post request\n                    \"markers\": markersDict,\n                    \"segmentingSettings\" : segmentingDict,\n                    \"masks\": maskDict,\n                    \"intensityCellType\" : intensityCellType,\n                    \"fraction\" : expressionFraction,\n                    \"cellAreaList\" : cellAreaList\n                    })\n                    //Handle the response from backend\n                    .then((response) =>{\n                        if(response.data==\"error\"){ //If error\n                            console.log(\"########ERROR########\")\n                        }\n                        else{ //IF everyting okay\n                            console.log(\"READY\")\n                        }\n                });   \n                document.getElementById(\"metadataPage\").style.display = \"none\"\n                document.getElementById(\"resultsPage\").style.display = \"block\";  \n                document.getElementById(\"returnButton2\").style.display = \"none\"\n                document.getElementById(\"nextButton3\").style.display = \"none\"\n                document.getElementById('load').style.display = 'block';\n\n                //This axios request sends request to /run url, from where the image analysis pipeline is executed\n                const url2 = '/run';\n                axios.post(url2, \"RUN\")\n                    .then((response) =>{\n                        if(response.data==\"error\"){ //If error\n                            console.log(\"########ERROR########\")\n                            console.log(\"ERROR IN AXIOS CALL\")\n                            //alert(\"Error when performing the analysis, please check your input files and try again.\")\n                            document.getElementById('load').style.display = 'none';\n\n                        } \n                        else{ //IF everything okay\n\n                            console.log(\"Analysis ready\")\n                            //Display results page for user\n                            //Parses the resonse.data which contains the output message from Nextflow pipeline\n                            //If error string is found -> assume that error accured -> show error message\n                            if(response.data.includes(\"Error\")){\n                                document.getElementById(\"pipelineStatus\").innerHTML = \"An error occured during the analysis. The error can be tracked from the message below or from nextflow.log file. Note, some of the results are missing because of the error.\"\n                            }\n                            else{\n                                document.getElementById(\"pipelineStatus\").innerHTML = \"The pipeline ran successfully, please display the results\"\n                                \n                            }\n                            //Get the cell type and corresponding color. These are displayed in result page\n                            let color_elem = []\n                            for(let i = 0;i < Object.values(maskDict).length; i++){\n                                color_elem +=  Object.values(Object.values(maskDict)[i])[3]['color'] + \": \" + Object.values(Object.values(maskDict)[i])[0]['cell_type'] + \"     \"\n                            }\n\n\n                            //Display and hide elements\n                            document.getElementById(\"color_label\").innerHTML += color_elem\n                            document.getElementById(\"outputB\").style.display = \"block\"\n                            document.getElementById(\"outputMessage\").innerHTML = response.data\n                            document.getElementById('load').style.display = 'none';\n                            document.getElementById('results').style.display = 'block';                   \n                        }\n                });   \n                \n\n            }\n\n              \n        }\n    }))\n\n    // ################################################## Metadata for positive marker area measurements #################################################################################\n    //THis is commented away from the pipeline\n    const allMarkersChecked = (markers) => {    \n            setMarkersDict(markers)\n            let count = -1;\n\n            //let markers = originalMarkers //Using a temp list because the state variable doesn't update immediately \n            setMarkerKeyCounter(Object.keys(markers).length) \n\n            setMarkerTextBox(Object.entries(markers).map(([key,index]) => {\n                let obj = markers[key]\n                console.log(obj)\n                let marker = Object.keys(obj)[0]\n                console.log(marker)\n                //if(marker in originalMarkers){//THis doesn't work because the marker is located in 0:{marker:mainMarker}\n                    console.log(\"INCLUDES\")\n                    count = count + 1\n                    let id = \"marker\" + count\n                    setCounter(count)  \n\n                    console.log(count)\n                    return(<div class=\"row\" id={id} value={marker}>\n                        <div class=\"col-1\">    \n                            <input name={id} value={marker} disabled size=\"10\"/>                \n                        </div>\n                        <div class=\"col-2\">    \n                            <input name={id} value={marker} disabled size=\"10\"/>                \n                        </div>\n                        <div class=\"col-3\">\n                            <button  onClick={() => removeMarker(count)}>Remove</button>                  \n                        </div>  \n                    </div>)        \n            }\n        ))             \n    }\n\n    const addMarkers = event =>{\n        //Disables element after new one is added\n        if(Object.keys(markersDict).includes(counter.toString())){\n            let name = \"marker\" + counter\n            console.log(name)\n            document.getElementsByName(name).forEach(e => {\n                e.disabled = true\n            })        \n        }\n\n        let count = counter + 1\n        let id = \"marker\" + count\n        setMarkerTextBox([...markerTextBox,\n        <div class=\"row\" id={id}>\n            <div class=\"col-1\">    \n                <input name={id}  onBlur={event => handleChangeMarker(id,event, \"marker\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-2\">    \n                <input name={id} onBlur={event => handleChangeMarker(id,event, \"mainMarker\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-3\">\n                <button disabled={markerTextBox.length === 0} onClick={() => removeMarker(id)}>Remove</button>        \n            </div> \n\n        </div>\n        ])  \n        setCounter(count)       \n    }\n\n    \n    const removeMarker = (id) => {\n        let key = document.getElementById(id).getAttribute(\"value\")\n        delete markersDict[key]\n        document.getElementById(id).remove()\n    }\n\n    const handleChangeMarker = (id, event, input) => {\n        setMarkerKeyCounter(markerKeyCounter + 1) //Update the counter\n        //Checks what is the input of the function and stores the input to a dictionary \n        if(input===\"marker\"){\n            let inputError = validateMarker(event.target.value)\n            console.log(inputError)\n            if(inputError === true){\n                alert(\"Error in marker input: There is no marker \"+ event.target.value + \" in the data\")\n            }\n            else{\n                markerTemp = {...markerTemp, marker:event.target.value}\n\n            }\n        }\n        else if(input === \"mainMarker\"){\n            let inputError = validateMarker(event.target.value)\n            if(inputError === false){\n                markerTemp = {...markerTemp, mainMarker:event.target.value}   \n            }\n            else{\n                alert(\"Error in main marker input: There is no marker \"+ event.target.value + \" in the data\")\n            }\n        }\n        let exists = false\n        //After the temp dictionary is filled store the properties to the main dictionary\n        if(Object.values(markerTemp).filter(x => x === \"\").length === 0){\n            console.log(\"OBJECT ENTRIES\")\n            Object.entries(markersDict).map(([key,value]) => {\n\n                if(Object.keys(value)[0] === markerTemp[\"marker\"] && Object.values(value)[0] === markerTemp[\"mainMarker\"]){\n                    exists = true\n                }\n\n            })\n            if(exists === true){\n                alert([markerTemp[\"marker\"]]+\" : \"+markerTemp[\"mainMarker\"] + \" already exists, please change the input\")\n            }\n            else{\n                setMarkersDict({...markersDict,[markerKeyCounter]:{[markerTemp[\"marker\"]]:markerTemp[\"mainMarker\"]}})\n            }\n        }\n\n    }\n\n    function validateMarker(marker){\n        let inputMarkers = []\n        console.log(\"INPUMarker\", marker)\n        var regex = /^[a-zA-Z0-9!&|]+$/;\n        let inputError = false\n\n        if(!marker.match(regex)){\n            alert(\"Error in input: Only letters, numbers and logical operators (!&|) are accepted.\")\n        }\n        else{\n            console.log(\"VALIDATE\")\n            //Checks the logical operators the user inputted\n            if(marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")){\n                inputMarkers = marker.split(/[&!|]+/) //Makes a list of the markers\n            }\n            else{\n                //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n                inputMarkers.push(marker)\n            }\n            //Loop that checks the user inputted a marker that that the tiff-images have\n            for(let elem in inputMarkers){\n                console.log(elem)\n                //If the marker is in the data returns false otherwise returns inputError true\n                if(originalMarkers.includes(inputMarkers[elem])){ \n                    inputError = false\n                }\n                else{\n                    inputError = true\n                    break;\n                }\n            }\n        }\n        return inputError\n    }\n\n    // #################################################################### Settings for segmentation ################################################################################\n    //Function which prepares the dropdown menu\n    const segmentationInput = () => {\n\n        setModelDropDown(\n        <div class=\"dropbox\">  \n            <label for=\"model\">Choose stardist model: </label>\n            <select  name=\"model\" id=\"model\" onChange={event => handleChangeSelectModel(event)}>\n                <option selected=\"true\" disabled=\"disabled\">Select</option>    \n                <option value=\"HuNu\">HuNu_model</option>\n                <option value=\"TH\">TH_model</option>\n                <option value=\"ChAT\">ChAT_model</option>\n                <option value=\"LMX\">LMX_TH_model</option>\n                <option value=\"2D_versatile_fluo\">2D_versatile_fluo</option>\n            </select> \n        </div>)\n     \n    }\n    //Checks the corresponding default threshold values for the selected model\n    const handleChangeSelectModel = (event) => {\n         \n        let selectedModel = event.target.value\n        setModel(selectedModel)\n        if(selectedModel === \"HuNu\"){\n            setProbThreshold(\"0.58\")\n            setOverlapThreshold(\"0.3\")\n        }\n        else if(selectedModel === \"TH\"){\n            setProbThreshold(\"0.5\")\n            setOverlapThreshold(\"0.5\")\n        }\n        else if(selectedModel === \"ChAT\"){\n            setProbThreshold(\"0.4\")\n            setOverlapThreshold(\"0.4\")\n        }\n        else if(selectedModel === \"LMX\"){\n            setProbThreshold(\"0.20\")\n            setOverlapThreshold(\"0.30\")\n        }\n        else if(selectedModel === \"2D_versatile_fluo\"){\n            setProbThreshold(\"0.6\")\n            setOverlapThreshold(\"0.4\")\n        }\n\n    }\n\n\n    // ################################################################### Metadata for cell identification #####################################################################################\n\n    //Input for cell type identification\n    const maskingInput = (markers) => {   \n        \n        //Initialize drop down menu options for markers\n        options = [<option value = \"Select\" selected=\"true\" disabled=\"disabled\">Select</option>]\n\n        //First time the page rendered set the input fields\n        if(maskingTextBox == 0){\n            //Set the submitted markers to dropdown menu and to a list, which is later used to validate the input of cell area measuremnts\n            Object.entries(markers).map(([key,index]) => {\n                submitted_markers.push(Object.keys(markers[key])[0])\n                options.push(<option value={Object.keys(markers[key])[0]}>{Object.keys(markers[key])[0]}</option>)       \n            })\n\n            //Initialize the id, the id is unique because maskCounter is updated after adding new item\n            let mask_id = \"maskInput_\" + maskCounter\n            let value_id = \"value_\" + maskCounter\n\n            //set the options to the variable, which is now a dropdown menu\n            setMarkerOptions(options)\n        \n            //set the input fields\n            setMaskingTextBox(Object.entries(maskingTextBox+1).map(([key,index]) => {\n            \n                return(\n                    <div  class=\"row\" id={mask_id} >\n                        <div class=\"col-1\">  \n                            <p>Cell type</p>\n                            <input name = {mask_id} onChange={event => handleChangeMask(mask_id,event, \"cellType\", \"add\")}  size=\"10\"/>  \n                        </div>\n                        <div class=\"col-2\">   \n                            <p>Marker</p>\n                            <select  name = {mask_id} id=\"colorSelector\" onChange={event => handleChangeMask(mask_id,event, \"thresholdMarker\", \"add\")}>\n                                {options}\n                            </select>           \n                        </div>\n                        <div class=\"col-3\">  \n                            <p>Threshold value</p>\n                            <input id = {value_id} name = {mask_id} onChange={event => handleChangeMask(mask_id,event, \"thresholdValue\", \"add\")} size=\"10\"/>                \n                        </div>\n                        <div class=\"col-4\">  \n                            <p>Color</p>\n                            <select name = {mask_id} id=\"colorSelector\" onChange={event => handleChangeMask(mask_id,event, \"color\", \"add\")}>\n                                <option value = \"Select\" selected=\"true\" disabled=\"disabled\">Select</option>    \n                                <option value=\"red\">Red</option>\n                                <option value=\"blue\">Blue</option>\n                                <option value=\"yellow\">Yellow</option>\n                                <option value=\"green\">Green</option>\n                                <option value=\"purple\">Purple</option>\n                                <option value=\"orange\">Orange</option>\n                            </select>               \n                        </div>\n                        \n                    </div>)\n               \n            }))\n        }        \n    }\n\n    //add new cell type\n    const addMasks = event =>{\n \n        //Validates the input of previously added cell type\n        //Chekcs that all values are filled\n        if(maskTemp[\"thresholdMarker\"] == \"\" || maskTemp[\"cellType\"] == \"\" || maskTemp[\"thresholdValue\"] == null || maskTemp[\"color\"]==\"\"){\n            alert(\"Fill all the fields before adding new cell type\")\n        }\n        //Checj that threshold value is NA or between 0-1\n        else if((maskTemp[\"thresholdValue\"] != \"NA\" && isNaN(maskTemp[\"thresholdValue\"]) == true) || (isNaN(maskTemp[\"thresholdValue\"]) == false && maskTemp[\"thresholdValue\"] < 0 || maskTemp[\"thresholdValue\"] > 1)){  \n            alert(\"Only values between 0-1 or NA are accepted in threshold value textbox\")\n        }\n        else{ //If no error in previous output add new input  fields\n            setNewMask(false)\n        \n            let name = \"maskInput_\" + maskCounter\n            //disable the previously added cell type, so that user can't edit it\n            document.getElementsByName(name).forEach(e => {\n                e.disabled = true\n            })        \n            //Update the counter and ID\n            let count = maskCounter + 1\n            let mask_id = \"maskInput_\" + count\n            let value_id = \"value_\" + count\n            setMaskCounter(count)\n\n\n            //Create new inputfields\n            setMaskingTextBox([...maskingTextBox,\n            <div class=\"row\" id={mask_id} >\n                <div class=\"col-1\">    \n                    <p>Cell type</p>\n                    <input name={mask_id}  onChange={event => handleChangeMask(mask_id,event, \"cellType\", \"add\")} size=\"10\"/>                \n                </div>\n                <div class=\"col-2\">    \n                <p>Marker</p>\n                    <select  name={mask_id} id=\"colorSelector\" onChange={event => handleChangeMask(mask_id,event, \"thresholdMarker\", \"add\")}>\n                        {markerOptions}\n                    </select>     \n                </div>\n                <div class=\"col-3\">    \n                    <p>Threshold value</p>\n\n                    <input id={value_id} name={mask_id}  disabled={Object.keys(maskDict).includes(maskKeyCounter-1)} onBlur={event => handleChangeMask(mask_id,event, \"thresholdValue\", \"add\")} size=\"10\"/>                \n                </div>\n                <div class=\"col-4\">    \n                    <p>Color</p>\n                    <select  name={mask_id} disabled={Object.keys(maskDict).includes(maskKeyCounter-1)} id=\"colorSelector\" onChange={event => handleChangeMask(mask_id,event, \"color\", \"add\")}>\n                                    <option value = \"Select\" selected=\"true\" disabled=\"disabled\">Select</option>    \n                                    <option value=\"red\">Red</option>\n                                    <option value=\"blue\">Blue</option>\n                                    <option value=\"yellow\">Yellow</option>\n                                    <option value=\"green\">Green</option>\n                                    <option value=\"purple\">Purple</option>\n                                    <option value=\"orange\">Orange</option>\n                    </select>                   \n                </div>\n            </div>\n            ])  \n            //Empty the temp variable\n            maskTemp = ({cellType:\"\", thresholdMarker:\"\", thresholdValue:null, color:\"\"})\n\n        }\n        \n    }\n    //Handels changes in the input fields\n    const handleChangeMask = (id,event, input, call) => {\n        setMaskKeyCounter(maskKeyCounter + 1) \n        \n        //Checks from which component the function was called and stores the input to dictionary to the object\n        if(input === \"cellType\"){\n            maskTemp = {...maskTemp, cellType:event.target.value}  \n        }\n        else if(input === \"thresholdMarker\"){\n                maskTemp = {...maskTemp, thresholdMarker:event.target.value}\n        }\n        else if(input === \"thresholdValue\"){   \n                maskTemp ={...maskTemp, thresholdValue:event.target.value}   \n        }\n        else if(input === \"color\"){\n            maskTemp ={...maskTemp, color:event.target.value}\n        }\n        if(Object.values(maskTemp).filter(x => x === \"\").length === 1){//counts the number of empty values\n            setNewMask(true)\n        }\n        \n        //After the temp dictionary is filled store the properties to the main dictionary\n        if(call == \"add\"){\n            if(Object.values(maskTemp).filter(x => x === \"\").length === 0){\n                setMaskDict({...maskDict,[maskKeyCounter]:[{cell_type:maskTemp[\"cellType\"]},{ threshold_marker:maskTemp[\"thresholdMarker\"]}, {threshold_value:maskTemp[\"thresholdValue\"]}, {color:maskTemp[\"color\"]}]})     \n            }   \n        } //If the call came from reset we don't want to use the spread operator beacuse now we are updating to an empty array\n        else if(call ==\"reset\"){\n            if(Object.values(maskTemp).filter(x => x === \"\").length === 0){\n                setMaskDict({[maskKeyCounter]:[{cell_type:maskTemp[\"cellType\"]},{ threshold_marker:maskTemp[\"thresholdMarker\"]}, {threshold_value:maskTemp[\"thresholdValue\"]}, {color:maskTemp[\"color\"]}]})     \n            }   \n        }\n         \n    }\n\n    //Resets the cell type identification form and empties the temp directory\n        const resetMask = () => {\n            maskTemp = ({cellType:\"\", thresholdMarker:\"\", thresholdValue:null, color:\"\"})\n\n            let name = \"maskInput_\" + 0\n            //Removes the disabled property\n            document.getElementsByName(name).forEach(e => {\n                console.log(e)\n                e.disabled = false\n                e.value = \"\"\n            })        \n\n            //reinitialize the values\n            setMaskDict([{}])\n            setMaskCounter(0)\n            let mask_id = \"maskInput_0\"\n            let value_id = \"value_0\"\n\n            //Set new input fields after resetting the form\n            setMaskingTextBox([\n                <div class=\"row\" id={mask_id}>\n                    <div class=\"col-1\">  \n                        <p>Cell type</p>\n                        <input name = {mask_id} onChange={event => handleChangeMask(mask_id,event, \"cellType\", \"reset\")}  size=\"10\"/>  \n                    </div>\n                    <div class=\"col-2\">   \n                        <p>Marker</p>\n                        <select  name = {mask_id} id=\"colorSelector\" onChange={event => handleChangeMask(mask_id,event, \"thresholdMarker\", \"reset\")}>\n                            {options}\n                        </select>           \n                    </div>\n                    <div class=\"col-3\">  \n                        <p>Threshold value</p>\n                        <input id = {value_id} name = {mask_id} onChange={event => handleChangeMask(mask_id,event, \"thresholdValue\", \"reset\")} size=\"10\"/>                \n                    </div>\n                    <div class=\"col-4\">  \n                        <p>Color</p>\n                        <select  name = {mask_id} id=\"colorSelector\" onChange={event => handleChangeMask(mask_id,event, \"color\", \"reset\")}>\n                            <option value = \"Select\" selected=\"true\" disabled=\"disabled\">Select</option>    \n                            <option value=\"red\">Red</option>\n                            <option value=\"blue\">Blue</option>\n                            <option value=\"yellow\">Yellow</option>\n                            <option value=\"green\">Green</option>\n                            <option value=\"purple\">Purple</option>\n                            <option value=\"orange\">Orange</option>\n                        </select>               \n                    </div>\n                    \n                </div>])\n           \n            \n    }\n    \n\n    //#################################################################### Input for cell intensity measurements ######################################################################################\n\n    //set the input field for intensity measurements\n    const intensityInput = () => {\n\n        setIntensityTb(\n        <div>\n            <br></br>\n            <label for=\"intensity\" >Cell type: </label>\n            <input id = \"intensity\" size=\"10\" onChange={event => handleChangeIntensity(event)}></input>\n        </div>)   \n    }\n    //Handles change in intensity input field\n    const handleChangeIntensity = (event) => {\n        setIntensityCellType(event.target.value)\n        console.log(event.target.value)\n    }\n    \n    //######################################################################## Input for cell area measurements ###########################################################################\n    //Prepares the input field for cell area measurements\n    const cellAreaInput = () => {\n        let area_id = \"cellAreaInput_\" + cellAreaCounter\n        if(Object.keys(cellAreaTb).length === 0){\n            setCellAreaTb([...cellAreaTb,<div>\n                <br></br>\n                <label for={area_id} >Cell type(s) to measure: </label>\n                <input id = {area_id} size=\"15\" onChange={event => handleChangeCellArea(event,\"add\")}></input>\n                </div>\n            ])\n        }\n        \n    }\n\n    //Handles change in cell area measurement input field\n    const handleChangeCellArea = (event, call) => {\n        if(!cellAreaList.includes(event.target.value) & call != \"reset\"){\n            setCellAreaList([...cellAreaList, event.target.value])\n        }\n        else if(call == \"reset\"){\n            setCellAreaList([event.target.value])\n        }\n    }\n\n    //reset the textboxes of cell area measurement\n    const resetCellArea = () => {\n    \n        //Empties the input field and removes the diabled property\n        document.getElementById(\"cellAreaInput_0\").value = \"\"\n        document.getElementById(\"cellAreaInput_0\").removeAttribute(\"disabled\")\n\n        //Updates statevariables\n        setCellAreaList([])\n        setCellAreaCounter(0)\n        \n        //Add new cell area measuement inputfields\n        setCellAreaTb([<div id=\"firstArea\">\n            <br></br>\n            <label for=\"cellAreaInput_0\" >Cell type(s) to measure: </label>\n            <input id = \"cellAreaInput_0\" size=\"15\" onChange={event => handleChangeCellArea(event, \"reset\")}></input>\n            </div>\n          \n        ])       \n    }\n    //Add more cell area measurement inputfields\n    const addCells = (event) => {    \n            //disable the previous input\n            document.getElementById(\"cellAreaInput_\"+cellAreaCounter).setAttribute(\"disabled\",\"disabled\")\n            //Update variables\n            let counter = cellAreaCounter + 1\n            let area_id = \"cellAreaInput_\" + counter\n            setCellAreaCounter(counter)\n\n            //Create html element\n            setCellAreaTb([...cellAreaTb,\n                \n                <div> \n                    <label for=\"cellArea\" >Cell type(s) to measure: </label>\n                    <input id={area_id} size=\"15\" onChange={event => handleChangeCellArea(event, \"add\")}></input>\n\n                </div>\n            \n            ])     \n    }\n\n    //Show instructions to the user\n    const showInstructions = ( arg1, arg2, arg3) => {\n        document.getElementById(arg1).style.display=\"block\"\n        document.getElementById(arg2).style.display=\"none\"\n        document.getElementById(arg3).style.display=\"block\"    \n      }\n    //Hide instructions\n    const hideInstructions = (arg1, arg2, arg3) =>{\n        document.getElementById(arg1).style.display=\"none\"\n        document.getElementById(arg2).style.display=\"block\"\n        document.getElementById(arg3).style.display=\"none\"\n    }\n\n\n      \n   \n    \n    //############################################################################# HTML form to be rendered ###############################################################################################\n\n    return(\n        <div>\n            <form class=\"metadataForm\">\n\n                {renderArea ? (\n                    <div>\n                    <React.Fragment> \n                        <b>Measurement of positive-marker areas</b>\n                         <br></br>\n\n                        <div class=\"row\">\n                                <div class=\"col-1\">    \n                                    <p>Marker</p>\n                                </div>\n                                <div class=\"col-2\">    \n                                    <p>Main marker</p>\n                            </div>\n                        </div>\n                        {markerTextBox}\n                        <button type=\"button\" onClick={addMarkers}>Add markers</button>\n\n                    </React.Fragment>\n                    </div>                  \n                ):(<></>)} \n                <br></br>\n                <br></br>\n\n                {renderSegmentation ? (\n                    <div>\n                    <React.Fragment> \n                    <div class=\"row\">\n                            <div class=\"col-1\">\n                                <b>Cell segmentation</b>\n                            </div>\n                            <div class=\"col-2\">\n                                <div id = \"infoBtnSegment\" class=\"btn-instructions2\">  \n                                    <button type=\"button\" onClick={() => showInstructions(\"instructionsSegment\", \"infoBtnSegment\", \"hideInfoBtnSegment\")}>Info</button>\n                                </div>  \n                                <div  hidden id = \"hideInfoBtnSegment\" class=\"btn-instructions2\">  \n                                    <button type=\"button\" onClick={() => hideInstructions(\"instructionsSegment\", \"infoBtnSegment\", \"hideInfoBtnSegment\")}>Hide info</button>\n                                </div>  \n                            </div>\n                    </div>\n                    <br></br>\n\n                    <div class=\"row\">\n                        {modelDropDown}\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-1\">    \n                            <p >Probability threshold</p>\n                            <input value = {probTreshold} onChange={(e)=>setProbThreshold(e.target.value)}/>                \n                        </div>\n                        <div class=\"col-2\">    \n                            <p>Overlap threshold</p>\n                            <input value= {overlapThreshold} onChange={(e)=>setOverlapThreshold(e.target.value)}/>\n                        </div>\n                    </div>\n                    <div hidden id=\"instructionsSegment\" class=\"textarea-container\">    \n                        <p disabled readonly rows=\"20\" cols=\"50\">\n                            <b>Instructions:<br></br><br></br></b>\n                            <b>Choose StarDist model: </b>Model to be used in cell segmentation.<br></br>\n                            <b>Probability threshold: </b>Higher values leads to fewer segmented objects, but will likely avoid false positives.<br></br> \n                            <b>Overlap threshold: </b>Higher values allow segmented objects to overlap substantially.<br></br>\n                            \n                        </p>        \n                    </div>\n                                               \n                    </React.Fragment>\n                    </div>                  \n                ):(<></>)\n                \n                }    \n                <br></br>\n                <br></br>\n\n                {renderMasking ? (\n                    <div>\n                    <React.Fragment> \n                        <div class=\"row\">\n                            <div class=\"col-1\">\n                                <b>Cell type identification</b>\n                            </div>\n                            <div class=\"col-2\">\n                                <div id = \"infoBtnIdentification\" class=\"btn-instructions2\">  \n                                    <button type=\"button\" onClick={() => showInstructions(\"instructionsIdentification\", \"infoBtnIdentification\", \"hideInfoBtnIdentification\")}>Info</button>\n                                </div>  \n                                <div  hidden id = \"hideInfoBtnIdentification\" class=\"btn-instructions2\">  \n                                    <button type=\"button\" onClick={() => hideInstructions(\"instructionsIdentification\", \"infoBtnIdentification\", \"hideInfoBtnIdentification\")}>Hide info</button>\n                                </div>  \n                            </div>\n                        </div>\n\n                        {maskingTextBox}\n                        <button type=\"button\" onClick={addMasks}>New cell type</button>&nbsp;&nbsp;&nbsp;\n                        <button type=\"button\" onClick={() => resetMask()}>Reset</button>\n\n                        <div hidden id=\"instructionsIdentification\" class=\"textarea-container\">    \n                            <p disabled readonly rows=\"20\" cols=\"50\">\n                                <b>Instructions: <br></br><br></br></b>\n                                <b>Cell type: </b>Name of cell type.<br></br>\n                                <b>Marker: </b>Marker corresponding the cell type. Should correspond a label column in submit samples page.<br></br> \n                                <b>Threshold value: </b>1 - fraction of area overlap between the segmented object and the thresholded image. Object is classified as a cell, if it overlaps the mask by fraction higher than threshold marker. Higher threshold value leads to more objects classified as cells. Values between 0-1 or NA to classify all segmented objects to cells.<br></br>\n                                <b>Color: </b>Color used to represent this cell type<br></br>\n                                \n                            </p>        \n                        </div>\n                        \n\n                    </React.Fragment>\n                    </div>                  \n                ):(<></>)\n                \n                }    \n\n                <br></br>\n                <br></br>\n\n                {renderIntensity ? (\n                    <div>\n                    <React.Fragment> \n                        <div class=\"row\">\n                            <div class=\"col-1\">\n                                 <b>Pixel intensity measurement between groups</b>  \n                            </div>\n                            <div class=\"col-2\">\n                                <div id = \"infoBtnIntensity\" class=\"btn-instructions2\">  \n                                    <button type=\"button\" onClick={() => showInstructions(\"instructionsIntensity\", \"infoBtnIntensity\", \"hideInfoBtnIntensity\")}>Info</button>\n                                </div>  \n                                <div  hidden id = \"hideInfoBtnIntensity\" class=\"btn-instructions2\">  \n                                    <button type=\"button\" onClick={() => hideInstructions(\"instructionsIntensity\", \"infoBtnIntensity\", \"hideInfoBtnIntensity\")}>Hide info</button>\n                                </div>  \n                            </div>\n                        </div>\n\n                        {intensityTb}\n                        <div hidden id=\"instructionsIntensity\" class=\"textarea-container\">    \n                            <p disabled readonly rows=\"20\" cols=\"50\">\n                                <b>Instructions:<br></br><br></br></b>\n                                <b>Cell type: </b>Name of cell type to perform the intensity analysis, should match one of the cell types in cell type identification.<br></br>\n                                \n                            </p>        \n                        </div>\n                    </React.Fragment>\n                    \n                    </div>                  \n                ):(<></>)\n                \n                }    \n\n                <br></br>\n                <br></br>\n\n                {renderCellArea ? (\n                    <div>\n                    <React.Fragment> \n                        <div class=\"row\">\n                            <div class=\"col-1\">\n                                <b>Cell area measurements</b> \n                            </div>\n                            <div class=\"col-2\">\n                                <div id = \"infoBtnCellArea\" class=\"btn-instructions2\">  \n                                    <button type=\"button\" onClick={() => showInstructions(\"instructionsCellArea\", \"infoBtnCellArea\", \"hideInfoBtnCellArea\")}>Info</button>\n                                </div>  \n                                <div  hidden id = \"hideInfoBtnCellArea\" class=\"btn-instructions2\">  \n                                    <button type=\"button\" onClick={() => hideInstructions(\"instructionsCellArea\", \"infoBtnCellArea\", \"hideInfoBtnCellArea\")}>Hide info</button>\n                                </div>  \n                            </div>\n                        </div>\n                        <div> \n                            <br></br>\n                            <label for=\"fraction\" >Co-expression fraction: </label>\n                            <input id = \"fraction\" size=\"6\" onChange={(event) => setExpressionFraction(event.target.value)}></input>\n                             \n\n                        </div>     \n                        {cellAreaTb}\n                        <button type=\"button\" onClick={addCells}>Add new</button>&nbsp;&nbsp;&nbsp;\n                        <button type=\"button\" onClick={() => resetCellArea()}>Reset</button>\n                        <br></br>\n\n                        <div hidden id=\"instructionsCellArea\" class=\"textarea-container\">    \n                            <p disabled readonly rows=\"20\" cols=\"50\">\n                                <b>Instructions:<br></br><br></br></b>\n                                <b>Co-expression fraction: </b>Value between 0-1. Describes the overlap threshold between two cells to be classified as co-expression. This need's to be specified even if you don't measure for douple positive cells.<br></br>\n                                <b>Cell type(s) to measure: </b> Cell type(s) used to compute the area positve for cell type. To measure douple cells separate the different cell types with \"/\" (cell1/cell2), i.e cell1 which are also cell2. Cells should match the cell types listed above in cell type identification form.<br></br>\n                                \n                            </p>        \n                        </div>\n                    </React.Fragment>\n                    </div>                  \n                ):(<></>)\n                \n                }   \n\n            <br></br>\n            <br></br>\n\n             \n            </form>\n            \n        </div>\n        ) \n})\nexport default GetMetadata;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}