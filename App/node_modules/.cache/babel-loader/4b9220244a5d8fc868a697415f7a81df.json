{"ast":null,"code":"import _defineProperty from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli-app/src/getMetadata.js\";\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { render, waitForElementToBeRemoved } from '@testing-library/react'; //import GetSettings from \"./getSettings.js\"\n//If no markers prevent user to go forward\n\nvar GetMetadata = forwardRef(function (props, ref) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      renderArea = _useState2[0],\n      setRenderArea = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allMarkers = _useState4[0],\n      setAllMarkes = _useState4[1]; // const [inputFields, setInputFields] = useState([]);\n\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      markersDict = _useState6[0],\n      setMarkersDict = _useState6[1];\n\n  var inputFields = [];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      markers = _useState8[0],\n      setMarkers = _useState8[1];\n\n  var _useState9 = useState({}),\n      _useState10 = _slicedToArray(_useState9, 2),\n      originalMarkers = _useState10[0],\n      setOriginalMarkers = _useState10[1]; //This list keeps in track about the markers that the user inputted\n\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      markerTextBox = _useState12[0],\n      setMarkerTextBox = _useState12[1]; //let originalMarkers = []\n\n\n  useImperativeHandle(ref, function () {\n    return {\n      getProcesses: function getProcesses() {\n        console.log(\"AXIOS\");\n        axios.get(\"/submitSettings\").then(function (response) {\n          //setMarkersDict(response.data[1])\n          //setMarkers(response.data[2])\n          setOriginalMarkers(response.data[1]);\n          setMarkerTextBox(\"\");\n          var markers = response.data[1];\n          allMarkersChecked(markers); //setSamples(JSON.parse(response.data[1]))\n          //console.log(samples)\n          //console.log(typeof(samples))\n          //Parse values from response data to boolean format\n\n          for (var prop in response.data[0]) {\n            if (response.data[0].hasOwnProperty(prop)) {\n              response.data[0][prop] = response.data[0][prop] == 'true' || response.data[0][prop] == 'false' ? response.data[0][prop] === 'true' : response.data[0][prop];\n            }\n          } //Checkbox to Compute marker positive areas to all markers\n          //+ input fields to custom markers\n\n\n          if (response.data[0].execute_area == true) {\n            setRenderArea(true); //console.log(\"Render area \", renderArea)\n          } else if (response.data[0].execute_area == false) setRenderArea(false);\n\n          if (response.data[0].execute_sd_segmentation == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_type_identification == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_clustering == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_thresholding == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_homotypic_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_heterotypic_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_permuted_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          } //console.log(skip_area)\n          //console.log(response.data.skip_area)\n\n        });\n      },\n      submitMetadata: function submitMetadata() {\n        console.log(\"metadata\");\n        console.log(allMarkers);\n        console.log(\"getMETADATA\");\n      }\n    };\n  });\n\n  var allMarkersChecked = function allMarkersChecked(markers) {\n    console.log(\"ORIGINAL MARKERS\", originalMarkers);\n    setMarkersDict(originalMarkers); //let markers = originalMarkers //Using a temp list because the state variable doesn't update immediately \n\n    console.log(markers);\n    setMarkerTextBox(Object.entries(markers).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          index = _ref2[1];\n\n      if (key in originalMarkers) {\n        console.log(\"INCLUDES\");\n        return /*#__PURE__*/React.createElement(\"div\", {\n          class: \"row\",\n          id: index,\n          value: key,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 28\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-1\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          name: \"marker\",\n          value: key,\n          editable: false,\n          size: \"10\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-2\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          name: \"mainMarker\",\n          value: key,\n          editable: false,\n          size: \"10\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-3\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          onClick: function onClick() {\n            return removeMarker(index);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 29\n          }\n        }, \"Remove\")));\n      }\n    }));\n  };\n\n  var addMarkers = function addMarkers(event) {\n    setMarkerTextBox([].concat(_toConsumableArray(markerTextBox), [/*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      id: markerTextBox.length + 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: \"marker\",\n      id: -1 - markerTextBox.length,\n      onBlur: function onBlur(event) {\n        return handleChangeMarker(markerTextBox.length + 1, event);\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: \"mainMarker\",\n      onBlur: function onBlur(event) {\n        return handleChangeMainMarker(markerTextBox.length + 1, event);\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: markerTextBox.length === 0,\n      onClick: function onClick() {\n        return removeMarker(markerTextBox.length + 1);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, \"Remove\")))]));\n  };\n\n  var removeMarker = function removeMarker(id) {\n    var key = document.getElementById(id).getAttribute(\"value\");\n    delete markersDict[key];\n    document.getElementById(id).remove();\n    console.log(markersDict);\n  };\n\n  var handleChangeMarker = function handleChangeMarker(id, event) {\n    var inputMarkers = [];\n    var inputString = event.target.value.replace(/\\s/g, \"\"); //Removes the whitespaces\n\n    var marker = inputString;\n    console.log(\"INPUTSTRING\", inputString); //Checks the logical operators the user inputted\n\n    if (marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")) {\n      inputMarkers = marker.split(/[&!|]+/); //Makes a list of the markers\n    } else {\n      //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n      inputMarkers.push(marker);\n    }\n\n    var inputError = false; //Loop that checks the user inputted a marker that that the tiff-images have\n\n    for (var elem in inputMarkers) {\n      if (inputMarkers[elem] in originalMarkers) {\n        inputError = false;\n      } else {\n        inputError = true;\n        break;\n      }\n    } //If the tiff-images have the marker we can put it to the dictionarry\n\n\n    if (inputError === false) {\n      setMarkersDict(_objectSpread({}, markersDict, _defineProperty({}, inputString, \"\")));\n    } //If not, raising an error to the user\n    else if (inputError === true) {\n      alert(\"ERROR: input \" + inputString + \" couldn't be processed, please change the input format\");\n    }\n  };\n\n  var handleChangeMainMarker = function handleChangeMainMarker(id, event) {//let key = document.getElementById()\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    class: \"metadataForm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }, \"Submit metadata:\"), renderArea ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 25\n    }\n  }, \"Area\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 37\n    }\n  }, \"Marker\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 37\n    }\n  }, \"Main marker\"))), markerTextBox, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addMarkers,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 25\n    }\n  }, \"Add markers\")))\n  /*\n  <div>\n      <p>Area</p>\n          <div class = \"checkbox\" >\n           <p>Select all markers: </p>\n              <input type = \"checkbox\" name=\"cbAreas\" onChange={() => allMarkersChecked()}/>\n      </div>\n      {allMarkers ? (\n         <div>\n          <div class=\"row\">\n              <div class=\"col-1\">    \n                  <p>Marker</p>\n              </div>\n              <div class=\"col-2\">    \n                  <p>Main marker</p>\n           </div>\n                           </div>\n          {markerTextBox}\n           <button type=\"button\" onClick={addMarkers}>Add markers</button>\n           </div>\n          \n        ):(\n          <React.Fragment>\n              \n             \n          {markerTextBox2}\n           <button type=\"button\" onClick={addMarkers2}>Add markers</button>\n           </React.Fragment>\n          \n        )}\n   </div> */\n  : /*#__PURE__*/React.createElement(React.Fragment, null)));\n});\nexport default GetMetadata; //<div>{allMarkers && <p>Loading...</p>}</div>#setAllMarkes(!allMarkers);","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","axios","v4","uuidv4","render","waitForElementToBeRemoved","GetMetadata","props","ref","renderArea","setRenderArea","allMarkers","setAllMarkes","markersDict","setMarkersDict","inputFields","markers","setMarkers","originalMarkers","setOriginalMarkers","markerTextBox","setMarkerTextBox","getProcesses","console","log","get","then","response","data","allMarkersChecked","prop","hasOwnProperty","execute_area","execute_sd_segmentation","execute_cell_type_identification","execute_cell_clustering","execute_cell_thresholding","execute_homotypic_interactions","execute_heterotypic_interactions","execute_permuted_interactions","submitMetadata","Object","entries","map","key","index","removeMarker","addMarkers","event","length","handleChangeMarker","handleChangeMainMarker","id","document","getElementById","getAttribute","remove","inputMarkers","inputString","target","value","replace","marker","includes","split","push","inputError","elem","alert"],"sources":["/home/ernohanninen/simpli-app/src/getMetadata.js"],"sourcesContent":["import React,  { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { render, waitForElementToBeRemoved } from '@testing-library/react';\n//import GetSettings from \"./getSettings.js\"\n\n\n\n//If no markers prevent user to go forward\n\nconst GetMetadata = forwardRef((props, ref)=>{\n\n    const [renderArea, setRenderArea] = useState(false)\n    const [allMarkers, setAllMarkes]  = useState(false)\n   // const [inputFields, setInputFields] = useState([]);\n    const [markersDict, setMarkersDict] = useState({})\n    let inputFields = []\n    const [markers, setMarkers] = useState([])\n\n    const [originalMarkers, setOriginalMarkers] = useState({}) //This list keeps in track about the markers that the user inputted\n    const [markerTextBox, setMarkerTextBox] = useState(\"\")\n\n    //let originalMarkers = []\n    useImperativeHandle(ref, ()=>({\n        getProcesses(){\n            console.log(\"AXIOS\")\n            axios.get(\"/submitSettings\")\n            .then(function(response){\n\n                //setMarkersDict(response.data[1])\n                //setMarkers(response.data[2])\n                setOriginalMarkers(response.data[1])\n                setMarkerTextBox(\"\")\n                let markers = response.data[1]\n                allMarkersChecked(markers)\n                //setSamples(JSON.parse(response.data[1]))\n                //console.log(samples)\n                //console.log(typeof(samples))\n                //Parse values from response data to boolean format\n                for (let prop in response.data[0]) {\n                    if (response.data[0].hasOwnProperty(prop)) {\n                        response.data[0][prop] = (response.data[0][prop] == 'true' || response.data[0][prop] == 'false')? response.data[0][prop] === 'true': response.data[0][prop] ;\n                    }\n                } \n                //Checkbox to Compute marker positive areas to all markers\n                //+ input fields to custom markers\n                if(response.data[0].execute_area == true){\n                    setRenderArea(true)\n                    //console.log(\"Render area \", renderArea)\n                }\n                else if(response.data[0].execute_area == false)setRenderArea(false)\n                \n                if(response.data[0].execute_sd_segmentation == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_type_identification == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_clustering == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_thresholding == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_homotypic_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_heterotypic_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_permuted_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                \n                //console.log(skip_area)\n                //console.log(response.data.skip_area)\n            })\n        },\n        submitMetadata(){\n\n            console.log(\"metadata\")\n            console.log(allMarkers)\n\n            console.log(\"getMETADATA\")\n        }\n    }))\n\n    const allMarkersChecked = (markers) => {\n        \n       \n            console.log(\"ORIGINAL MARKERS\", originalMarkers)\n            setMarkersDict(originalMarkers)\n            //let markers = originalMarkers //Using a temp list because the state variable doesn't update immediately \n            console.log(markers)\n            setMarkerTextBox(Object.entries(markers).map(([key,index]) => {\n            \n                if(key in originalMarkers){\n                    console.log(\"INCLUDES\")\n                    return(<div class=\"row\" id={index} value={key}>\n                        <div class=\"col-1\">    \n                            <input name=\"marker\" value={key} editable={false} size=\"10\"/>                \n                        </div>\n                        <div class=\"col-2\">    \n                            <input name=\"mainMarker\" value={key} editable={false} size=\"10\"/>                \n                        </div>\n                        <div class=\"col-3\">\n                            <button  onClick={() => removeMarker(index)}>Remove</button>                  \n                        </div>  \n                    </div>)      \n                }       \n            }\n        ))\n\n                \n    }\n\n    const addMarkers = event =>{\n        setMarkerTextBox([...markerTextBox,\n        <div class=\"row\" id={markerTextBox.length+1}>\n            <div class=\"col-1\">    \n                <input name=\"marker\"  id={-1-markerTextBox.length} onBlur={event => handleChangeMarker(markerTextBox.length+1,event)} size=\"10\"/>                \n            </div>\n            <div class=\"col-2\">    \n                <input name=\"mainMarker\" onBlur={event => handleChangeMainMarker(markerTextBox.length+1,event)} size=\"10\"/>                \n            </div>\n            <div class=\"col-3\">\n                <button disabled={markerTextBox.length === 0} onClick={() => removeMarker(markerTextBox.length+1)}>Remove</button>        \n            </div> \n\n        </div>\n        ])         \n    }\n\n   \n    const removeMarker = (id) => {\n\n        let key = document.getElementById(id).getAttribute(\"value\")\n        delete markersDict[key]\n        document.getElementById(id).remove()\n        console.log(markersDict)\n        \n    }\n\n    const handleChangeMarker = (id, event) => {\n        let inputMarkers = []\n\n        let inputString = event.target.value.replace(/\\s/g, \"\") //Removes the whitespaces\n        let marker = inputString\n        console.log(\"INPUTSTRING\", inputString)\n        \n        //Checks the logical operators the user inputted\n        if(marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")){\n            inputMarkers = marker.split(/[&!|]+/) //Makes a list of the markers\n        }\n        else{\n            //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n            inputMarkers.push(marker)\n        }\n        let inputError = false\n        //Loop that checks the user inputted a marker that that the tiff-images have\n        for(let elem in inputMarkers){\n            if(inputMarkers[elem] in originalMarkers){\n                inputError = false\n            }\n            else{\n                inputError = true\n                break;\n            }\n        }\n        //If the tiff-images have the marker we can put it to the dictionarry\n        if(inputError === false){\n            setMarkersDict({...markersDict,[inputString]:\"\"})\n        }\n        //If not, raising an error to the user\n        else if(inputError === true){\n            alert(\"ERROR: input \" + inputString + \" couldn't be processed, please change the input format\")\n\n        }\n \n      }\n\n    const handleChangeMainMarker = (id,event) => {\n        //let key = document.getElementById()\n    }\n\n    return(\n        <div>\n            <form class=\"metadataForm\">\n                <b>Submit metadata:</b>\n                {renderArea ? (\n                    <div>\n                    <React.Fragment> \n                        <p>Area</p>\n                        <div class=\"row\">\n                                <div class=\"col-1\">    \n                                    <p>Marker</p>\n                                </div>\n                                <div class=\"col-2\">    \n                                    <p>Main marker</p>\n\n                            </div>\n                \n                            </div>\n                        {markerTextBox}\n                        <button type=\"button\" onClick={addMarkers}>Add markers</button>\n\n\n                    </React.Fragment>\n                    </div>\n                    /*\n                    <div>\n                        <p>Area</p>\n                            <div class = \"checkbox\" >\n\n                            <p>Select all markers: </p>\n                                <input type = \"checkbox\" name=\"cbAreas\" onChange={() => allMarkersChecked()}/>\n                        </div>\n                        {allMarkers ? (\n                           <div>\n                            <div class=\"row\">\n                                <div class=\"col-1\">    \n                                    <p>Marker</p>\n                                </div>\n                                <div class=\"col-2\">    \n                                    <p>Main marker</p>\n\n                            </div>\n                \n                            </div>\n                            {markerTextBox}\n\n                            <button type=\"button\" onClick={addMarkers}>Add markers</button>\n\n                            </div>\n                            \n\n                         ):(\n                            <React.Fragment>\n                                \n                               \n                            {markerTextBox2}\n\n                            <button type=\"button\" onClick={addMarkers2}>Add markers</button>\n\n                            </React.Fragment>\n                            \n\n                         )}\n\n                    </div> */\n                    \n                   \n                            \n                ):(<></>)}\n                \n\n          \n            </form>\n        </div>\n    \n        )\n   \n})\nexport default GetMetadata;\n//<div>{allMarkers && <p>Loading...</p>}</div>#setAllMarkes(!allMarkers);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}