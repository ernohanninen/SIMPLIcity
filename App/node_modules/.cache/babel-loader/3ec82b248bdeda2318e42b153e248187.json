{"ast":null,"code":"import _slicedToArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli-app/src/getResults.js\";\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport Table from \"./sample_table.js\";\n\nvar GetResults = function GetResults() {\n  //Variables\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      plotPaths = _useState2[0],\n      setPlotPaths = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      areaPlots = _useState4[0],\n      setAreaPlots = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sampleImages = _useState6[0],\n      setSampleImages = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dropDownSamples = _useState8[0],\n      setDropDownSamples = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      dropDownMarkers = _useState10[0],\n      setDropDownMarkers = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      checkbox = _useState12[0],\n      setCheckbox = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      displaySegmentationCb = _useState14[0],\n      setDisplaySegmentationCb = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      preprocessedCb = _useState16[0],\n      setPreprocessedCb = _useState16[1];\n\n  var _useState17 = useState(true),\n      _useState18 = _slicedToArray(_useState17, 2),\n      firstCall = _useState18[0],\n      setFirstCall = _useState18[1];\n\n  var _useState19 = useState({}),\n      _useState20 = _slicedToArray(_useState19, 2),\n      totalCells = _useState20[0],\n      setTotalCells = _useState20[1];\n\n  var _useState21 = useState({}),\n      _useState22 = _slicedToArray(_useState21, 2),\n      resultingCells = _useState22[0],\n      setResultingCells = _useState22[1];\n\n  var _useState23 = useState(\"\"),\n      _useState24 = _slicedToArray(_useState23, 2),\n      markerImages = _useState24[0],\n      setMarkerImages = _useState24[1];\n\n  var _useState25 = useState([]),\n      _useState26 = _slicedToArray(_useState25, 2),\n      mergedImages = _useState26[0],\n      setMergedImages = _useState26[1]; //const [displaySegmented, setDisplaySegmented] = useState(true)\n\n\n  var sample = \"\"; //Function which get the images from backend\n\n  var displayResults = function displayResults() {\n    document.getElementById(\"resultsButton\").style.display = \"none\";\n    axios.get(\"/fetchResults\").then(function (response) {\n      setTotalCells(response.data[1]);\n      setResultingCells(response.data[2]);\n      console.log(\"PALUU ARVO\");\n      console.log(response.data);\n      console.log(response.data[1]);\n      console.log(response.data[2]); //Extracting values from dictionary\n\n      var samples = response.data[0][\"samples\"];\n      var area = response.data[0][\"area\"];\n      console.log(area);\n      console.log(samples);\n      setPlotPaths(area);\n      displayImages(area, samples, response.data[1], response.data[2]); //Calling function which displays the images         \n    });\n  }; //Function which displays the images to the user\n\n\n  var displayImages = function displayImages(area, samples, totalCells, resultingCells) {\n    var segmentation = false;\n    var merged = false;\n    var counter = 0;\n    var i = Object.entries(samples[Object.keys(samples)[0]]).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      console.log(key);\n      console.log(value);\n\n      if (Object.keys(value).includes(\"overlays\")) {\n        console.log(\"SEGMENTATION\");\n        segmentation = true;\n      }\n      /*if(Object.keys(value).includes(\"preprocessed\")){\n          counter += 1\n      }*/\n\n    });\n    segmentation = true;\n    Object.entries(samples).map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          key = _ref4[0],\n          value = _ref4[1];\n\n      console.log(key);\n      console.log(value);\n\n      if (\"merged_overlays\" == key) {\n        console.log(\"___________________________________--\");\n        merged = true;\n      }\n    });\n    /*if(\"merged_overlays\" in samples[0]){\n        console.log(\"___________________________________--\")\n         merged = true\n    }*/\n    //var markerOptions = []\n\n    var sampleOptions = Object.entries(Object.keys(samples)).map(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n          key = _ref6[0],\n          value = _ref6[1];\n\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: value,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }\n      }, value);\n    });\n    /* Object.entries(Object.keys(samples)).map(([key,value]) => {\n         markerOptions.push(Object.entries(samples[Object.keys(samples)[0]]).map(([key1,value1]) => {\n             if(key1 != \"merged_tiff\" && key1 != \"merged_overlays\"){\n                 return <option value={value + key1}>{key1}</option>\n             }\n         }))\n      })*/\n\n    var markerOptions = Object.entries(samples[Object.keys(samples)[0]]).map(function (_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 2),\n          key = _ref8[0],\n          value = _ref8[1];\n\n      console.log(key);\n\n      if (key != \"merged_tiff\" && key != \"merged_overlays\") {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: key,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 24\n          }\n        }, key);\n      }\n    });\n    /*var markerOptions = Object.entries(samples).map(([key,value]) => \n    <option value={value}>{value}</option>\n    )*/\n\n    /*if(counter > 1){\n        var sample_markers = []\n        Object.entries(samples[Object.keys(samples)[0]]).map(([key,value]) => {\n            console.log(value)\n            if(Object.keys(value).includes(\"preprocessed\")){\n                let sample_name = value[Object.keys(value)]\n                console.log(sample_name)\n                sample_name = sample_name.split(\"/\")[1]\n                console.log(sample_name)\n                sample_name = sample_name.split(/(.*)-/)[1]\n                console.log(sample_name)\n                if(sample_name != \"ALL\"){\n                    sample_markers.push(sample_name)\n                }\n                \n            }\n            else{return}\n        })\n        samples = sample_markers\n    }*/\n    //Get the values for drop-down list\n\n    /*if(counter == 1){\n        var optionItems = Object.entries(samples).map(([key,value]) => \n        <option value={key}>{key}</option>\n    )}\n    if(counter > 1){\n        var optionItems = Object.entries(samples).map(([key,value]) => \n        <option value={value}>{value}</option>\n    )}*/\n\n    merged = true; //Create the dropdown list\n\n    setDropDownSamples( /*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }, \"Samples: \"), /*#__PURE__*/React.createElement(\"select\", {\n      name: \"sampleSelector\",\n      id: \"sampleSelector\",\n      onChange: function onChange(event) {\n        return handleChangeSelect(event, segmentation, merged, \"sampleDropDown\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      id: \"optionNoneSample\",\n      value: \"None\",\n      selected: \"true\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 18\n      }\n    }, \"None\"), sampleOptions)));\n    setDropDownMarkers( /*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, \"Markers: \"), /*#__PURE__*/React.createElement(\"select\", {\n      name: \"markerSelector\",\n      id: \"markerSelector\",\n      onChange: function onChange(event) {\n        return handleChangeSelect(event, segmentation, merged, \"markerDropDown\");\n      },\n      disabled: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      id: \"optionNonemarker\",\n      value: \"None\",\n      selected: \"true\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 22\n      }\n    }, \"None\"), markerOptions)));\n    console.log(merged);\n\n    if (merged == true) {\n      var mergedImagesTemp = [];\n      var markerImagesTemp = []; //Object.entries(Object.keys(samples)).map(([key1,value1]) => { #Prints=0:sample\n\n      Object.entries(samples).map(function (_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 2),\n            key1 = _ref10[0],\n            value1 = _ref10[1];\n\n        console.log(\"___________________________________________________________________________\");\n        console.log(key1);\n        console.log(value1); //Add a counter in here\n        //setMergedImages(Object.entries(value1).map(([key,value]) => {\n        //console.log(key)\n        // console.log(value)\n        //if(key == \"merged_tiff\"){\n\n        var idMergedTiff = \"idTiff\" + key1;\n        var idMergedOverlay = \"idOverlay\" + key1;\n        var idMergedTiffDiv = \"tiffDiv\" + key1;\n        var idMergedOverlayDiv = \"overlayDiv\" + key1; //src/images/StarDist_Segmentation/Sample1-merged_1.png\n        //setMergedImages([...mergedImages, \n\n        mergedImagesTemp.push( /*#__PURE__*/React.createElement(\"div\", {\n          id: key1,\n          hidden: true,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 43\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          id: idMergedTiffDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 29\n          }\n        }, key1, \" merged image channels:\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idMergedTiff,\n          src: require(\"../src/images/\" + value1[\"merged_tiff\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idMergedTiff);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          id: idMergedOverlayDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 29\n          }\n        }, \" \", key1, \" segmented cells:\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idMergedOverlay,\n          src: require(\"../src/images/\" + value1[\"merged_overlays\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idMergedOverlay);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 29\n          }\n        })))); // )}\n        //}))\n        //setMarkerImages(Object.entries(samples[Object.keys(samples)[0]]).map(([key,value]) => {\n\n        Object.entries(value1).map(function (_ref11) {\n          var _ref12 = _slicedToArray(_ref11, 2),\n              key = _ref12[0],\n              value = _ref12[1];\n\n          if (key != \"merged_tiff\" && key != \"merged_overlays\") {\n            var idPreprocessed = \"idPre\" + key1 + key;\n            var idThresholded = \"idThres\" + key1 + key;\n            var idSegmented = \"idSeg\" + key1 + key;\n            var idPreprocessedDiv = \"preDiv\" + key1 + key;\n            var idThresholdedDiv = \"thresDiv\" + key1 + key;\n            var idSegmentedDiv = \"segDiv\" + key1 + key;\n            console.log(idPreprocessedDiv);\n            console.log(value[0][\"preprocessed\"]); //Preprocessed/Sample1-TH-Preprocessed.png\n            //src/images/Preprocessed/Sample1-TH-Preprocessed.png\n\n            markerImagesTemp.push( /*#__PURE__*/React.createElement(\"div\", {\n              id: key,\n              hidden: true,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 47\n              }\n            }, /*#__PURE__*/React.createElement(\"div\", {\n              id: idPreprocessedDiv,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 33\n              }\n            }, \"Preprocessed \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n              class: \"contain\",\n              id: idPreprocessed,\n              src: require(\"../src/images/\" + value[0][\"preprocessed\"]),\n              onClick: function onClick(event) {\n                return displayFullScreen(idPreprocessed);\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 33\n              }\n            })), /*#__PURE__*/React.createElement(\"div\", {\n              id: idThresholdedDiv,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 33\n              }\n            }, \"Thresholded \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n              class: \"contain\",\n              id: idThresholded,\n              src: require(\"../src/images/\" + value[1][\"thresholded\"]),\n              onClick: function onClick(event) {\n                return displayFullScreen(idThresholded);\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 33\n              }\n            })), segmentation ? /*#__PURE__*/React.createElement(\"div\", {\n              id: idSegmentedDiv,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 37\n              }\n            }, \"Segmented \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n              class: \"contain\",\n              id: idSegmented,\n              src: require(\"../src/images/\" + value[2][\"overlays\"]),\n              onClick: function onClick(event) {\n                return displayFullScreen(idSegmented);\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 37\n              }\n            }), /*#__PURE__*/React.createElement(\"p\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 37\n              }\n            }, \"Number of cells detected in image segmentation : \", totalCells[key]), /*#__PURE__*/React.createElement(\"p\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 37\n              }\n            }, \"Number of cells after removing unassigned ones : \", resultingCells[key]), /*#__PURE__*/React.createElement(\"br\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 37\n              }\n            }), /*#__PURE__*/React.createElement(\"br\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 37\n              }\n            })) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n          }\n        });\n      });\n      setMergedImages(mergedImagesTemp);\n      setMarkerImages(markerImagesTemp);\n    }\n    /*setDropDownMarkers(\n        <div class=\"row\">\n            <p>Samples: </p>\n            <select name=\"markerSelector\" id=\"markerSelector\" onChange={event => handleChangeSelect(event, segmentation)}>\n                 <option id=\"optionNoneMarker\" value=\"None\" selected=\"true\">None</option>  \n                 {markerOptions}\n                  \n            </select>          \n            \n        </div>\n        )*/\n\n    /*if(counter == 1){\n        //Map samples and set the images to variable\n        setSampleImages(Object.entries(samples).map(([key,value]) => {\n            let idPreprocessed = \"idPre\" + key\n            let idThresholded = \"idThres\" + key\n            let idSegmented = \"idSeg\" + key\n             let idPreprocessedDiv = \"preDiv\" + key\n            let idThresholdedDiv = \"thresDiv\" + key\n            let idSegmentedDiv = \"segDiv\" + key\n              return([...sampleImages, \n            <div id = {key} hidden>\n                \n                <div id = {idPreprocessedDiv}>\n                    <p>Preprocessed {key}:</p>    \n                    <img class=\"contain\" id ={idPreprocessed} src={require(\"../src/images/\" + value[0][\"preprocessed\"])} onClick= {event => displayFullScreen(idPreprocessed)}></img>\n                </div>\n                <div id = {idThresholdedDiv}>\n                    <p>Thresholded {key}:</p>\n                    <img class=\"contain\" id ={idThresholded} src={require(\"../src/images/\" + value[1][\"thresholded\"])}  onClick= {event => displayFullScreen(idThresholded)}></img>\n                </div>\n                {segmentation ? (\n                    <div id = {idSegmentedDiv}>\n                        <p>Segmented {key}:</p>\n                        <img class=\"contain\" id ={idSegmented} src={require(\"../src/images/\" + value[2][\"overlays\"])}  onClick= {event => displayFullScreen(idSegmented)}></img>  \n                        <p>Number of cells detected in image segmentation : {totalCells[key]}</p> \n                        <p>Number of cells after removing unassigned ones : {resultingCells[key]}</p>       \n                        <br></br>\n                        <br></br>\n                    </div>               \n                ):(<></>)         \n                }   \n            </div>])\n        }))\n    }*/\n\n    /*if(counter > 1){\n        setSampleImages(Object.entries(samples).map(([key,value]) => {\n            console.log(key)\n            console.log(value)\n            \n        }))\n     }*/\n    //Set marker area plot\n\n\n    if (area != \"\") {\n      setAreaPlots( /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 21\n        }\n      }, \"Measurement of marker positive area:\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        id: \"areaPlot\",\n        src: require(\"../src/images/Area/\" + area),\n        onClick: function onClick(event) {\n          return displayFullScreen(\"areaPlot\");\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 21\n        }\n      })));\n    }\n  };\n\n  var displayFullScreen = function displayFullScreen(id) {\n    var elem = document.getElementById(id);\n\n    if (document.fullscreenElement) {\n      document.exitFullscreen();\n    } else {\n      if (elem.requestFullscreen) {\n        elem.requestFullscreen();\n      } else if (elem.webkitRequestFullscreen) {\n        /* Safari */\n        elem.webkitRequestFullscreen();\n      } else if (elem.msRequestFullscreen) {\n        /* IE11 */\n        elem.msRequestFullscreen();\n      }\n    }\n  }; //Handles changes in the sample drop-down list\n\n\n  var handleChangeSelect = function handleChangeSelect(event, segmentation, merged, call) {\n    //displays images/nothing depending of the selected drop-down value\n    if (merged == true && event.target.value != \"None\" && call == \"sampleDropDown\") {\n      document.getElementById(\"markerSelector\").value = \"None\";\n      document.getElementById(\"markerSelector\").disabled = false;\n      console.log(event.target.value);\n      /*let idMergedTiffDiv = \"tiffDiv\" + key1\n      let idMergedOverlayDiv = \"overlayDiv\" + key1*/\n\n      var idMergedDiv = \"tiffDiv\" + event.target.value;\n      var idOverlayDiv = \"overlayDiv\" + event.target.value;\n      console.log(idMergedDiv);\n      console.log(idOverlayDiv);\n      document.getElementById(idMergedDiv).style.display = \"block\";\n      document.getElementById(idOverlayDiv).style.display = \"block\"; //Hides the previously selected sample\n\n      if (sample != \"\" && sample != \"None\") {\n        document.getElementById(sample).style.display = \"none\";\n      }\n\n      sample = event.target.value;\n    } else if (merged == true && event.target.value == \"None\" && call == \"sampleDropDown\") {\n      console.log(event.target.value);\n      document.getElementById(\"markerSelector\").value = \"None\";\n      document.getElementById(\"markerSelector\").disabled = true;\n    } else if (merged == true && event.target.value != \"None\" && call == \"markerDropDown\") {\n      console.log(event.target.value);\n      var currentSample = document.getElementById(\"sampleSelector\").value;\n      console.log(currentSample);\n      var idPreprocessedDiv = \"preDiv\" + currentSample + event.target.value;\n      var idThresholdedDiv = \"thresDiv\" + currentSample + event.target.value;\n      var idSegmentedDiv = \"segDiv\" + currentSample + event.target.value;\n      console.log(idPreprocessedDiv);\n      document.getElementById(idPreprocessedDiv).style.display = \"block\";\n      document.getElementById(idThresholdedDiv).style.display = \"block\";\n      document.getElementById(idSegmentedDiv).style.display = \"block\";\n    }\n\n    if (event.target.value != \"None\") {\n      document.getElementById(event.target.value).style.display = \"block\";\n    } //let idSegmentedDiv = \"segDiv\" + event.target.value\n\n    /*console.log(\"Segmentation : \", segmentation)\n    console.log(totalCells)\n    console.log(resultingCells)*/\n\n    /*if(event.target.value == \"None\"){     \n        setCheckbox(\"\")  \n    }\n    else{\n        //IF the checkbox exists it is checked by default\n        if(document.getElementById(\"preprocessedImgCheck\") != null){\n            document.getElementById(\"preprocessedImgCheck\").checked = true;    \n        }\n        if(document.getElementById(\"thresholdImgCheck\") != null){\n            document.getElementById(\"thresholdImgCheck\").checked = true; \n        }\n        if(document.getElementById(\"segmentedImgCheck\") != null){\n            document.getElementById(\"segmentedImgCheck\").checked = true;    \n        }        \n         //If the image is hidden make them visible\n        document.getElementById(idPreprocessedDiv).style.display = \"block\"\n        document.getElementById(idThresholdedDiv).style.display = \"block\"\n        if(segmentation == true){\n            document.getElementById(idSegmentedDiv).style.display = \"block\"\n        }*/\n\n    /*setCheckbox(\n    <div class=\"row\">\n        <div class = \"colQC-1\">\n            <div class=\"checkbox\">    \n                <p>Preprocessed image: </p>\n                <input type = \"checkbox\" id=\"preprocessedImgCheck\" onClick={()=>handleCheckbox(idPreprocessedDiv, \"preprocessedImgCheck\")} defaultChecked/>                \n            </div>\n        </div>\n        <div class = \"colQC-2\">\n            <div class=\"checkbox\">    \n                <p>Thresholded image: </p>\n                <input type = \"checkbox\" id=\"thresholdImgCheck\" onClick={()=>handleCheckbox(idThresholdedDiv, \"thresholdImgCheck\")} defaultChecked/>                \n            </div>\n        </div>\n               \n        {segmentation ? (\n                  <div class = \"colQC-3\">\n                  <div class=\"checkbox\">    \n                      <p>Segmented image: </p>\n                      <input type = \"checkbox\" id=\"segmentedImgCheck\" onClick={()=>handleCheckbox(idSegmentedDiv, \"segmentedImgCheck\")} defaultChecked/>                \n                  </div>         \n               </div>\n        ):(<></>)         \n        }         \n    </div>    \n    )    \n     \n    } \n    if(event.target.value != \"None\"){\n    document.getElementById(event.target.value).style.display = \"block\"\n    }\n    //Hides images depending of the value\n    if(sample != \"\" && sample != \"None\"){\n    document.getElementById(sample).style.display = \"none\"\n    }\n    sample = event.target.value    */\n\n  };\n\n  var handleCheckbox = function handleCheckbox(idDiv, idCb) {\n    var elem = document.getElementById(idDiv); //Hide element\n\n    if (window.getComputedStyle(elem).display == \"block\") {\n      elem.style.display = \"none\";\n      document.getElementById(idCb).defaultChecked = false;\n    } //Display element\n    else if (window.getComputedStyle(elem).display == \"none\") {\n      elem.style.display = \"block\";\n      document.getElementById(idCb).defaultChecked = true;\n    }\n  }; //Display HTML to the user\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    class: \"resultsForm\",\n    id: \"resultsForm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"load\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 21\n    }\n  }, \"Running SIMPLI\")), /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"results\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 21\n    }\n  }, \"SIMPLI results\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"resultsButton\",\n    type: \"button\",\n    onClick: function onClick(event) {\n      return displayResults();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 21\n    }\n  }, \"Display results\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"colQC-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 25\n    }\n  }, dropDownSamples), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"colQC-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 25\n    }\n  }, dropDownMarkers), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"colQC-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 25\n    }\n  }, checkbox)), markerImages, mergedImages, areaPlots)));\n};\n\nexport default GetResults;","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","axios","Table","GetResults","plotPaths","setPlotPaths","areaPlots","setAreaPlots","sampleImages","setSampleImages","dropDownSamples","setDropDownSamples","dropDownMarkers","setDropDownMarkers","checkbox","setCheckbox","displaySegmentationCb","setDisplaySegmentationCb","preprocessedCb","setPreprocessedCb","firstCall","setFirstCall","totalCells","setTotalCells","resultingCells","setResultingCells","markerImages","setMarkerImages","mergedImages","setMergedImages","sample","displayResults","document","getElementById","style","display","get","then","response","data","console","log","samples","area","displayImages","segmentation","merged","counter","i","Object","entries","keys","map","key","value","includes","sampleOptions","markerOptions","event","handleChangeSelect","mergedImagesTemp","markerImagesTemp","key1","value1","idMergedTiff","idMergedOverlay","idMergedTiffDiv","idMergedOverlayDiv","push","require","displayFullScreen","idPreprocessed","idThresholded","idSegmented","idPreprocessedDiv","idThresholdedDiv","idSegmentedDiv","id","elem","fullscreenElement","exitFullscreen","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","call","target","disabled","idMergedDiv","idOverlayDiv","currentSample","handleCheckbox","idDiv","idCb","window","getComputedStyle","defaultChecked"],"sources":["/home/ernohanninen/simpli-app/src/getResults.js"],"sourcesContent":["import React,  { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport Table from \"./sample_table.js\";\n\n\n\nconst GetResults = () => { \n    \n    //Variables\n    const [plotPaths, setPlotPaths] = useState(\"\")\n    const [areaPlots, setAreaPlots] = useState(\"\")\n    const [sampleImages, setSampleImages] = useState(\"\")\n\n    const [dropDownSamples, setDropDownSamples] = useState(\"\")\n    const [dropDownMarkers, setDropDownMarkers] = useState(\"\")\n    \n    const [checkbox, setCheckbox] = useState(\"\")\n    const [displaySegmentationCb, setDisplaySegmentationCb] = useState(false)\n    const [preprocessedCb, setPreprocessedCb] = useState(false)\n    const [firstCall,setFirstCall] = useState(true)\n    const [totalCells, setTotalCells] = useState({})\n    const [resultingCells, setResultingCells] = useState({})\n    const [markerImages, setMarkerImages] = useState(\"\")\n    const [mergedImages, setMergedImages] = useState([])\n\n    \n    //const [displaySegmented, setDisplaySegmented] = useState(true)\n\n    var sample = \"\"\n\n    //Function which get the images from backend\n    const displayResults = () => {\n        document.getElementById(\"resultsButton\").style.display = \"none\"\n        axios.get(\"/fetchResults\")\n        .then(function(response){\n           setTotalCells(response.data[1])\n           setResultingCells(response.data[2])\n           console.log(\"PALUU ARVO\")\n           console.log(response.data)\n\n           console.log(response.data[1])\n           console.log(response.data[2])\n           //Extracting values from dictionary\n           let samples = response.data[0][\"samples\"]\n           let area = response.data[0][\"area\"]\n           console.log(area)\n           console.log(samples)\n        \n           setPlotPaths(area)    \n           displayImages(area, samples, response.data[1], response.data[2]) //Calling function which displays the images         \n        })\n    }\n    //Function which displays the images to the user\n    const displayImages = (area, samples, totalCells, resultingCells) => { \n\n        let segmentation = false\n        let merged = false\n\n        let counter = 0\n\n        let i = Object.entries(samples[Object.keys(samples)[0]]).map(([key,value]) => {\n            console.log(key)\n            console.log(value)\n            if(Object.keys(value).includes(\"overlays\")){\n                console.log(\"SEGMENTATION\")\n                segmentation = true\n            }\n            /*if(Object.keys(value).includes(\"preprocessed\")){\n                counter += 1\n            }*/\n        })\n\n        segmentation = true\n        Object.entries(samples).map(([key,value]) => {\n            console.log(key)\n            console.log(value)\n\n            if(\"merged_overlays\" == key){\n                console.log(\"___________________________________--\")\n                merged = true\n            }\n        })\n\n        /*if(\"merged_overlays\" in samples[0]){\n            console.log(\"___________________________________--\")\n\n            merged = true\n        }*/\n        //var markerOptions = []\n        var sampleOptions = Object.entries(Object.keys(samples)).map(([key,value]) => \n            <option value={value}>{value}</option>\n        )\n\n       /* Object.entries(Object.keys(samples)).map(([key,value]) => {\n            markerOptions.push(Object.entries(samples[Object.keys(samples)[0]]).map(([key1,value1]) => {\n                if(key1 != \"merged_tiff\" && key1 != \"merged_overlays\"){\n                    return <option value={value + key1}>{key1}</option>\n                }\n            }))\n\n        })*/\n\n       var markerOptions = Object.entries(samples[Object.keys(samples)[0]]).map(([key,value]) => {\n            console.log(key)\n            if(key != \"merged_tiff\" && key != \"merged_overlays\"){\n                return <option value={key}>{key}</option>\n            }\n        })\n       \n            \n\n        \n\n        /*var markerOptions = Object.entries(samples).map(([key,value]) => \n        <option value={value}>{value}</option>\n        )*/\n\n\n\n        /*if(counter > 1){\n            var sample_markers = []\n            Object.entries(samples[Object.keys(samples)[0]]).map(([key,value]) => {\n                console.log(value)\n                if(Object.keys(value).includes(\"preprocessed\")){\n                    let sample_name = value[Object.keys(value)]\n                    console.log(sample_name)\n                    sample_name = sample_name.split(\"/\")[1]\n                    console.log(sample_name)\n                    sample_name = sample_name.split(/(.*)-/)[1]\n                    console.log(sample_name)\n                    if(sample_name != \"ALL\"){\n                        sample_markers.push(sample_name)\n                    }\n                    \n                }\n                else{return}\n            })\n            samples = sample_markers\n        }*/\n        \n\n        //Get the values for drop-down list\n        /*if(counter == 1){\n            var optionItems = Object.entries(samples).map(([key,value]) => \n            <option value={key}>{key}</option>\n        )}\n        if(counter > 1){\n            var optionItems = Object.entries(samples).map(([key,value]) => \n            <option value={value}>{value}</option>\n        )}*/\n        \n        merged = true\n        \n        //Create the dropdown list\n        setDropDownSamples(\n        <div class=\"row\">\n            <p>Samples: </p>\n            <select name=\"sampleSelector\" id=\"sampleSelector\" onChange={event => handleChangeSelect(event, segmentation, merged, \"sampleDropDown\")}>\n                 <option id=\"optionNoneSample\" value=\"None\" selected=\"true\">None</option>  \n                 {sampleOptions}\n                  \n            </select>          \n            \n        </div>\n        )\n\n        setDropDownMarkers(\n            <div class=\"row\">\n                <p>Markers: </p>\n                <select name=\"markerSelector\" id=\"markerSelector\" onChange={event => handleChangeSelect(event, segmentation, merged, \"markerDropDown\")} disabled>\n                     <option id=\"optionNonemarker\" value=\"None\" selected=\"true\">None</option>  \n                     {markerOptions}\n                      \n                </select>          \n                \n            </div>\n            )\n        console.log(merged)\n        if(merged == true){\n            let mergedImagesTemp = []\n            let markerImagesTemp = []\n            //Object.entries(Object.keys(samples)).map(([key1,value1]) => { #Prints=0:sample\n            Object.entries(samples).map(([key1,value1]) => {\n                console.log(\"___________________________________________________________________________\")\n                console.log(key1)\n                console.log(value1)\n\n                //Add a counter in here\n                //setMergedImages(Object.entries(value1).map(([key,value]) => {\n                //console.log(key)\n               // console.log(value)\n                //if(key == \"merged_tiff\"){\n                let idMergedTiff = \"idTiff\" + key1\n                let idMergedOverlay = \"idOverlay\" + key1\n                let idMergedTiffDiv = \"tiffDiv\" + key1\n                let idMergedOverlayDiv = \"overlayDiv\" + key1\n                //src/images/StarDist_Segmentation/Sample1-merged_1.png\n                    \n                //setMergedImages([...mergedImages, \n                    mergedImagesTemp.push(<div id = {key1} hidden>\n                        \n                        <div id = {idMergedTiffDiv}>\n                            <p>{key1} merged image channels:</p>    \n                            <img class=\"contain\" id ={idMergedTiff} src={require(\"../src/images/\" + value1[\"merged_tiff\"])} onClick= {event => displayFullScreen(idMergedTiff)}></img>\n                        </div>\n                        <div id = {idMergedOverlayDiv}>\n                            <p> {key1} segmented cells:</p>\n                            <img class=\"contain\" id ={idMergedOverlay} src={require(\"../src/images/\" + value1[\"merged_overlays\"])}  onClick= {event => displayFullScreen(idMergedOverlay)}></img>\n                        </div>\n                        \n                    </div>)\n\n                   // )}\n\n                    //}))\n\n                    \n\n                    //setMarkerImages(Object.entries(samples[Object.keys(samples)[0]]).map(([key,value]) => {\n                Object.entries(value1).map(([key,value]) => {\n                    if(key != \"merged_tiff\" && key != \"merged_overlays\"){\n                        let idPreprocessed = \"idPre\" + key1 + key\n                        let idThresholded = \"idThres\" + key1+ key\n                        let idSegmented = \"idSeg\" + key1+ key\n        \n                        let idPreprocessedDiv = \"preDiv\" + key1+ key\n                        let idThresholdedDiv = \"thresDiv\"+ key1 + key\n                        let idSegmentedDiv = \"segDiv\"+ key1 + key\n                        console.log(idPreprocessedDiv)\n                        console.log(value[0][\"preprocessed\"])\n                        //Preprocessed/Sample1-TH-Preprocessed.png\n                        //src/images/Preprocessed/Sample1-TH-Preprocessed.png\n                        \n                        markerImagesTemp.push(<div id = {key} hidden>\n                            <div id = {idPreprocessedDiv}>\n                                <p>Preprocessed {key}:</p>    \n                                <img class=\"contain\" id ={idPreprocessed} src={require(\"../src/images/\" + value[0][\"preprocessed\"])} onClick= {event => displayFullScreen(idPreprocessed)}></img>\n                            </div>\n                            <div id = {idThresholdedDiv}>\n                                <p>Thresholded {key}:</p>\n                                <img class=\"contain\" id ={idThresholded} src={require(\"../src/images/\" + value[1][\"thresholded\"])}  onClick= {event => displayFullScreen(idThresholded)}></img>\n                            </div>\n                            {segmentation ? (\n                                <div id = {idSegmentedDiv}>\n                                    <p>Segmented {key}:</p>\n                                    <img class=\"contain\" id ={idSegmented} src={require(\"../src/images/\" + value[2][\"overlays\"])}  onClick= {event => displayFullScreen(idSegmented)}></img>  \n                                    <p>Number of cells detected in image segmentation : {totalCells[key]}</p> \n                                    <p>Number of cells after removing unassigned ones : {resultingCells[key]}</p>       \n                                    <br></br>\n                                    <br></br>\n                                </div>               \n                            ):(<></>)         \n                            }   \n                        </div>)\n                                    \n        \n                            }\n        \n                            })\n                \n            })\n\n            setMergedImages(mergedImagesTemp)\n            setMarkerImages(markerImagesTemp)\n                }\n\n                    \n\n                    \n    \n    \n                    \n\n\n          \n\n        /*setDropDownMarkers(\n            <div class=\"row\">\n                <p>Samples: </p>\n                <select name=\"markerSelector\" id=\"markerSelector\" onChange={event => handleChangeSelect(event, segmentation)}>\n                     <option id=\"optionNoneMarker\" value=\"None\" selected=\"true\">None</option>  \n                     {markerOptions}\n                      \n                </select>          \n                \n            </div>\n            )*/\n         \n        /*if(counter == 1){\n            //Map samples and set the images to variable\n            setSampleImages(Object.entries(samples).map(([key,value]) => {\n                let idPreprocessed = \"idPre\" + key\n                let idThresholded = \"idThres\" + key\n                let idSegmented = \"idSeg\" + key\n\n                let idPreprocessedDiv = \"preDiv\" + key\n                let idThresholdedDiv = \"thresDiv\" + key\n                let idSegmentedDiv = \"segDiv\" + key\n\n\n                return([...sampleImages, \n                <div id = {key} hidden>\n                    \n                    <div id = {idPreprocessedDiv}>\n                        <p>Preprocessed {key}:</p>    \n                        <img class=\"contain\" id ={idPreprocessed} src={require(\"../src/images/\" + value[0][\"preprocessed\"])} onClick= {event => displayFullScreen(idPreprocessed)}></img>\n                    </div>\n                    <div id = {idThresholdedDiv}>\n                        <p>Thresholded {key}:</p>\n                        <img class=\"contain\" id ={idThresholded} src={require(\"../src/images/\" + value[1][\"thresholded\"])}  onClick= {event => displayFullScreen(idThresholded)}></img>\n                    </div>\n                    {segmentation ? (\n                        <div id = {idSegmentedDiv}>\n                            <p>Segmented {key}:</p>\n                            <img class=\"contain\" id ={idSegmented} src={require(\"../src/images/\" + value[2][\"overlays\"])}  onClick= {event => displayFullScreen(idSegmented)}></img>  \n                            <p>Number of cells detected in image segmentation : {totalCells[key]}</p> \n                            <p>Number of cells after removing unassigned ones : {resultingCells[key]}</p>       \n                            <br></br>\n                            <br></br>\n                        </div>               \n                    ):(<></>)         \n                    }   \n                </div>])\n            }))\n        }*/\n\n        /*if(counter > 1){\n            setSampleImages(Object.entries(samples).map(([key,value]) => {\n                console.log(key)\n                console.log(value)\n                \n            }))\n\n        }*/\n        \n        //Set marker area plot\n        if(area != \"\"){\n            setAreaPlots(\n                <div>\n                    <b>Measurement of marker positive area:</b>\n                    <br></br>\n                    <img id =\"areaPlot\" src={require(\"../src/images/Area/\" + area)} onClick= {event => displayFullScreen(\"areaPlot\")}></img>\n                </div>\n            )\n        }\n        \n    } \n\n\n    const displayFullScreen = (id) => { \n        let elem = document.getElementById(id)\n        if(document.fullscreenElement){\n            document.exitFullscreen()\n        }\n        else{\n            if (elem.requestFullscreen) {\n                elem.requestFullscreen();\n              } else if (elem.webkitRequestFullscreen) { /* Safari */\n                elem.webkitRequestFullscreen();\n              } else if (elem.msRequestFullscreen) { /* IE11 */\n                elem.msRequestFullscreen();\n              }\n        }\n        \n    }\n\n    //Handles changes in the sample drop-down list\n    const handleChangeSelect = (event, segmentation, merged, call) => { \n        //displays images/nothing depending of the selected drop-down value\n\n        if(merged == true && event.target.value!=\"None\" && call == \"sampleDropDown\"){\n            document.getElementById(\"markerSelector\").value = \"None\"\n            document.getElementById(\"markerSelector\").disabled = false\n            \n            console.log(event.target.value)\n            /*let idMergedTiffDiv = \"tiffDiv\" + key1\n            let idMergedOverlayDiv = \"overlayDiv\" + key1*/\n            let idMergedDiv = \"tiffDiv\" + event.target.value\n            let idOverlayDiv = \"overlayDiv\" + event.target.value\n            console.log(idMergedDiv)\n            console.log(idOverlayDiv)\n\n            document.getElementById(idMergedDiv).style.display = \"block\"\n            document.getElementById(idOverlayDiv).style.display = \"block\"\n\n            //Hides the previously selected sample\n            if(sample != \"\" && sample != \"None\"){\n                document.getElementById(sample).style.display = \"none\"\n            }\n            sample = event.target.value\n        }\n        else if(merged == true && event.target.value==\"None\" && call == \"sampleDropDown\"){\n            \n            console.log(event.target.value)\n            document.getElementById(\"markerSelector\").value = \"None\"\n            document.getElementById(\"markerSelector\").disabled = true\n        \n        }\n        else if(merged == true && event.target.value!=\"None\" && call == \"markerDropDown\"){\n            console.log(event.target.value)\n\n            let currentSample = document.getElementById(\"sampleSelector\").value\n            console.log(currentSample)\n            let idPreprocessedDiv = \"preDiv\" + currentSample + event.target.value\n            let idThresholdedDiv = \"thresDiv\"+ currentSample + event.target.value\n            let idSegmentedDiv = \"segDiv\" + currentSample+ event.target.value\n\n            console.log(idPreprocessedDiv)\n\n            document.getElementById(idPreprocessedDiv).style.display = \"block\"\n            document.getElementById(idThresholdedDiv).style.display = \"block\"\n            document.getElementById(idSegmentedDiv).style.display = \"block\"\n        }\n\n        if(event.target.value != \"None\"){\n            document.getElementById(event.target.value).style.display = \"block\"\n        }\n\n       \n\n\n        //let idSegmentedDiv = \"segDiv\" + event.target.value\n\n        /*console.log(\"Segmentation : \", segmentation)\n        console.log(totalCells)\n        console.log(resultingCells)*/\n        \n        /*if(event.target.value == \"None\"){     \n            setCheckbox(\"\")  \n        }\n        else{\n            //IF the checkbox exists it is checked by default\n            if(document.getElementById(\"preprocessedImgCheck\") != null){\n                document.getElementById(\"preprocessedImgCheck\").checked = true;    \n            }\n            if(document.getElementById(\"thresholdImgCheck\") != null){\n                document.getElementById(\"thresholdImgCheck\").checked = true; \n            }\n            if(document.getElementById(\"segmentedImgCheck\") != null){\n                document.getElementById(\"segmentedImgCheck\").checked = true;    \n            }        \n\n            //If the image is hidden make them visible\n            document.getElementById(idPreprocessedDiv).style.display = \"block\"\n            document.getElementById(idThresholdedDiv).style.display = \"block\"\n            if(segmentation == true){\n                document.getElementById(idSegmentedDiv).style.display = \"block\"\n            }*/\n\n\n            /*setCheckbox(\n            <div class=\"row\">\n                <div class = \"colQC-1\">\n                    <div class=\"checkbox\">    \n                        <p>Preprocessed image: </p>\n                        <input type = \"checkbox\" id=\"preprocessedImgCheck\" onClick={()=>handleCheckbox(idPreprocessedDiv, \"preprocessedImgCheck\")} defaultChecked/>                \n                    </div>\n                </div>\n                <div class = \"colQC-2\">\n                    <div class=\"checkbox\">    \n                        <p>Thresholded image: </p>\n                        <input type = \"checkbox\" id=\"thresholdImgCheck\" onClick={()=>handleCheckbox(idThresholdedDiv, \"thresholdImgCheck\")} defaultChecked/>                \n                    </div>\n                </div>\n                       \n                {segmentation ? (\n                          <div class = \"colQC-3\">\n                          <div class=\"checkbox\">    \n                              <p>Segmented image: </p>\n                              <input type = \"checkbox\" id=\"segmentedImgCheck\" onClick={()=>handleCheckbox(idSegmentedDiv, \"segmentedImgCheck\")} defaultChecked/>                \n                          </div>         \n\n                      </div>\n                ):(<></>)         \n                }         \n            </div>    \n            )    \n\n            \n        } \n\n        if(event.target.value != \"None\"){\n            document.getElementById(event.target.value).style.display = \"block\"\n        }\n        //Hides images depending of the value\n        if(sample != \"\" && sample != \"None\"){\n            document.getElementById(sample).style.display = \"none\"\n        }\n        sample = event.target.value    */\n        \n    }\n\n    const handleCheckbox = (idDiv, idCb) => {\n\n        var elem = document.getElementById(idDiv)\n        //Hide element\n        if(window.getComputedStyle(elem).display == \"block\"){\n            elem.style.display = \"none\"\n            document.getElementById(idCb).defaultChecked = false;\n        }\n        //Display element\n        else if(window.getComputedStyle(elem).display == \"none\"){\n            elem.style.display =\"block\"\n            document.getElementById(idCb).defaultChecked = true;\n\n        }\n\n    }\n \n    //Display HTML to the user\n    return(\n        <div>\n            <form class=\"resultsForm\" id=\"resultsForm\">\n                <div hidden id=\"load\">\n                    <p>Running SIMPLI</p>         \n                </div>\n                \n                <div hidden id=\"results\">  \n                    <b>SIMPLI results</b>  \n                    <br></br>\n                    <button id=\"resultsButton\" type=\"button\" onClick={event => displayResults()}>Display results</button>\n                    <div class = \"row\">\n                        <div class = \"colQC-1\">\n                            {dropDownSamples}     \n                        </div>\n                        <div class = \"colQC-2\">\n                            {dropDownMarkers}     \n                        </div>\n                        <div class = \"colQC-3\">\n                            {checkbox}                     \n                        </div>\n                    </div>\n                        \n                        \n                    {markerImages}\n                    {mergedImages}\n                    {areaPlots}\n                </div>\n            </form>\n        </div>\n    )\n}\nexport default GetResults;"],"mappings":"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"},"metadata":{},"sourceType":"module"}