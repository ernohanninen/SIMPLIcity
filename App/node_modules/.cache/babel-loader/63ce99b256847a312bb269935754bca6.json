{"ast":null,"code":"import _slicedToArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli-app/src/getMetadata.js\";\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport GetSettings from \"./getSettings.js\";\nvar GetMetadata = forwardRef(function (props, ref, data) {\n  var _useStatef = useStatef,\n      _useStatef2 = _slicedToArray(_useStatef, 2),\n      skip_area = _useStatef2[0],\n      setSkip_area = _useStatef2[1];\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      skip_sd_segmentation = _useState2[0],\n      setSkip_sd_segmentation = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      skip_cell_type_identification = _useState4[0],\n      setSkip_cell_type_identification = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      skip_cell_clustering = _useState6[0],\n      setSkip_cell_clustering = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      skip_cell_thresholding = _useState8[0],\n      setSkip_cell_thresholding = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      skip_homotypic_interactions = _useState10[0],\n      setSkip_homotypic_interactions = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      skip_heterotypic_interactions = _useState12[0],\n      setSkip_heterotypic_interactions = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      skip_permuted_interactions = _useState14[0],\n      setSkip_permuted_interactions = _useState14[1];\n\n  useImperativeHandle(ref, function () {\n    return {\n      getProcesses: function getProcesses() {\n        axios.get(\"/submitSettings\").then(function (response) {\n          console.log(response.data); //Parse values from response data to boolean format\n\n          for (var prop in response.data) {\n            if (response.data.hasOwnProperty(prop)) {\n              response.data[prop] = response.data[prop] == 'true' || response.data[prop] == 'false' ? response.data[prop] === 'true' : response.data[prop];\n            }\n          }\n\n          console.log(response.data.skip_area);\n          setSkip_area(response.data.skip_area);\n          console.log(\"real\", skip_area); //console.log(skip_area)\n          //console.log(response.data.skip_area)\n        });\n      },\n      submitMetadata: function submitMetadata() {\n        console.log(\"metadata\");\n        console.log(\"getMETADATA\");\n      }\n    };\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GetSettings, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }));\n});\nexport default GetMetadata;","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","axios","GetSettings","GetMetadata","props","ref","data","useStatef","skip_area","setSkip_area","skip_sd_segmentation","setSkip_sd_segmentation","skip_cell_type_identification","setSkip_cell_type_identification","skip_cell_clustering","setSkip_cell_clustering","skip_cell_thresholding","setSkip_cell_thresholding","skip_homotypic_interactions","setSkip_homotypic_interactions","skip_heterotypic_interactions","setSkip_heterotypic_interactions","skip_permuted_interactions","setSkip_permuted_interactions","getProcesses","get","then","response","console","log","prop","hasOwnProperty","submitMetadata"],"sources":["/home/ernohanninen/simpli-app/src/getMetadata.js"],"sourcesContent":["import React,  { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport GetSettings from \"./getSettings.js\"\n\n\nconst GetMetadata = forwardRef((props, ref, data)=>{\n\n    const [skip_area, setSkip_area] = useStatef\n    const [skip_sd_segmentation, setSkip_sd_segmentation] = useState(false)\n    const [skip_cell_type_identification, setSkip_cell_type_identification] = useState(false)\n    const [skip_cell_clustering, setSkip_cell_clustering] = useState(false)\n    const [skip_cell_thresholding, setSkip_cell_thresholding] = useState(false)\n    const [skip_homotypic_interactions, setSkip_homotypic_interactions] = useState(false)\n    const [skip_heterotypic_interactions, setSkip_heterotypic_interactions] = useState(false)\n    const [skip_permuted_interactions, setSkip_permuted_interactions] = useState(false)\n\n    useImperativeHandle(ref, ()=>({\n        getProcesses(){\n            axios.get(\"/submitSettings\")\n            .then(function(response){\n                console.log(response.data)\n                //Parse values from response data to boolean format\n                for (let prop in response.data) {\n                    if (response.data.hasOwnProperty(prop)) {\n                        response.data[prop] = (response.data[prop] == 'true' || response.data[prop] == 'false')? response.data[prop] === 'true': response.data[prop] ;\n                    }\n                } \n                console.log(response.data.skip_area)\n                setSkip_area(response.data.skip_area)\n                console.log(\"real\", skip_area)\n                //console.log(skip_area)\n                //console.log(response.data.skip_area)\n            })\n        },\n        submitMetadata(){\n\n            console.log(\"metadata\")\n            \n\n            console.log(\"getMETADATA\")\n        }\n    }))\n    return(\n        <div>\n            <GetSettings />\n    \n        </div>\n    \n        )\n})\nexport default GetMetadata;\n"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAiBC,QAAjB,EAA2BC,UAA3B,EAAuCC,mBAAvC,QAAkE,OAAlE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AAGA,IAAMC,WAAW,GAAGJ,UAAU,CAAC,UAACK,KAAD,EAAQC,GAAR,EAAaC,IAAb,EAAoB;EAAA,iBAEbC,SAFa;EAAA;EAAA,IAExCC,SAFwC;EAAA,IAE7BC,YAF6B;;EAAA,gBAGSX,QAAQ,CAAC,KAAD,CAHjB;EAAA;EAAA,IAGxCY,oBAHwC;EAAA,IAGlBC,uBAHkB;;EAAA,iBAI2Bb,QAAQ,CAAC,KAAD,CAJnC;EAAA;EAAA,IAIxCc,6BAJwC;EAAA,IAITC,gCAJS;;EAAA,iBAKSf,QAAQ,CAAC,KAAD,CALjB;EAAA;EAAA,IAKxCgB,oBALwC;EAAA,IAKlBC,uBALkB;;EAAA,iBAMajB,QAAQ,CAAC,KAAD,CANrB;EAAA;EAAA,IAMxCkB,sBANwC;EAAA,IAMhBC,yBANgB;;EAAA,iBAOuBnB,QAAQ,CAAC,KAAD,CAP/B;EAAA;EAAA,IAOxCoB,2BAPwC;EAAA,IAOXC,8BAPW;;EAAA,kBAQ2BrB,QAAQ,CAAC,KAAD,CARnC;EAAA;EAAA,IAQxCsB,6BARwC;EAAA,IAQTC,gCARS;;EAAA,kBASqBvB,QAAQ,CAAC,KAAD,CAT7B;EAAA;EAAA,IASxCwB,0BATwC;EAAA,IASZC,6BATY;;EAW/CvB,mBAAmB,CAACK,GAAD,EAAM;IAAA,OAAK;MAC1BmB,YAD0B,0BACZ;QACVvB,KAAK,CAACwB,GAAN,CAAU,iBAAV,EACCC,IADD,CACM,UAASC,QAAT,EAAkB;UACpBC,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACrB,IAArB,EADoB,CAEpB;;UACA,KAAK,IAAIwB,IAAT,IAAiBH,QAAQ,CAACrB,IAA1B,EAAgC;YAC5B,IAAIqB,QAAQ,CAACrB,IAAT,CAAcyB,cAAd,CAA6BD,IAA7B,CAAJ,EAAwC;cACpCH,QAAQ,CAACrB,IAAT,CAAcwB,IAAd,IAAuBH,QAAQ,CAACrB,IAAT,CAAcwB,IAAd,KAAuB,MAAvB,IAAiCH,QAAQ,CAACrB,IAAT,CAAcwB,IAAd,KAAuB,OAAzD,GAAmEH,QAAQ,CAACrB,IAAT,CAAcwB,IAAd,MAAwB,MAA3F,GAAmGH,QAAQ,CAACrB,IAAT,CAAcwB,IAAd,CAAzH;YACH;UACJ;;UACDF,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACrB,IAAT,CAAcE,SAA1B;UACAC,YAAY,CAACkB,QAAQ,CAACrB,IAAT,CAAcE,SAAf,CAAZ;UACAoB,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBrB,SAApB,EAVoB,CAWpB;UACA;QACH,CAdD;MAeH,CAjByB;MAkB1BwB,cAlB0B,4BAkBV;QAEZJ,OAAO,CAACC,GAAR,CAAY,UAAZ;QAGAD,OAAO,CAACC,GAAR,CAAY,aAAZ;MACH;IAxByB,CAAL;EAAA,CAAN,CAAnB;EA0BA,oBACI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI,oBAAC,WAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ,CADJ;AAOH,CA5C6B,CAA9B;AA6CA,eAAe1B,WAAf"},"metadata":{},"sourceType":"module"}