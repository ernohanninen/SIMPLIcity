{"ast":null,"code":"import _defineProperty from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli-app/src/getMetadata.js\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nimport React, { useState, forwardRef, useImperativeHandle, useRef } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport GetResults from \"./getResults.js\"; //If no markers prevent user to go forward add new textbox\n//able user input non unique markers\n//adding custom markers doesn't work\n//Add random color generator for mask input\n//Using boolean it should be possible to check wether the input is filled before adding more mask metadata\n//If there is no marker the axios posts still sends data\n//Even if the area is unchecked the axios posts the data that is submitted on the main page (CHECK THAT THIS IS FIXED)\n//Delete existing marker from marker list\n//Check that the colors for cell_masking_metadata are okay\n\nvar GetMetadata = forwardRef(function (props, ref) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      renderArea = _useState2[0],\n      setRenderArea = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      renderMasking = _useState4[0],\n      setRenderMasking = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      allMarkers = _useState6[0],\n      setAllMarkes = _useState6[1];\n\n  var _useState7 = useState([{}]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      markersDict = _useState8[0],\n      setMarkersDict = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      counter = _useState10[0],\n      setCounter = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      markerKeyCounter = _useState12[0],\n      setMarkerKeyCounter = _useState12[1];\n\n  var markerTemp = {\n    marker: \"\",\n    mainMarker: \"\"\n  };\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      maskCounter = _useState14[0],\n      setMaskCounter = _useState14[1];\n\n  var _useState15 = useState(0),\n      _useState16 = _slicedToArray(_useState15, 2),\n      maskKeyCounter = _useState16[0],\n      setMaskKeyCounter = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      newMask = _useState18[0],\n      setNewMask = _useState18[1];\n\n  var maskTemp = {\n    cellType: \"\",\n    thresholdMarker: \"\",\n    thresholdValue: \"\",\n    color: \"\"\n  };\n  var inputFields = [];\n\n  var _useState19 = useState(\"\"),\n      _useState20 = _slicedToArray(_useState19, 2),\n      analysisReady = _useState20[0],\n      setAnalysisReady = _useState20[1];\n\n  var _useState21 = useState([]),\n      _useState22 = _slicedToArray(_useState21, 2),\n      originalMarkers = _useState22[0],\n      setOriginalMarkers = _useState22[1]; //This list keeps in track about the markers that the user inputted\n\n\n  var _useState23 = useState(\"\"),\n      _useState24 = _slicedToArray(_useState23, 2),\n      markerTextBox = _useState24[0],\n      setMarkerTextBox = _useState24[1];\n\n  var _useState25 = useState(\"\"),\n      _useState26 = _slicedToArray(_useState25, 2),\n      maskingTextBox = _useState26[0],\n      setMaskingTextBox = _useState26[1];\n\n  var _useState27 = useState([{}]),\n      _useState28 = _slicedToArray(_useState27, 2),\n      maskDict = _useState28[0],\n      setMaskDict = _useState28[1];\n\n  var _useState29 = useState(\"\"),\n      _useState30 = _slicedToArray(_useState29, 2),\n      errorMessageArea = _useState30[0],\n      setErrorMessageArea = _useState30[1];\n\n  useImperativeHandle(ref, function () {\n    return {\n      getProcesses: function getProcesses() {\n        console.log(\"AXIOS\");\n\n        function getData() {\n          return _getData.apply(this, arguments);\n        }\n\n        function _getData() {\n          _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            var response;\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return axios({\n                      url: \"/submitSettings\",\n                      method: \"get\"\n                    });\n\n                  case 3:\n                    response = _context.sent;\n                    return _context.abrupt(\"return\", response.data);\n\n                  case 7:\n                    _context.prev = 7;\n                    _context.t0 = _context[\"catch\"](0);\n                    console.log(_context.t0);\n\n                  case 10:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[0, 7]]);\n          }));\n          return _getData.apply(this, arguments);\n        }\n\n        getData().then(function (response) {\n          console.log(\"__________________________________--\");\n          console.log(response);\n          console.log(response.data); //Parse values from response data to boolean format\n\n          for (var prop in response.data[0]) {\n            if (response.data[0].hasOwnProperty(prop)) {\n              response.data[0][prop] = response.data[0][prop] == 'true' || response.data[0][prop] == 'false' ? response.data[0][prop] === 'true' : response.data[0][prop];\n            }\n          }\n\n          if (response.data[0].execute_sd_segmentation == false && response.data[0].execute_cell_clustering == true || response.data[0].execute_cell_thresholding == true || response.data[0].execute_homotypic_interactions == true || response.data[0].execute_heterotypic_interactions == true || response.data[0].execute_permuted_interactions == true) {\n            alert(\"To run cell-based analysis, check image segmentation\");\n          } else if (response.data[0].execute_cell_clustering == false && response.data[0].execute_cell_thresholding == true || response.data[0].execute_homotypic_interactions == true || response.data[0].execute_heterotypic_interactions == true || response.data[0].execute_permuted_interactions == true) {\n            alert(\"To run cell clustering, check cell type identification\");\n          } else if (response.data[0].execute_cell_thresholding == false && response.data[0].execute_homotypic_interactions == true || response.data[0].execute_heterotypic_interactions == true || response.data[0].execute_permuted_interactions == true) {\n            alert(\"To run cell thresholding, check cell clustering\");\n          } else if (response.data[0].execute_cell_thresholding == false && response.data[0].execute_homotypic_interactions == true) {\n            alert(\"To run homotypic interactions, check cell thresholding\");\n          } else if (response.data[0].execute_cell_thresholding == false && response.data[0].execute_heterotypic_interactions == true) {\n            alert(\"To run heterotypic interactions, check cell thresholding\");\n          } else if (response.data[0].execute_cell_thresholding == false && response.data[0].execute_permuted_interactions == true) {\n            alert(\"To run permuted interactions, check cell thresholding\");\n          } else {\n            document.getElementById(\"settingsPage\").style.display = \"none\";\n            document.getElementById(\"nextButton2\").style.display = \"none\";\n            document.getElementById(\"returnButton\").style.display = \"none\";\n            document.getElementById(\"returnButton2\").style.display = \"block\";\n            document.getElementById(\"nextButton3\").style.display = \"block\";\n            document.getElementById(\"metadataPage\").style.display = \"block\";\n\n            if (response.data[0].execute_area == true) {\n              console.log(\"EXECUTE AREA\");\n              setRenderArea(true);\n              setMarkerTextBox(\"\");\n              var markers = response.data[1]; //dictionary of markers\n\n              allMarkersChecked(markers);\n              setOriginalMarkers(response.data[2]);\n            } else if (response.data[0].execute_area == false) setRenderArea(false);\n\n            if (response.data[0].execute_sd_segmentation == true) {\n              console.log(\"RENDER SOMETHING\");\n            }\n\n            if (response.data[0].execute_cell_type_identification == true) {\n              setRenderMasking(true);\n              maskingInput();\n              console.log(\"RENDER SOMETHING\");\n            } else if (response.data[0].execute_cell_type_identification == false) {\n              setRenderMasking(false);\n              setMaskingTextBox(\"\");\n            }\n\n            if (response.data[0].execute_cell_clustering == true) {\n              console.log(\"RENDER SOMETHING\");\n            }\n\n            if (response.data[0].execute_cell_thresholding == true) {\n              console.log(\"RENDER SOMETHING\");\n            }\n\n            if (response.data[0].execute_homotypic_interactions == true) {\n              console.log(\"RENDER SOMETHING\");\n            }\n\n            if (response.data[0].execute_heterotypic_interactions == true) {\n              console.log(\"RENDER SOMETHING\");\n            }\n\n            if (response.data[0].execute_permuted_interactions == true) {\n              console.log(\"RENDER SOMETHING\");\n            }\n          }\n        });\n      },\n      submitMetadata: function submitMetadata() {\n        console.log(\"SUBMIT METADATA\");\n        var url = '/submitMetadata';\n        axios.post(url, {\n          \"markers\": markersDict,\n          \"masks\": maskDict\n        }).then(function (response) {\n          if (response.data == \"error\") {\n            //If error\n            console.log(\"########ERROR########\");\n          } else {\n            //IF everyting okay\n            console.log(\"READY\");\n          }\n        });\n        document.getElementById('load').style.display = 'block';\n        var url2 = '/run';\n        axios.post(url2, \"RUN\").then(function (response) {\n          if (response.data == \"error\") {\n            //If error\n            console.log(\"########ERROR########\");\n            alert(\"Error when performing the analysis, please check your input files and try again.\");\n            document.getElementById('load').style.display = 'none';\n          } else {\n            //IF everyting okay\n            console.log(\"Analysis ready\");\n            document.getElementById('load').style.display = 'none';\n            document.getElementById('results').style.display = 'block';\n          }\n        });\n      }\n    };\n  });\n\n  var allMarkersChecked = function allMarkersChecked(markers) {\n    console.log(\"ORIGINAL MARKERS\", markers);\n    setMarkersDict(markers);\n    var count = -1; //let markers = originalMarkers //Using a temp list because the state variable doesn't update immediately \n\n    console.log(markers);\n    console.log(\"MARKERS LENGTH : \", Object.keys(markers).length);\n    setMarkerKeyCounter(Object.keys(markers).length);\n    setMarkerTextBox(Object.entries(markers).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          index = _ref2[1];\n\n      var obj = markers[key];\n      console.log(obj);\n      var marker = Object.keys(obj)[0];\n      console.log(marker); //if(marker in originalMarkers){//THis doesn't work because the marker is located in 0:{marker:mainMarker}\n\n      console.log(\"INCLUDES\");\n      count = count + 1;\n      var id = \"marker\" + count;\n      setCounter(count);\n      console.log(count);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        id: id,\n        value: marker,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 28\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-1\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: id,\n        value: marker,\n        disabled: true,\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-2\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: id,\n        value: marker,\n        disabled: true,\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-3\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return removeMarker(count);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 29\n        }\n      }, \"Remove\")));\n    }));\n  };\n\n  var addMarkers = function addMarkers(event) {\n    console.log(markersDict);\n    console.log(counter); //Disables element after new one is added\n\n    if (Object.keys(markersDict).includes(counter.toString())) {\n      var name = \"marker\" + counter;\n      console.log(name);\n      document.getElementsByName(name).forEach(function (e) {\n        e.disabled = true;\n      });\n    }\n\n    console.log(\"MARKER DICT : \", markersDict);\n    var count = counter + 1;\n    var id = \"marker\" + count;\n    console.log(id);\n    setMarkerTextBox([].concat(_toConsumableArray(markerTextBox), [/*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      id: id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: id,\n      onBlur: function onBlur(event) {\n        return handleChangeMarker(id, event, \"marker\");\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: id,\n      onBlur: function onBlur(event) {\n        return handleChangeMarker(id, event, \"mainMarker\");\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: markerTextBox.length === 0,\n      onClick: function onClick() {\n        return removeMarker(id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }\n    }, \"Remove\")))]));\n    setCounter(count);\n  };\n\n  var removeMarker = function removeMarker(id) {\n    var key = document.getElementById(id).getAttribute(\"value\");\n    delete markersDict[key];\n    document.getElementById(id).remove();\n  };\n\n  var handleChangeMarker = function handleChangeMarker(id, event, input) {\n    setMarkerKeyCounter(markerKeyCounter + 1); //Update the counter\n    //Checks what is the input of the function and stores the input to a dictionary \n\n    if (input === \"marker\") {\n      var inputError = validateMarker(event.target.value);\n      console.log(inputError);\n\n      if (inputError === true) {\n        alert(\"Error in marker input: There is no marker \" + event.target.value + \" in the data\");\n      } else {\n        markerTemp = _objectSpread({}, markerTemp, {\n          marker: event.target.value\n        });\n      }\n    } else if (input === \"mainMarker\") {\n      var _inputError = validateMarker(event.target.value);\n\n      if (_inputError === false) {\n        markerTemp = _objectSpread({}, markerTemp, {\n          mainMarker: event.target.value\n        });\n      } else {\n        alert(\"Error in main marker input: There is no marker \" + event.target.value + \" in the data\");\n      }\n    }\n\n    var exists = false; //After the temp dictionary is filled store the properties to the main dictionary\n\n    if (Object.values(markerTemp).filter(function (x) {\n      return x === \"\";\n    }).length === 0) {\n      console.log(\"OBJECT ENTRIES\");\n      Object.entries(markersDict).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            key = _ref4[0],\n            value = _ref4[1];\n\n        if (Object.keys(value)[0] === markerTemp[\"marker\"] && Object.values(value)[0] === markerTemp[\"mainMarker\"]) {\n          exists = true;\n        }\n      });\n\n      if (exists === true) {\n        alert([markerTemp[\"marker\"]] + \" : \" + markerTemp[\"mainMarker\"] + \" already exists, please change the input\");\n      } else {\n        setMarkersDict(_objectSpread({}, markersDict, _defineProperty({}, markerKeyCounter, _defineProperty({}, markerTemp[\"marker\"], markerTemp[\"mainMarker\"]))));\n      }\n    }\n  };\n\n  function validateMarker(marker) {\n    var inputMarkers = [];\n    console.log(\"INPUMarker\", marker);\n    var regex = /^[a-zA-Z0-9!&|]+$/;\n    var inputError = false;\n\n    if (!marker.match(regex)) {\n      alert(\"Error in input: Only letters, numbers and logical operators (!&|) are accepted.\");\n    } else {\n      console.log(\"VALIDATE\"); //Checks the logical operators the user inputted\n\n      if (marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")) {\n        inputMarkers = marker.split(/[&!|]+/); //Makes a list of the markers\n      } else {\n        //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n        inputMarkers.push(marker);\n      } //Loop that checks the user inputted a marker that that the tiff-images have\n\n\n      for (var elem in inputMarkers) {\n        console.log(elem); //If the marker is in the data returns false otherwise returns inputError true\n\n        if (originalMarkers.includes(inputMarkers[elem])) {\n          inputError = false;\n        } else {\n          inputError = true;\n          break;\n        }\n      }\n    }\n\n    return inputError;\n  }\n  /*const handleChangeMarker = (id, event) => {\n      let inputMarkers = []\n       let inputString = event.target.value.replace(/\\s/g, \"\") //Removes the whitespaces\n      let marker = inputString\n      //Checks the logical operators the user inputted\n      if(marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")){\n          inputMarkers = marker.split(/[&!|]+/) //Makes a list of the markers\n      }\n      else{\n          //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n          inputMarkers.push(marker)\n      }\n      let inputError = false\n      //Loop that checks the user inputted a marker that that the tiff-images have\n      for(let elem in inputMarkers){\n          if(originalMarkers.includes(inputMarkers[elem])){\n              inputError = false\n          }\n          else{\n              inputError = true\n              break;\n          }\n      }\n       let dict = markersDict\n      console.log(inputError)\n      //If the tiff-images have the marker we can put it to the dictionary\n      if(inputError === false){\n          //setMarkersDict({...markersDict,[inputString]:\"\"})\n          console.log(\"SET MARKER TO DICT\")\n          console.log(\"MARKERSDICT\", markersDict)\n          let update = false\n          setMarkersDict(Object.entries(markersDict).map(([item]) => {\n              console.log(\"ITEM:\",item)\n              if(item == id){\n                  update = true\n                  console.log(\"UPDATE\")\n                  console.log(\"ERISUURI, \", inputString)\n                  console.log(markersDict)\n                  //return([...markersDict, id])\n                  return {...markersDict,[id]:{[inputString]:\"\"}}\n              }\n              \n          }))\n          if(update === false){\n              console.log(\"update is false, ID : \", id)\n              setMarkersDict({...markersDict,[id]:{[inputString]:\"\"}})\n          }\n          \n   \n          }\n      //If not, raising an error to the user\n      else if(inputError === true){\n          setErrorMessageArea(\"ERROR: input \" + inputString + \" couldn't be processed, please change the input\")\n          //alert(\"ERROR: input \" + inputString + \" couldn't be processed, please change the input format\")\n      }\n      }\n  */\n\n  /*const handleChangeMainMarker = (id,event) => {\n      console.log(\"MARKERSDICT\", markersDict)\n      console.log(\"Markers Dict type\", typeof(markersDict))\n      let mainMarker = event.target.value.replace(/\\s/g, \"\")\n      let key = document.getElementById(0-id).value\n      let inputError = handleMarkerInput(mainMarker)\n      //If the tiff-images have the marker we can put it to the dictionary\n      if(inputError === false){\n          console.log(\"SET MARKER TO DICT\")\n          console.log(\"MARKERSDICT\", markersDict)\n          let update = false\n          setMarkersDict(Object.entries(markersDict).map(([item]) => {\n              console.log(\"MAINMARKER ITEM \", item)\n              if(item != id){\n                  update = true\n                  console.log(\"UPDATE\")             \n              }\n              \n          }))\n          if(update === false){\n              console.log(\"update is false, ID : \", id)\n              setMarkersDict({...markersDict,[id]:{[key]:mainMarker}})\n          }        \n      }\n      //If not, raising an error to the user\n      else if(inputError === true){\n          setErrorMessageArea(\"ERROR: input \" + mainMarker + \" couldn't be processed, please change the input\")\n          //alert(\"ERROR: input \" + mainMarker + \" couldn't be processed, please change the input format\")\n      }   \n  }\n   function handleMarkerInput(marker){\n      let inputMarkers = []\n      console.log(\"INPUMarker\", marker)\n      console.log(\"MARKERSDICT\",markersDict)\n      //Checks the logical operators the user inputted\n      if(marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")){\n          inputMarkers = marker.split(/[&!|]+/) //Makes a list of the markers\n      }\n      else{\n          //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n          inputMarkers.push(marker)\n      }\n      let inputError = false\n      //Loop that checks the user inputted a marker that that the tiff-images have\n      for(let elem in inputMarkers){\n          if(originalMarkers.includes(inputMarkers[elem])){\n              inputError = false\n          }\n          else{\n              inputError = true\n              break;\n          }\n      }\n      return inputError\n  }*/\n\n\n  var maskingInput = function maskingInput() {\n    console.log(\"MASKING\");\n    var id = \"mask0\"; //If you go back to previous page, this code mess up\n\n    if (maskingTextBox === \"\") {\n      setMaskingTextBox(Object.entries(maskingTextBox + 1).map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            key = _ref6[0],\n            index = _ref6[1];\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          class: \"row\",\n          id: id,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-1\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          name: \"mask0\",\n          onBlur: function onBlur(event) {\n            return handleChangeMask(id, event, \"cellType\");\n          },\n          size: \"10\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-2\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          name: \"mask0\",\n          onBlur: function onBlur(event) {\n            return handleChangeMask(id, event, \"thresholdMarker\");\n          },\n          size: \"10\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-3\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          name: \"mask0\",\n          onBlur: function onBlur(event) {\n            return handleChangeMask(id, event, \"thresholdValue\");\n          },\n          size: \"10\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-4\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          name: \"mask0\",\n          onBlur: function onBlur(event) {\n            return handleChangeMask(id, event, \"color\");\n          },\n          size: \"10\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-5\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          onClick: function onClick() {\n            return removeMask(id, maskKeyCounter);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 29\n          }\n        }, \"Remove\")));\n      }));\n    }\n  };\n\n  var addMasks = function addMasks(event) {\n    console.log(newMask);\n\n    if (newMask === false) {\n      alert(\"Fill all the fields before adding new cell type\");\n    } else {\n      setNewMask(false); //This is a bit in a wrong place, the last row is never disabled\n      //Disables element after new one is added\n\n      if (Object.keys(maskDict).includes(maskCounter.toString())) {\n        var name = \"mask\" + maskCounter;\n        document.getElementsByName(name).forEach(function (e) {\n          e.disabled = true;\n        });\n      }\n\n      var count = maskCounter + 1;\n      var id = \"mask\" + count;\n      setMaskCounter(count);\n      setMaskingTextBox([].concat(_toConsumableArray(maskingTextBox), [/*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        id: id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-1\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: id,\n        onBlur: function onBlur(event) {\n          return handleChangeMask(id, event, \"cellType\");\n        },\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-2\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: id,\n        disabled: Object.keys(maskDict).includes(maskKeyCounter - 1),\n        onBlur: function onBlur(event) {\n          return handleChangeMask(id, event, \"thresholdMarker\");\n        },\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-3\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: id,\n        disabled: Object.keys(maskDict).includes(maskKeyCounter - 1),\n        onBlur: function onBlur(event) {\n          return handleChangeMask(id, event, \"thresholdValue\");\n        },\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-4\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: id,\n        disabled: Object.keys(maskDict).includes(maskKeyCounter - 1),\n        onBlur: function onBlur(event) {\n          return handleChangeMask(id, event, \"color\");\n        },\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-5\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return removeMask(id, maskKeyCounter);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 17\n        }\n      }, \"Remove\")))]));\n    }\n  };\n\n  var handleChangeMask = function handleChangeMask(id, event, input) {\n    console.log(\"MASK LENGTH : \", Object.values(maskTemp).filter(function (x) {\n      return x === \"\";\n    }).length);\n    setMaskKeyCounter(maskKeyCounter + 1); //console.log(\"MaskKeyCounter,\" , maskKeyCounter)\n    //Makes sure that all the fields are filled before adding new cell type\n\n    if (Object.values(maskTemp).filter(function (x) {\n      return x === \"\";\n    }).length === 1) {\n      //counts the number of empty values\n      setNewMask(true);\n    } //Checks what is the input of the function and stores the input to dictionary to right location\n\n\n    if (input === \"cellType\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        cellType: event.target.value\n      });\n    } else if (input === \"thresholdMarker\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        thresholdMarker: event.target.value\n      });\n    } else if (input === \"thresholdValue\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        thresholdValue: event.target.value\n      });\n    } else if (input === \"color\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        color: event.target.value\n      });\n    } //After the temp dictionary is filled store the properties to the main dictionary\n\n\n    if (Object.values(maskTemp).filter(function (x) {\n      return x === \"\";\n    }).length === 0) {\n      setMaskDict(_objectSpread({}, maskDict, _defineProperty({}, maskKeyCounter, [{\n        cell_type: maskTemp[\"cellType\"]\n      }, {\n        threshold_marker: maskTemp[\"thresholdMarker\"]\n      }, {\n        threshold_value: maskTemp[\"thresholdValue\"]\n      }, {\n        color: maskTemp[\"color\"]\n      }])));\n    }\n  }; //Removes the mask metadata input field and the corresponding property from the dictionary\n\n\n  var removeMask = function removeMask(id, dictKey) {\n    delete maskDict[dictKey];\n    document.getElementById(id).remove();\n  };\n\n  console.log(analysisReady);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    class: \"metadataForm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 17\n    }\n  }, \"Submit metadata:\"), renderArea ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 25\n    }\n  }, \"Area\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 580,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 37\n    }\n  }, \"Marker\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 37\n    }\n  }, \"Main marker\"))), markerTextBox, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addMarkers,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 25\n    }\n  }, \"Add markers\"))) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 17\n    }\n  }), renderMasking ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 595,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 25\n    }\n  }, \"Masking\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 37\n    }\n  }, \"Cell type\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 37\n    }\n  }, \"Threshold marker\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 37\n    }\n  }, \"Threshold value\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 37\n    }\n  }, \"Color\"))), maskingTextBox, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addMasks,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 25\n    }\n  }, \"New cell type\"))) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n});\nexport default GetMetadata; //<div>{allMarkers && <p>Loading...</p>}</div>#setAllMarkes(!allMarkers);","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","useRef","axios","GetResults","GetMetadata","props","ref","renderArea","setRenderArea","renderMasking","setRenderMasking","allMarkers","setAllMarkes","markersDict","setMarkersDict","counter","setCounter","markerKeyCounter","setMarkerKeyCounter","markerTemp","marker","mainMarker","maskCounter","setMaskCounter","maskKeyCounter","setMaskKeyCounter","newMask","setNewMask","maskTemp","cellType","thresholdMarker","thresholdValue","color","inputFields","analysisReady","setAnalysisReady","originalMarkers","setOriginalMarkers","markerTextBox","setMarkerTextBox","maskingTextBox","setMaskingTextBox","maskDict","setMaskDict","errorMessageArea","setErrorMessageArea","getProcesses","console","log","getData","url","method","response","data","then","prop","hasOwnProperty","execute_sd_segmentation","execute_cell_clustering","execute_cell_thresholding","execute_homotypic_interactions","execute_heterotypic_interactions","execute_permuted_interactions","alert","document","getElementById","style","display","execute_area","markers","allMarkersChecked","execute_cell_type_identification","maskingInput","submitMetadata","post","url2","count","Object","keys","length","entries","map","key","index","obj","id","removeMarker","addMarkers","event","includes","toString","name","getElementsByName","forEach","e","disabled","handleChangeMarker","getAttribute","remove","input","inputError","validateMarker","target","value","exists","values","filter","x","inputMarkers","regex","match","split","push","elem","handleChangeMask","removeMask","addMasks","cell_type","threshold_marker","threshold_value","dictKey"],"sources":["/home/ernohanninen/simpli-app/src/getMetadata.js"],"sourcesContent":["import React,  { useState, forwardRef, useImperativeHandle, useRef } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport GetResults from \"./getResults.js\"\n\n\n\n\n\n//If no markers prevent user to go forward add new textbox\n//able user input non unique markers\n//adding custom markers doesn't work\n//Add random color generator for mask input\n//Using boolean it should be possible to check wether the input is filled before adding more mask metadata\n//If there is no marker the axios posts still sends data\n//Even if the area is unchecked the axios posts the data that is submitted on the main page (CHECK THAT THIS IS FIXED)\n//Delete existing marker from marker list\n\n//Check that the colors for cell_masking_metadata are okay\n\nconst GetMetadata = forwardRef((props, ref)=>{\n\n    const [renderArea, setRenderArea] = useState(false)\n    const [renderMasking, setRenderMasking] = useState(false)\n    const [allMarkers, setAllMarkes]  = useState(false)\n    const [markersDict, setMarkersDict] = useState([{}])\n    const [counter, setCounter] = useState(0)\n    const [markerKeyCounter, setMarkerKeyCounter] = useState(0)\n    let markerTemp = ({marker:\"\", mainMarker:\"\"})\n    const [maskCounter, setMaskCounter] = useState(0)\n    const [maskKeyCounter, setMaskKeyCounter] = useState(0)\n    const [newMask, setNewMask] = useState(false)\n    let maskTemp = ({cellType:\"\", thresholdMarker:\"\", thresholdValue:\"\", color:\"\"})\n    let inputFields = []\n    const [analysisReady, setAnalysisReady] = useState(\"\")\n\n\n    const [originalMarkers, setOriginalMarkers] = useState([]) //This list keeps in track about the markers that the user inputted\n    const [markerTextBox, setMarkerTextBox] = useState(\"\")\n    const [maskingTextBox, setMaskingTextBox] = useState(\"\")\n    const [maskDict, setMaskDict] = useState([{}])\n    const [errorMessageArea, setErrorMessageArea] = useState(\"\")\n\n    useImperativeHandle(ref, ()=>({\n        getProcesses(){\n            console.log(\"AXIOS\")\n            async function getData(){\n                try {\n                    let response = await axios({\n                        url: \"/submitSettings\",\n                        method: \"get\"\n                    })\n\n                    return response.data\n                }\n                catch(err){\n                    console.log(err)\n                }\n            }\n           \n            getData()\n            .then(function(response){\n                console.log(\"__________________________________--\")\n                console.log(response)\n                console.log(response.data)\n                //Parse values from response data to boolean format\n                for (let prop in response.data[0]) {\n                    if (response.data[0].hasOwnProperty(prop)) {\n                        response.data[0][prop] = (response.data[0][prop] == 'true' || response.data[0][prop] == 'false')? response.data[0][prop] === 'true': response.data[0][prop] ;\n                    }\n                } \n\n                if(response.data[0].execute_sd_segmentation == false && response.data[0].execute_cell_clustering == true || response.data[0].execute_cell_thresholding == true || response.data[0].execute_homotypic_interactions == true || response.data[0].execute_heterotypic_interactions == true || response.data[0].execute_permuted_interactions == true){\n                    alert(\"To run cell-based analysis, check image segmentation\")\n                }\n                else if(response.data[0].execute_cell_clustering == false && response.data[0].execute_cell_thresholding == true || response.data[0].execute_homotypic_interactions == true || response.data[0].execute_heterotypic_interactions == true || response.data[0].execute_permuted_interactions == true){\n                    alert(\"To run cell clustering, check cell type identification\")\n                }\n                else if(response.data[0].execute_cell_thresholding == false && response.data[0].execute_homotypic_interactions == true || response.data[0].execute_heterotypic_interactions == true || response.data[0].execute_permuted_interactions == true){\n                    alert(\"To run cell thresholding, check cell clustering\")\n                }\n                else if(response.data[0].execute_cell_thresholding == false && response.data[0].execute_homotypic_interactions == true){\n                    alert(\"To run homotypic interactions, check cell thresholding\")\n                }\n                else if(response.data[0].execute_cell_thresholding == false && response.data[0].execute_heterotypic_interactions == true){\n                    alert(\"To run heterotypic interactions, check cell thresholding\")\n                }\n                else if(response.data[0].execute_cell_thresholding == false && response.data[0].execute_permuted_interactions == true){\n                    alert(\"To run permuted interactions, check cell thresholding\")\n                }\n                else{\n                    document.getElementById(\"settingsPage\").style.display= \"none\";\n                    document.getElementById(\"nextButton2\").style.display = \"none\";\n                    document.getElementById(\"returnButton\").style.display = \"none\"\n                    document.getElementById(\"returnButton2\").style.display = \"block\"\n                    document.getElementById(\"nextButton3\").style.display = \"block\"\n                    document.getElementById(\"metadataPage\").style.display = \"block\"\n\n                    if(response.data[0].execute_area == true){\n                        console.log(\"EXECUTE AREA\")                   \n                        setRenderArea(true)\n                        setMarkerTextBox(\"\")\n                        let markers = response.data[1] //dictionary of markers\n                        allMarkersChecked(markers)\n                        setOriginalMarkers(response.data[2])\n                        \n                    }\n                    else if(response.data[0].execute_area == false)setRenderArea(false)\n                    \n                    if(response.data[0].execute_sd_segmentation == true){\n                        console.log(\"RENDER SOMETHING\")\n                    }\n                    if(response.data[0].execute_cell_type_identification == true){\n                        setRenderMasking(true)\n                        maskingInput()\n                        console.log(\"RENDER SOMETHING\")\n                    }\n                    else if(response.data[0].execute_cell_type_identification == false){\n                        setRenderMasking(false)\n                        setMaskingTextBox(\"\")\n    \n                    }\n                    if(response.data[0].execute_cell_clustering == true){\n                        console.log(\"RENDER SOMETHING\")\n                    }\n                    if(response.data[0].execute_cell_thresholding == true){\n                        console.log(\"RENDER SOMETHING\")\n                    }\n                    if(response.data[0].execute_homotypic_interactions == true){\n                        console.log(\"RENDER SOMETHING\")\n                    }\n                    if(response.data[0].execute_heterotypic_interactions == true){\n                        console.log(\"RENDER SOMETHING\")\n                    }\n                    if(response.data[0].execute_permuted_interactions == true){\n                        console.log(\"RENDER SOMETHING\")\n                    }\n                }\n\n            })\n        },\n        submitMetadata(){\n            console.log(\"SUBMIT METADATA\")\n\n            const url = '/submitMetadata';\n            axios.post(url, {\n                \"markers\": markersDict,\n                \"masks\": maskDict\n                })\n                .then((response) =>{\n                    if(response.data==\"error\"){ //If error\n                        console.log(\"########ERROR########\")\n                    }\n                    else{ //IF everyting okay\n                        console.log(\"READY\")\n                    }\n            });      \n\n            document.getElementById('load').style.display = 'block';\n\n            const url2 = '/run';\n            axios.post(url2, \"RUN\")\n                .then((response) =>{\n                    if(response.data==\"error\"){ //If error\n                        console.log(\"########ERROR########\")\n                        alert(\"Error when performing the analysis, please check your input files and try again.\")\n                        document.getElementById('load').style.display = 'none';\n\n                    }\n                    else{ //IF everyting okay\n                        console.log(\"Analysis ready\")\n                        document.getElementById('load').style.display = 'none';\n                        document.getElementById('results').style.display = 'block';\n                     \n                    }\n            });      \n        }\n    }))\n\n    const allMarkersChecked = (markers) => {    \n            console.log(\"ORIGINAL MARKERS\", markers)\n            setMarkersDict(markers)\n            let count = -1;\n\n            //let markers = originalMarkers //Using a temp list because the state variable doesn't update immediately \n            console.log(markers)\n            console.log(\"MARKERS LENGTH : \", Object.keys(markers).length)\n            setMarkerKeyCounter(Object.keys(markers).length) \n\n            setMarkerTextBox(Object.entries(markers).map(([key,index]) => {\n                let obj = markers[key]\n                console.log(obj)\n                let marker = Object.keys(obj)[0]\n                console.log(marker)\n                //if(marker in originalMarkers){//THis doesn't work because the marker is located in 0:{marker:mainMarker}\n                    console.log(\"INCLUDES\")\n                    count = count + 1\n                    let id = \"marker\" + count\n                    setCounter(count)  \n\n                    console.log(count)\n                    return(<div class=\"row\" id={id} value={marker}>\n                        <div class=\"col-1\">    \n                            <input name={id} value={marker} disabled size=\"10\"/>                \n                        </div>\n                        <div class=\"col-2\">    \n                            <input name={id} value={marker} disabled size=\"10\"/>                \n                        </div>\n                        <div class=\"col-3\">\n                            <button  onClick={() => removeMarker(count)}>Remove</button>                  \n                        </div>  \n                    </div>)        \n            }\n        ))             \n    }\n\n    const addMarkers = event =>{\n        console.log(markersDict)\n        console.log(counter)\n        //Disables element after new one is added\n        if(Object.keys(markersDict).includes(counter.toString())){\n            let name = \"marker\" + counter\n            console.log(name)\n            document.getElementsByName(name).forEach(e => {\n                e.disabled = true\n            })        \n        }\n\n        console.log(\"MARKER DICT : \", markersDict)\n        let count = counter + 1\n        let id = \"marker\" + count\n        console.log(id)\n        setMarkerTextBox([...markerTextBox,\n        <div class=\"row\" id={id}>\n            <div class=\"col-1\">    \n                <input name={id}  onBlur={event => handleChangeMarker(id,event, \"marker\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-2\">    \n                <input name={id} onBlur={event => handleChangeMarker(id,event, \"mainMarker\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-3\">\n                <button disabled={markerTextBox.length === 0} onClick={() => removeMarker(id)}>Remove</button>        \n            </div> \n\n        </div>\n        ])  \n        setCounter(count)       \n    }\n\n    \n    const removeMarker = (id) => {\n        let key = document.getElementById(id).getAttribute(\"value\")\n        delete markersDict[key]\n        document.getElementById(id).remove()\n    }\n\n    const handleChangeMarker = (id, event, input) => {\n        setMarkerKeyCounter(markerKeyCounter + 1) //Update the counter\n        //Checks what is the input of the function and stores the input to a dictionary \n        if(input===\"marker\"){\n            let inputError = validateMarker(event.target.value)\n            console.log(inputError)\n            if(inputError === true){\n                alert(\"Error in marker input: There is no marker \"+ event.target.value + \" in the data\")\n            }\n            else{\n                markerTemp = {...markerTemp, marker:event.target.value}\n\n            }\n        }\n        else if(input === \"mainMarker\"){\n            let inputError = validateMarker(event.target.value)\n            if(inputError === false){\n                markerTemp = {...markerTemp, mainMarker:event.target.value}   \n            }\n            else{\n                alert(\"Error in main marker input: There is no marker \"+ event.target.value + \" in the data\")\n            }\n        }\n        let exists = false\n        //After the temp dictionary is filled store the properties to the main dictionary\n        if(Object.values(markerTemp).filter(x => x === \"\").length === 0){\n            console.log(\"OBJECT ENTRIES\")\n            Object.entries(markersDict).map(([key,value]) => {\n\n                if(Object.keys(value)[0] === markerTemp[\"marker\"] && Object.values(value)[0] === markerTemp[\"mainMarker\"]){\n                    exists = true\n                }\n\n            })\n            if(exists === true){\n                alert([markerTemp[\"marker\"]]+\" : \"+markerTemp[\"mainMarker\"] + \" already exists, please change the input\")\n            }\n            else{\n                setMarkersDict({...markersDict,[markerKeyCounter]:{[markerTemp[\"marker\"]]:markerTemp[\"mainMarker\"]}})\n            }\n        }\n\n    }\n\n    function validateMarker(marker){\n        let inputMarkers = []\n        console.log(\"INPUMarker\", marker)\n        var regex = /^[a-zA-Z0-9!&|]+$/;\n        let inputError = false\n\n        if(!marker.match(regex)){\n            alert(\"Error in input: Only letters, numbers and logical operators (!&|) are accepted.\")\n        }\n        else{\n            console.log(\"VALIDATE\")\n            //Checks the logical operators the user inputted\n            if(marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")){\n                inputMarkers = marker.split(/[&!|]+/) //Makes a list of the markers\n            }\n            else{\n                //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n                inputMarkers.push(marker)\n            }\n            //Loop that checks the user inputted a marker that that the tiff-images have\n            for(let elem in inputMarkers){\n                console.log(elem)\n                //If the marker is in the data returns false otherwise returns inputError true\n                if(originalMarkers.includes(inputMarkers[elem])){ \n                    inputError = false\n                }\n                else{\n                    inputError = true\n                    break;\n                }\n            }\n            \n        }\n        \n        return inputError\n    }\n\n\n    /*const handleChangeMarker = (id, event) => {\n        let inputMarkers = []\n\n        let inputString = event.target.value.replace(/\\s/g, \"\") //Removes the whitespaces\n        let marker = inputString\n        //Checks the logical operators the user inputted\n        if(marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")){\n            inputMarkers = marker.split(/[&!|]+/) //Makes a list of the markers\n        }\n        else{\n            //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n            inputMarkers.push(marker)\n        }\n        let inputError = false\n        //Loop that checks the user inputted a marker that that the tiff-images have\n        for(let elem in inputMarkers){\n            if(originalMarkers.includes(inputMarkers[elem])){\n                inputError = false\n            }\n            else{\n                inputError = true\n                break;\n            }\n        }\n\n        let dict = markersDict\n        console.log(inputError)\n        //If the tiff-images have the marker we can put it to the dictionary\n        if(inputError === false){\n            //setMarkersDict({...markersDict,[inputString]:\"\"})\n            console.log(\"SET MARKER TO DICT\")\n            console.log(\"MARKERSDICT\", markersDict)\n            let update = false\n            setMarkersDict(Object.entries(markersDict).map(([item]) => {\n                console.log(\"ITEM:\",item)\n                if(item == id){\n                    update = true\n                    console.log(\"UPDATE\")\n                    console.log(\"ERISUURI, \", inputString)\n                    console.log(markersDict)\n                    //return([...markersDict, id])\n                    return {...markersDict,[id]:{[inputString]:\"\"}}\n                }\n                \n            }))\n            if(update === false){\n                console.log(\"update is false, ID : \", id)\n                setMarkersDict({...markersDict,[id]:{[inputString]:\"\"}})\n            }\n            \n     \n            }\n        //If not, raising an error to the user\n        else if(inputError === true){\n            setErrorMessageArea(\"ERROR: input \" + inputString + \" couldn't be processed, please change the input\")\n            //alert(\"ERROR: input \" + inputString + \" couldn't be processed, please change the input format\")\n        }\n \n      }\n*/\n    /*const handleChangeMainMarker = (id,event) => {\n        console.log(\"MARKERSDICT\", markersDict)\n        console.log(\"Markers Dict type\", typeof(markersDict))\n        let mainMarker = event.target.value.replace(/\\s/g, \"\")\n        let key = document.getElementById(0-id).value\n        let inputError = handleMarkerInput(mainMarker)\n        //If the tiff-images have the marker we can put it to the dictionary\n        if(inputError === false){\n            console.log(\"SET MARKER TO DICT\")\n            console.log(\"MARKERSDICT\", markersDict)\n            let update = false\n            setMarkersDict(Object.entries(markersDict).map(([item]) => {\n                console.log(\"MAINMARKER ITEM \", item)\n                if(item != id){\n                    update = true\n                    console.log(\"UPDATE\")             \n                }\n                \n            }))\n            if(update === false){\n                console.log(\"update is false, ID : \", id)\n                setMarkersDict({...markersDict,[id]:{[key]:mainMarker}})\n            }        \n        }\n        //If not, raising an error to the user\n        else if(inputError === true){\n            setErrorMessageArea(\"ERROR: input \" + mainMarker + \" couldn't be processed, please change the input\")\n            //alert(\"ERROR: input \" + mainMarker + \" couldn't be processed, please change the input format\")\n        }   \n    }\n\n    function handleMarkerInput(marker){\n        let inputMarkers = []\n        console.log(\"INPUMarker\", marker)\n        console.log(\"MARKERSDICT\",markersDict)\n        //Checks the logical operators the user inputted\n        if(marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")){\n            inputMarkers = marker.split(/[&!|]+/) //Makes a list of the markers\n        }\n        else{\n            //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n            inputMarkers.push(marker)\n        }\n        let inputError = false\n        //Loop that checks the user inputted a marker that that the tiff-images have\n        for(let elem in inputMarkers){\n            if(originalMarkers.includes(inputMarkers[elem])){\n                inputError = false\n            }\n            else{\n                inputError = true\n                break;\n            }\n        }\n        return inputError\n    }*/\n\n    const maskingInput = () => {    \n        console.log(\"MASKING\")\n        let id = \"mask0\" \n        //If you go back to previous page, this code mess up\n        if(maskingTextBox === \"\"){\n            setMaskingTextBox(Object.entries(maskingTextBox+1).map(([key,index]) => {\n            \n                return(\n                    <div class=\"row\" id={id}>\n                        <div class=\"col-1\">    \n                            <input name = \"mask0\" onBlur={event => handleChangeMask(id,event, \"cellType\")}  size=\"10\"/>                \n                        </div>\n                        <div class=\"col-2\">    \n                            <input name = \"mask0\" onBlur={event => handleChangeMask(id,event, \"thresholdMarker\")} size=\"10\"/>                \n                        </div>\n                        <div class=\"col-3\">    \n                            <input name = \"mask0\"  onBlur={event => handleChangeMask(id,event, \"thresholdValue\")} size=\"10\"/>                \n                        </div>\n                        <div class=\"col-4\">    \n                            <input name = \"mask0\"  onBlur={event => handleChangeMask(id,event, \"color\")}  size=\"10\"/>                \n                        </div>\n                        <div class=\"col-5\">\n                            <button onClick={() => removeMask(id, maskKeyCounter)}>Remove</button>        \n                        </div> \n                    </div>)\n               \n            }))\n        }\n        \n    }\n\n    const addMasks = event =>{\n\n        console.log(newMask)\n        if(newMask === false){\n            alert(\"Fill all the fields before adding new cell type\")\n\n        }\n        else{\n        setNewMask(false)\n\n        //This is a bit in a wrong place, the last row is never disabled\n        //Disables element after new one is added\n        if(Object.keys(maskDict).includes(maskCounter.toString())){\n            let name = \"mask\" + maskCounter\n            document.getElementsByName(name).forEach(e => {\n                e.disabled = true\n            })        \n        }\n        let count = maskCounter + 1\n        let id = \"mask\" + count\n        setMaskCounter(count)\n        \n        setMaskingTextBox([...maskingTextBox,\n        <div class=\"row\" id={id} >\n            <div class=\"col-1\">    \n                <input name={id}  onBlur={event => handleChangeMask(id,event, \"cellType\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-2\">    \n                <input name={id} disabled={Object.keys(maskDict).includes(maskKeyCounter-1)} onBlur={event => handleChangeMask(id,event, \"thresholdMarker\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-3\">    \n                <input name={id} disabled={Object.keys(maskDict).includes(maskKeyCounter-1)} onBlur={event => handleChangeMask(id,event, \"thresholdValue\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-4\">    \n                <input name={id} disabled={Object.keys(maskDict).includes(maskKeyCounter-1)} onBlur={event => handleChangeMask(id,event, \"color\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-5\">\n                <button onClick={() => removeMask(id, maskKeyCounter)}>Remove</button>        \n            </div> \n\n        </div>\n        ])  \n        }\n        \n    }\n\n    const handleChangeMask = (id,event, input) => {\n        console.log(\"MASK LENGTH : \", Object.values(maskTemp).filter(x => x === \"\").length)\n        setMaskKeyCounter(maskKeyCounter + 1) \n        //console.log(\"MaskKeyCounter,\" , maskKeyCounter)\n        //Makes sure that all the fields are filled before adding new cell type\n        if(Object.values(maskTemp).filter(x => x === \"\").length === 1){//counts the number of empty values\n            setNewMask(true)\n        }\n        //Checks what is the input of the function and stores the input to dictionary to right location\n        if(input === \"cellType\"){\n            maskTemp = {...maskTemp, cellType:event.target.value}  \n        }\n        else if(input === \"thresholdMarker\"){\n            maskTemp = {...maskTemp, thresholdMarker:event.target.value}\n        }\n        else if(input === \"thresholdValue\"){\n            maskTemp ={...maskTemp, thresholdValue:event.target.value} \n        }\n        else if(input === \"color\"){\n            maskTemp ={...maskTemp, color:event.target.value}\n        }\n        //After the temp dictionary is filled store the properties to the main dictionary\n        if(Object.values(maskTemp).filter(x => x === \"\").length === 0){\n            setMaskDict({...maskDict,[maskKeyCounter]:[{cell_type:maskTemp[\"cellType\"]},{ threshold_marker:maskTemp[\"thresholdMarker\"]}, {threshold_value:maskTemp[\"thresholdValue\"]}, {color:maskTemp[\"color\"]}]})     \n        }    \n    }\n\n \n\n    //Removes the mask metadata input field and the corresponding property from the dictionary\n    const removeMask = (id,dictKey) => {\n        delete maskDict[dictKey]\n        document.getElementById(id).remove()\n    }\n    console.log(analysisReady)\n\n\n    return(\n        <div>\n            <form class=\"metadataForm\">\n                <b>Submit metadata:</b>\n\n                {renderArea ? (\n                    <div>\n                    <React.Fragment> \n                        <p>Area</p>\n                        <div class=\"row\">\n                                <div class=\"col-1\">    \n                                    <p>Marker</p>\n                                </div>\n                                <div class=\"col-2\">    \n                                    <p>Main marker</p>\n                            </div>\n                        </div>\n                        {markerTextBox}\n                        <button type=\"button\" onClick={addMarkers}>Add markers</button>\n\n                    </React.Fragment>\n                    </div>                  \n                ):(<></>)} \n                <br></br>\n                {renderMasking ? (\n                    <div>\n                    <React.Fragment> \n                        <p>Masking</p>\n                        <div class=\"row\">\n                                <div class=\"col-1\">    \n                                    <p>Cell type</p>\n                                </div>\n                                <div class=\"col-2\">    \n                                    <p>Threshold marker</p>\n                                </div>\n                                <div class=\"col-3\">    \n                                    <p>Threshold value</p>\n                                </div>\n                                <div class=\"col-4\">    \n                                    <p>Color</p>\n                                </div>             \n                            </div>\n                        {maskingTextBox}\n                        <button type=\"button\" onClick={addMasks}>New cell type</button>\n                    </React.Fragment>\n                    </div>                  \n                ):(<></>)\n                \n                }    \n     \n                                \n              \n                 \n            </form>\n        </div>\n        ) \n})\nexport default GetMetadata;\n//<div>{allMarkers && <p>Loading...</p>}</div>#setAllMarkes(!allMarkers);\n"],"mappings":"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U,GAAG,KAAjB;;IAEA,IAAG,CAAChF,MAAM,CAAC0F,KAAP,CAAaD,KAAb,CAAJ,EAAwB;MACpB9C,KAAK,CAAC,iFAAD,CAAL;IACH,CAFD,MAGI;MACAhB,OAAO,CAACC,GAAR,CAAY,UAAZ,EADA,CAEA;;MACA,IAAG5B,MAAM,CAACqE,QAAP,CAAgB,GAAhB,KAAwBrE,MAAM,CAACqE,QAAP,CAAgB,GAAhB,CAAxB,IAAgDrE,MAAM,CAACqE,QAAP,CAAgB,GAAhB,CAAnD,EAAwE;QACpEmB,YAAY,GAAGxF,MAAM,CAAC2F,KAAP,CAAa,QAAb,CAAf,CADoE,CAC9B;MACzC,CAFD,MAGI;QACA;QACAH,YAAY,CAACI,IAAb,CAAkB5F,MAAlB;MACH,CATD,CAUA;;;MACA,KAAI,IAAI6F,IAAR,IAAgBL,YAAhB,EAA6B;QACzB7D,OAAO,CAACC,GAAR,CAAYiE,IAAZ,EADyB,CAEzB;;QACA,IAAG7E,eAAe,CAACqD,QAAhB,CAAyBmB,YAAY,CAACK,IAAD,CAArC,CAAH,EAAgD;UAC5Cb,UAAU,GAAG,KAAb;QACH,CAFD,MAGI;UACAA,UAAU,GAAG,IAAb;UACA;QACH;MACJ;IAEJ;;IAED,OAAOA,UAAP;EACH;EAGD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAII;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"module"}