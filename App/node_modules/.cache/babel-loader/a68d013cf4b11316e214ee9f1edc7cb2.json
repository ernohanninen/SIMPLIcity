{"ast":null,"code":"import _toConsumableArray from \"/home/ernohanninen/simpli_project/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/ernohanninen/simpli_project/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli_project/App/src/getResults.js\";\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\n\nvar GetResults = function GetResults() {\n  //Variables\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      plotPaths = _useState2[0],\n      setPlotPaths = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      areaPlots = _useState4[0],\n      setAreaPlots = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sampleImages = _useState6[0],\n      setSampleImages = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dropDownSamples = _useState8[0],\n      setDropDownSamples = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      dropDownMarkers = _useState10[0],\n      setDropDownMarkers = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      checkbox = _useState12[0],\n      setCheckbox = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      displaySegmentationCb = _useState14[0],\n      setDisplaySegmentationCb = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      preprocessedCb = _useState16[0],\n      setPreprocessedCb = _useState16[1];\n\n  var _useState17 = useState(true),\n      _useState18 = _slicedToArray(_useState17, 2),\n      firstCall = _useState18[0],\n      setFirstCall = _useState18[1];\n\n  var _useState19 = useState({}),\n      _useState20 = _slicedToArray(_useState19, 2),\n      totalCells = _useState20[0],\n      setTotalCells = _useState20[1];\n\n  var _useState21 = useState({}),\n      _useState22 = _slicedToArray(_useState21, 2),\n      resultingCells = _useState22[0],\n      setResultingCells = _useState22[1];\n\n  var _useState23 = useState(\"\"),\n      _useState24 = _slicedToArray(_useState23, 2),\n      markerImages = _useState24[0],\n      setMarkerImages = _useState24[1];\n\n  var _useState25 = useState([]),\n      _useState26 = _slicedToArray(_useState25, 2),\n      mergedImages = _useState26[0],\n      setMergedImages = _useState26[1];\n\n  var _useState27 = useState(\"\"),\n      _useState28 = _slicedToArray(_useState27, 2),\n      pixelComparisonPlot = _useState28[0],\n      setPixelComparisonPlot = _useState28[1];\n\n  var _useState29 = useState(\"\"),\n      _useState30 = _slicedToArray(_useState29, 2),\n      pixelSamplePlot = _useState30[0],\n      setPixelSamplePlot = _useState30[1];\n\n  var _useState31 = useState(\"\"),\n      _useState32 = _slicedToArray(_useState31, 2),\n      dropDownPixel = _useState32[0],\n      setDropDownPixels = _useState32[1];\n\n  var _useState33 = useState(\"\"),\n      _useState34 = _slicedToArray(_useState33, 2),\n      cellArea = _useState34[0],\n      setCellArea = _useState34[1]; //const [displaySegmented, setDisplaySegmented] = useState(true)\n\n\n  var sample = \"\";\n  var marker = \"\";\n  var pixelImage = \"\";\n  var cellTableG = \"\"; //Function which get the images from backend\n\n  var displayResults = function displayResults() {\n    document.getElementById(\"resultsButton\").style.display = \"none\";\n    axios.get(\"/fetchResults\").then(function (response) {\n      setTotalCells(response.data[1]);\n      setResultingCells(response.data[2]);\n      console.log(\"PALUU ARVO\");\n      console.log(response.data);\n      console.log(response.data[1]);\n      console.log(response.data[2]);\n      console.log(response.data[3]);\n      console.log(response.data[4]); //Extracting values from dictionary\n\n      var samples = response.data[0][\"samples\"];\n      var area = response.data[0][\"area\"];\n      var intensity = response.data[0][\"intensity\"];\n      console.log(area);\n      console.log(samples);\n      setPlotPaths(area);\n      displayImages(area, samples, intensity, response.data[1], response.data[2], response.data[3], response.data[4]); //Calling function which displays the images         \n    });\n  }; //Function which displays the images to the user\n\n\n  var displayImages = function displayImages(area, samples, intensity, totalCells, resultingCells, intensityCellType, cellAreaMeasurements) {\n    var segmentation = false;\n    var merged = false;\n    var mergedOverlays = false;\n    var cellAreaExecuted = false;\n    var counter = 0;\n    Object.entries(samples[Object.keys(samples)[0]]).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      console.log(key);\n      console.log(value);\n      console.log(Object.keys(Object.assign.apply(Object, [{}].concat(_toConsumableArray(value)))));\n\n      if (Object.keys(Object.assign.apply(Object, [{}].concat(_toConsumableArray(value)))).includes(\"overlays\")) {\n        console.log(\"SEGMENTATION\");\n        segmentation = true;\n      }\n    });\n    var cellAreaList = [];\n\n    if (Object.keys(cellAreaMeasurements).length != 0) {\n      cellAreaExecuted = true;\n      console.log(cellAreaMeasurements); //Object.entries(cellAreaMeasurements).map(([key,value]) => { //Goes thru at sample level\n\n      Object.entries(cellAreaMeasurements).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            key = _ref4[0],\n            value = _ref4[1];\n\n        var tableData = Object.entries(value).map(function (_ref5) {\n          var _ref6 = _slicedToArray(_ref5, 2),\n              key2 = _ref6[0],\n              value2 = _ref6[1];\n\n          return (\n            /*#__PURE__*/\n            //Goes thru at cell type level\n            React.createElement(\"tr\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(\"td\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 25\n              }\n            }, key2), /*#__PURE__*/React.createElement(\"td\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 25\n              }\n            }, value2[\"pixel_counts\"]), /*#__PURE__*/React.createElement(\"td\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 25\n              }\n            }, value2[\"cell_counts\"]))\n          );\n        });\n        var id = \"measurementsTable\" + key;\n        cellAreaList.push( /*#__PURE__*/React.createElement(\"div\", {\n          id: id,\n          hidden: true,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"b\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }\n        }, key, \" cell area measurements\"), /*#__PURE__*/React.createElement(\"table\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"tr\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"th\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 29\n          }\n        }, \"Cell\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }\n        }, \"Pixel count\"), /*#__PURE__*/React.createElement(\"th\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }\n        }, \"Cell count\")), tableData)));\n      });\n      setCellArea(cellAreaList);\n    } //Creates the options for sample dropdown menu\n\n\n    var sampleOptions = Object.entries(Object.keys(samples)).map(function (_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 2),\n          key = _ref8[0],\n          value = _ref8[1];\n\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: value,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }\n      }, value);\n    }); //Creates the options for markers dropdown menu\n\n    var markerOptions = Object.entries(samples[Object.keys(samples)[0]]).map(function (_ref9) {\n      var _ref10 = _slicedToArray(_ref9, 2),\n          key = _ref10[0],\n          value = _ref10[1];\n\n      console.log(key);\n\n      if (key == \"merged_tiff\") {\n        merged = true;\n      }\n\n      if (key == \"merged_overlays\") {\n        mergedOverlays = true;\n      }\n\n      if (key != \"merged_tiff\" && key != \"merged_overlays\") {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: key,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 24\n          }\n        }, key);\n      }\n    }); //Create the dropdown list for samples\n    //The options are created above\n\n    setDropDownSamples( /*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, \"Samples: \"), /*#__PURE__*/React.createElement(\"select\", {\n      name: \"sampleSelector\",\n      id: \"sampleSelector\",\n      onChange: function onChange(event) {\n        return handleChangeSelect(event, segmentation, merged, \"sampleDropDown\", cellAreaExecuted);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      id: \"optionNoneSample\",\n      value: \"None\",\n      selected: \"true\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 18\n      }\n    }, \"None\"), sampleOptions))); //If the backend response contains images where channels are merged (multi channel images) this if clause is executed \n\n    if (merged == true) {\n      //Creates dropdown menu for markers\n      //The options are passed in a varible. The variable is initialized above\n      setDropDownMarkers( /*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }\n      }, \"Markers: \"), /*#__PURE__*/React.createElement(\"select\", {\n        name: \"markerSelector\",\n        id: \"markerSelector\",\n        onChange: function onChange(event) {\n          return handleChangeSelect(event, segmentation, merged, \"markerDropDown\", cellAreaExecuted);\n        },\n        disabled: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        id: \"optionNonemarker\",\n        value: \"None\",\n        selected: \"true\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 26\n        }\n      }, \"None\"), markerOptions))); //Temp lists where the html elements are stored\n\n      var mergedImagesTemp = [];\n      var markerImagesTemp = []; //Map thru a dictionary, with sample names and paths to the images/plots\n\n      Object.entries(samples).map(function (_ref11) {\n        var _ref12 = _slicedToArray(_ref11, 2),\n            key1 = _ref12[0],\n            value1 = _ref12[1];\n\n        //Add a counter in here\n        //Id to images and divs, key1 contains the sample name\n        var idMergedTiff = \"idTiff\" + key1;\n        var idMergedOverlay = \"idOverlay\" + key1;\n        var idMergedTiffDiv = \"tiffDiv\" + key1;\n        var idMergedOverlayDiv = \"overlayDiv\" + key1; //Append the list with HTML element\n        //These are the merged images\n\n        mergedImagesTemp.push( /*#__PURE__*/React.createElement(\"div\", {\n          id: key1,\n          hidden: true,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 39\n          }\n        }, /*#__PURE__*/React.createElement(\"b\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 21\n          }\n        }, \"Merged image channels\"), /*#__PURE__*/React.createElement(\"div\", {\n          id: idMergedTiffDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }\n        }, key1, \" merged image channels:\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idMergedTiff,\n          src: require(\"../src/images/\" + value1[\"merged_tiff\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idMergedTiff);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 25\n          }\n        })), mergedOverlays ? /*#__PURE__*/React.createElement(\"div\", {\n          id: idMergedOverlayDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 25\n          }\n        }, \" \", key1, \" segmented cells:\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idMergedOverlay,\n          src: require(\"../src/images/\" + value1[\"merged_overlays\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idMergedOverlay);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 25\n          }\n        })) : /*#__PURE__*/React.createElement(React.Fragment, null))); //Map thru the single channel images (preprocessed, segmented, thresholded)\n\n        Object.entries(value1).map(function (_ref13) {\n          var _ref14 = _slicedToArray(_ref13, 2),\n              key = _ref14[0],\n              value = _ref14[1];\n\n          if (key != \"merged_tiff\" && key != \"merged_overlays\") {\n            //The merged files are skipped\n            //Initialize id to images and divs, key1 is the sample name and key is the marker\n            var idPreprocessed = \"idPre\" + key1 + key;\n            var idThresholded = \"idThres\" + key1 + key;\n            var idSegmented = \"idSeg\" + key1 + key;\n            var idPreprocessedDiv = \"preDiv\" + key1 + key;\n            var idThresholdedDiv = \"thresDiv\" + key1 + key;\n            var idSegmentedDiv = \"segDiv\" + key1 + key; //Append the list with HTML element\n            //These are the single channel images\n            //THe segmented image is appended only if segmentation is executed\n\n            markerImagesTemp.push( /*#__PURE__*/React.createElement(\"div\", {\n              id: key1 + key,\n              hidden: true,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 47\n              }\n            }, /*#__PURE__*/React.createElement(\"b\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 29\n              }\n            }, \"Single-channel image\"), /*#__PURE__*/React.createElement(\"div\", {\n              id: idPreprocessedDiv,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 33\n              }\n            }, key1, \" preprocessed \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n              class: \"contain\",\n              id: idPreprocessed,\n              src: require(\"../src/images/\" + value[0][\"preprocessed\"]),\n              onClick: function onClick(event) {\n                return displayFullScreen(idPreprocessed);\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 33\n              }\n            })), /*#__PURE__*/React.createElement(\"div\", {\n              id: idThresholdedDiv,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 33\n              }\n            }, key1, \" thresholded \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n              class: \"contain\",\n              id: idThresholded,\n              src: require(\"../src/images/\" + value[1][\"thresholded\"]),\n              onClick: function onClick(event) {\n                return displayFullScreen(idThresholded);\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 33\n              }\n            })), segmentation ? /*#__PURE__*/React.createElement(\"div\", {\n              id: idSegmentedDiv,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 37\n              }\n            }, key1, \" segmented \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n              class: \"contain\",\n              id: idSegmented,\n              src: require(\"../src/images/\" + value[2][\"overlays\"]),\n              onClick: function onClick(event) {\n                return displayFullScreen(idSegmented);\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 37\n              }\n            }), /*#__PURE__*/React.createElement(\"br\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 37\n              }\n            }), /*#__PURE__*/React.createElement(\"br\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 37\n              }\n            })) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n          }\n        });\n      }); //Add the temp lists to the state variable\n\n      setMergedImages(mergedImagesTemp);\n      setMarkerImages(markerImagesTemp);\n    } //If backend response contains single channel images, this if clause is executed\n    else if (merged == false) {\n      //Map thru the samples and images\n      //The return value is directly updated to state variable\n      setSampleImages(Object.entries(samples).map(function (_ref15) {\n        var _ref16 = _slicedToArray(_ref15, 2),\n            key = _ref16[0],\n            value = _ref16[1];\n\n        //Id to images and divs, key contains the sample name\n        var idPreprocessed = \"idPre\" + key;\n        var idThresholded = \"idThres\" + key;\n        var idSegmented = \"idSeg\" + key;\n        var idPreprocessedDiv = \"preDiv\" + key;\n        var idThresholdedDiv = \"thresDiv\" + key;\n        var idSegmentedDiv = \"segDiv\" + key;\n        console.log(Object.values(value)[0][2][\"overlays\"]);\n        var temp_l = Object.values(value)[0][2][\"overlays\"].split(\"-\");\n        var key_for_cell_count = temp_l[0].split(\"/\")[1] + \"-\" + temp_l[1];\n        console.log(temp_l[0].split(\"/\")[1]);\n        console.log(key_for_cell_count); //Return the html element\n        //THe segmented image and the counts are appended to the list only if the segmentation is executed\n\n        return [].concat(_toConsumableArray(sampleImages), [/*#__PURE__*/React.createElement(\"div\", {\n          id: key,\n          hidden: true,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          id: idPreprocessedDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 25\n          }\n        }, \"Preprocessed \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idPreprocessed,\n          src: require(\"../src/images/\" + Object.values(value)[0][0][\"preprocessed\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idPreprocessed);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 25\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          id: idThresholdedDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }\n        }, \"Thresholded \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idThresholded,\n          src: require(\"../src/images/\" + Object.values(value)[0][1][\"thresholded\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idThresholded);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 25\n          }\n        })), segmentation ? /*#__PURE__*/React.createElement(\"div\", {\n          id: idSegmentedDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 29\n          }\n        }, \"Segmented \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idSegmented,\n          src: require(\"../src/images/\" + Object.values(value)[0][2][\"overlays\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idSegmented);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 29\n          }\n        }, \"Number of cells detected in image segmentation : \", totalCells[key_for_cell_count]), /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 29\n          }\n        }, \"Number of cells after removing unassigned ones : \", resultingCells[key_for_cell_count]), /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 29\n          }\n        })) : /*#__PURE__*/React.createElement(React.Fragment, null))]);\n      }));\n    } //If area measurements for the thresholded image is computed\n\n\n    if (area != \"\") {\n      //Add the plot to a state variable\n      setAreaPlots( /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }\n      }, \"Measurement of marker positive area:\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        id: \"areaPlot\",\n        src: require(\"../src/images/Area/\" + area),\n        onClick: function onClick(event) {\n          return displayFullScreen(\"areaPlot\");\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }\n      })));\n    }\n\n    if (Object.keys(intensity).length != 0) {\n      //Creates the options for markers dropdown menu\n      var intensityOptions = [];\n      intensityOptions.push(Object.keys(intensity).map(function (key, index) {\n        console.log(key);\n\n        if (key != \"group_plot\") {\n          return /*#__PURE__*/React.createElement(\"option\", {\n            value: key,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 28\n            }\n          }, key);\n        }\n      }));\n      console.log(intensityOptions);\n      var dropDownPixels = /*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 34\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 37\n        }\n      }, \"Sample distributions: \"), /*#__PURE__*/React.createElement(\"select\", {\n        name: \"pixelSampleSelector\",\n        id: \"pixelSampleSelector\",\n        onChange: function onChange(event) {\n          return handleChangeSelectPixel(event);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        id: \"optionNonePixel\",\n        value: \"None\",\n        selected: \"true\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 41\n        }\n      }, \"None\"), intensityOptions));\n      console.log(dropDownPixel);\n      var pixelTempList = [];\n      setPixelComparisonPlot( /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"b\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 21\n        }\n      }, \"Cell pixel intensity distribution\"), dropDownPixels, pixelTempList, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 21\n        }\n      }, intensityCellType, \"-cell pixel intensity distribution between two groups:\"), /*#__PURE__*/React.createElement(\"img\", {\n        id: \"comparisonIntensityPlot\",\n        src: require(\"../src/images/Intensity/\" + intensity[\"group_plot\"]),\n        onClick: function onClick(event) {\n          return displayFullScreen(\"comparisonIntensityPlot\");\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 21\n        }\n      })));\n      Object.keys(intensity).forEach(function (key, value) {\n        console.log(key);\n        console.log(value);\n\n        if (key != \"group_plot\") {\n          //Id to images and divs, key contains the sample name\n          var idIntensityPlot = \"idIntensity\" + key;\n          var idIntensityPlotDiv = \"idIntensityDiv\" + key;\n          console.log(intensity[key]); //Return the html element\n          //The segmented image and the counts are appended to the list only if the segmentation is executed\n\n          pixelTempList.push( /*#__PURE__*/React.createElement(\"div\", {\n            id: \"intensity\" + key,\n            hidden: true,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            id: idIntensityPlotDiv,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 29\n            }\n          }, /*#__PURE__*/React.createElement(\"p\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 33\n            }\n          }, \"Pixel intensities of \", intensityCellType, \"-cells in \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n            class: \"contain\",\n            id: idIntensityPlot,\n            src: require(\"../src/images/Intensity/\" + intensity[key]),\n            onClick: function onClick(event) {\n              return displayFullScreen(idIntensityPlot);\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 33\n            }\n          })), /*#__PURE__*/React.createElement(\"br\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 25\n            }\n          })));\n        }\n      });\n      setPixelSamplePlot(pixelTempList);\n      console.log(pixelSamplePlot);\n    }\n  }; //Function which displays the images full screen\n\n\n  var displayFullScreen = function displayFullScreen(id) {\n    var elem = document.getElementById(id); //Get element based on id\n\n    if (document.fullscreenElement) {\n      //Exit if fullscreen\n      document.exitFullscreen();\n    } //Otherwise, no image is in fullscreen mode \n    //Display image fullscreen\n    //THis function is dependent from the browser used\n    else {\n      if (elem.requestFullscreen) {\n        elem.requestFullscreen();\n      } else if (elem.webkitRequestFullscreen) {\n        /* Safari */\n        elem.webkitRequestFullscreen();\n      } else if (elem.msRequestFullscreen) {\n        /* IE11 */\n        elem.msRequestFullscreen();\n      }\n    }\n  }; //Handles changes in the sample drop-down list\n  //segmentation and merged are boolean parameters\n  //call parameter contains the source of the function call (sampleDropDown or markerDropDown)\n  //THis function is both for multi and single channel images. It is specified in the comments which images the if clause handles\n\n\n  var handleChangeSelect = function handleChangeSelect(event, segmentation, merged, call, cellAreaExecuted) {\n    //Displays the merged tiff and the merged masks\n    //For multichannel images\n    if (merged == true && event.target.value != \"None\" && call == \"sampleDropDown\") {\n      //Format the variables based on the selected value in drop down menu\n      var idMergedDiv = \"tiffDiv\" + event.target.value;\n      var idOverlayDiv = \"overlayDiv\" + event.target.value; //For cell measurement table\n\n      var idMeasurements = \"measurementsTable\" + event.target.value; //When sample is changed, change the value of markerSelector to None \n\n      document.getElementById(\"markerSelector\").value = \"None\";\n      document.getElementById(\"markerSelector\").disabled = false; //Display the markerSelector dropDown menu\n      //Display the images\n\n      document.getElementById(idMergedDiv).style.display = \"block\";\n      document.getElementById(idOverlayDiv).style.display = \"block\"; //Check that cell area measurements is executed\n\n      if (cellAreaExecuted == true) {\n        document.getElementById(idMeasurements).style.display = \"block\";\n      }\n    } //If the sampleSelector value is changed to None, hide the markerSelector dropdown menu\n    //For multichannel images\n    else if (merged == true && event.target.value == \"None\" && call == \"sampleDropDown\") {\n      document.getElementById(\"markerSelector\").value = \"None\"; //Changes value\n\n      document.getElementById(\"markerSelector\").disabled = true; //Hide\n    } //This if statement displays the the single channel images (input image, thresholded, and segmented)\n    //Displays also the checkboxes which can be used to hide the images listed above\n    //THis if statement is both for images which composes of multiple channels and single channels\n    else if (merged == true && event.target.value != \"None\" && call == \"markerDropDown\" || merged == false && event.target.value != \"None\" && call == \"sampleDropDown\") {\n      //IF the checkbox exists it is checked by default\n      if (document.getElementById(\"preprocessedImgCheck\") != null) {\n        document.getElementById(\"preprocessedImgCheck\").checked = true;\n      }\n\n      if (document.getElementById(\"thresholdImgCheck\") != null) {\n        document.getElementById(\"thresholdImgCheck\").checked = true;\n      }\n\n      if (document.getElementById(\"segmentedImgCheck\") != null) {\n        document.getElementById(\"segmentedImgCheck\").checked = true;\n      }\n\n      var idPreprocessedDiv = \"\";\n      var idThresholdedDiv = \"\";\n      var idSegmentedDiv = \"\"; //If statement for merged images (multiple channels)\n\n      if (merged == true) {\n        //Get's the current sample from the sampleSelector\n        var currentSample = document.getElementById(\"sampleSelector\").value; //THe current sample is used to create the id of the DIV where the images are stored\n        //event.target value contains the marker \n        //The id is in form preDiv + sample + marker (e.g preDivSample1LMX)\n\n        idPreprocessedDiv = \"preDiv\" + currentSample + event.target.value;\n        idThresholdedDiv = \"thresDiv\" + currentSample + event.target.value;\n        idSegmentedDiv = \"segDiv\" + currentSample + event.target.value; //Using the id to display the images\n\n        document.getElementById(idPreprocessedDiv).style.display = \"block\";\n        document.getElementById(idThresholdedDiv).style.display = \"block\";\n        document.getElementById(idSegmentedDiv).style.display = \"block\";\n      } // If statement for single channel images\n      else if (merged == false) {\n        //Build the div id from input value\n        idPreprocessedDiv = \"preDiv\" + event.target.value;\n        idThresholdedDiv = \"thresDiv\" + event.target.value;\n        idSegmentedDiv = \"segDiv\" + event.target.value; //If the image is hidden make them visible\n\n        document.getElementById(idPreprocessedDiv).style.display = \"block\";\n        document.getElementById(idThresholdedDiv).style.display = \"block\";\n\n        if (segmentation == true) {\n          document.getElementById(idSegmentedDiv).style.display = \"block\";\n        }\n      } //Creates the checkbox HTML element to each image\n\n\n      setCheckbox( /*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"colQC-1\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"checkbox\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 29\n        }\n      }, \"Preprocessed image: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"preprocessedImgCheck\",\n        onClick: function onClick() {\n          return handleCheckbox(idPreprocessedDiv, \"preprocessedImgCheck\");\n        },\n        defaultChecked: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"colQC-2\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"checkbox\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 29\n        }\n      }, \"Thresholded image: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"thresholdImgCheck\",\n        onClick: function onClick() {\n          return handleCheckbox(idThresholdedDiv, \"thresholdImgCheck\");\n        },\n        defaultChecked: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 29\n        }\n      }))), segmentation ? /*#__PURE__*/React.createElement(\"div\", {\n        class: \"colQC-3\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"checkbox\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 35\n        }\n      }, \"Segmented image: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"segmentedImgCheck\",\n        onClick: function onClick() {\n          return handleCheckbox(idSegmentedDiv, \"segmentedImgCheck\");\n        },\n        defaultChecked: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 35\n        }\n      }))) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n    } //Displays the main div where the merged sample specific images are stored\n    //Both for multi and single channel images\n\n\n    if (event.target.value != \"None\" && call == \"sampleDropDown\") {\n      document.getElementById(event.target.value).style.display = \"block\";\n    } //Displays the main div where the marker specific images are stored\n    //For multichannel images\n\n\n    if (event.target.value != \"None\" && call == \"markerDropDown\") {\n      document.getElementById(sample + event.target.value).style.display = \"block\";\n    } //Hides the previously selected sample, so that only on sample is displayed at the time\n\n\n    if (sample != \"\" && sample != \"None\" && sample != event.target.value && call == \"sampleDropDown\") {\n      if (merged == true) {\n        setCheckbox(\"\"); //after the sample changes, hide the checkbox which is used to control the single channel images\n      }\n\n      document.getElementById(sample).style.display = \"none\";\n\n      if (cellAreaExecuted == true) {\n        document.getElementById(cellTableG).style.display = \"none\";\n      } //Hides the chosen marker image after sample changes\n\n\n      if (marker != \"\" && marker != \"None\" && merged == true) {\n        document.getElementById(sample + marker).style.display = \"none\";\n      }\n    } //Hides the previously selected marker image, so that only one set of marker images is displayed at once\n    //Multichannel images\n    else if (marker != \"\" && marker != \"None\" && marker != event.target.value && call == \"markerDropDown\") {\n      document.getElementById(sample + marker).style.display = \"none\";\n    } //Empties (hides) the checkbox variable if marker is set to null\n    //Multichannel images\n    else if (call == \"markerDropDown\" && marker == \"None\" && checkbox != \"\") {\n      setCheckbox(\"\");\n    } //Hides previous images\n    //For single channel images\n    else if (sample != \"\" && sample != \"None\" && merged == false) {\n      document.getElementById(sample).style.display = \"none\";\n    } //Hides the checkboxes if condition is met\n    //THis if statement is bot for single and multi channel images\n\n\n    if (event.target.value == \"None\" && merged == false || event.target.value == \"None\" && call == \"markerDropDown\") {\n      setCheckbox(\"\");\n    } //Update the current sample and marker values, these values are \"previous\" values when the function is called next time\n\n\n    if (call == \"sampleDropDown\") {\n      sample = event.target.value;\n      cellTableG = \"measurementsTable\" + event.target.value;\n    }\n\n    if (call == \"markerDropDown\") {\n      marker = event.target.value;\n    }\n  }; //This function handles changes in checkboxes\n  //Parameters are the id of image div and id of checkbox\n  //The checkboxes are created in function above\n\n\n  var handleCheckbox = function handleCheckbox(idDiv, idCb) {\n    var elem = document.getElementById(idDiv); //Get the div element\n    //If clause which hides the element\n\n    if (window.getComputedStyle(elem).display == \"block\") {\n      elem.style.display = \"none\";\n      document.getElementById(idCb).defaultChecked = false;\n    } //If clause which displays the element\n    else if (window.getComputedStyle(elem).display == \"none\") {\n      elem.style.display = \"block\";\n      document.getElementById(idCb).defaultChecked = true;\n    }\n  };\n\n  var handleChangeSelectPixel = function handleChangeSelectPixel(event) {\n    console.log(pixelImage); //displays images/nothing depending of the selected drop-down value\n\n    var idIntensityDiv = \"idIntensityDiv\" + event.target.value;\n    console.log(idIntensityDiv); //Make the image DIV visible       \n\n    if (event.target.value != \"None\") {\n      //document.getElementById(idIntensityDiv).style.display = \"block\"\n      document.getElementById(\"intensity\" + event.target.value).style.display = \"block\";\n    } //Hides images depending of the value\n\n\n    if (pixelImage != \"\" && pixelImage != \"intensityNone\") {\n      document.getElementById(pixelImage).style.display = \"none\";\n    }\n\n    pixelImage = \"intensity\" + event.target.value; //Update the value to a global variable\n  }; //Display HTML to the user\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    class: \"resultsForm\",\n    id: \"resultsForm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"load\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 21\n    }\n  }, \"Running SIMPLI\")), /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"results\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 622,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 21\n    }\n  }, \"SIMPLI results\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"resultsButton\",\n    type: \"button\",\n    onClick: function onClick(event) {\n      return displayResults();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 21\n    }\n  }, \"Display results\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"colQC-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 627,\n      columnNumber: 25\n    }\n  }, dropDownSamples), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"colQC-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 25\n    }\n  }, dropDownMarkers)), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"colQC-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 635,\n      columnNumber: 21\n    }\n  }, checkbox), sampleImages, markerImages, mergedImages, cellArea, areaPlots, pixelComparisonPlot)));\n};\n\nexport default GetResults;","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","axios","GetResults","plotPaths","setPlotPaths","areaPlots","setAreaPlots","sampleImages","setSampleImages","dropDownSamples","setDropDownSamples","dropDownMarkers","setDropDownMarkers","checkbox","setCheckbox","displaySegmentationCb","setDisplaySegmentationCb","preprocessedCb","setPreprocessedCb","firstCall","setFirstCall","totalCells","setTotalCells","resultingCells","setResultingCells","markerImages","setMarkerImages","mergedImages","setMergedImages","pixelComparisonPlot","setPixelComparisonPlot","pixelSamplePlot","setPixelSamplePlot","dropDownPixel","setDropDownPixels","cellArea","setCellArea","sample","marker","pixelImage","cellTableG","displayResults","document","getElementById","style","display","get","then","response","data","console","log","samples","area","intensity","displayImages","intensityCellType","cellAreaMeasurements","segmentation","merged","mergedOverlays","cellAreaExecuted","counter","Object","entries","keys","map","key","value","assign","includes","cellAreaList","length","tableData","key2","value2","id","push","sampleOptions","markerOptions","event","handleChangeSelect","mergedImagesTemp","markerImagesTemp","key1","value1","idMergedTiff","idMergedOverlay","idMergedTiffDiv","idMergedOverlayDiv","require","displayFullScreen","idPreprocessed","idThresholded","idSegmented","idPreprocessedDiv","idThresholdedDiv","idSegmentedDiv","values","temp_l","split","key_for_cell_count","intensityOptions","index","dropDownPixels","handleChangeSelectPixel","pixelTempList","forEach","idIntensityPlot","idIntensityPlotDiv","elem","fullscreenElement","exitFullscreen","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","call","target","idMergedDiv","idOverlayDiv","idMeasurements","disabled","checked","currentSample","handleCheckbox","idDiv","idCb","window","getComputedStyle","defaultChecked","idIntensityDiv"],"sources":["/home/ernohanninen/simpli_project/App/src/getResults.js"],"sourcesContent":["import React,  { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\n\n\n\nconst GetResults = () => { \n    \n    //Variables\n    const [plotPaths, setPlotPaths] = useState(\"\")\n    const [areaPlots, setAreaPlots] = useState(\"\")\n    const [sampleImages, setSampleImages] = useState(\"\")\n\n    const [dropDownSamples, setDropDownSamples] = useState(\"\")\n    const [dropDownMarkers, setDropDownMarkers] = useState(\"\")\n    \n    const [checkbox, setCheckbox] = useState(\"\")\n    const [displaySegmentationCb, setDisplaySegmentationCb] = useState(false)\n    const [preprocessedCb, setPreprocessedCb] = useState(false)\n    const [firstCall,setFirstCall] = useState(true)\n    const [totalCells, setTotalCells] = useState({})\n    const [resultingCells, setResultingCells] = useState({})\n    const [markerImages, setMarkerImages] = useState(\"\")\n    const [mergedImages, setMergedImages] = useState([])\n    const [pixelComparisonPlot, setPixelComparisonPlot] = useState(\"\")\n    const [pixelSamplePlot, setPixelSamplePlot] = useState(\"\")\n    const [dropDownPixel, setDropDownPixels] = useState(\"\")\n    const [cellArea, setCellArea] = useState(\"\")\n    \n\n    \n    //const [displaySegmented, setDisplaySegmented] = useState(true)\n\n    \n    var sample = \"\"\n    var marker = \"\"\n    var pixelImage = \"\"\n    var cellTableG = \"\"\n\n    //Function which get the images from backend\n    const displayResults = () => {\n        document.getElementById(\"resultsButton\").style.display = \"none\"\n        axios.get(\"/fetchResults\")\n        .then(function(response){\n           setTotalCells(response.data[1])\n           setResultingCells(response.data[2])\n           console.log(\"PALUU ARVO\")\n           console.log(response.data)\n\n           console.log(response.data[1])\n           console.log(response.data[2])\n           console.log(response.data[3])\n           console.log(response.data[4])\n           //Extracting values from dictionary\n           let samples = response.data[0][\"samples\"]\n           let area = response.data[0][\"area\"]\n           let intensity = response.data[0][\"intensity\"]\n           console.log(area)\n           console.log(samples)\n        \n           setPlotPaths(area)    \n           displayImages(area, samples, intensity, response.data[1], response.data[2], response.data[3], response.data[4]) //Calling function which displays the images         \n        })\n    }\n    //Function which displays the images to the user\n    const displayImages = (area, samples, intensity, totalCells, resultingCells, intensityCellType, cellAreaMeasurements) => { \n\n        let segmentation = false\n        let merged = false\n        let mergedOverlays = false\n        let cellAreaExecuted = false\n\n        let counter = 0\n\n        Object.entries(samples[Object.keys(samples)[0]]).map(([key,value]) => {\n            console.log(key)\n            console.log(value)\n            console.log(Object.keys(Object.assign({}, ...value)))\n            if(Object.keys(Object.assign({}, ...value)).includes(\"overlays\")){\n                console.log(\"SEGMENTATION\")\n                segmentation = true\n            }\n        })\n\n        var cellAreaList = []\n        if(Object.keys(cellAreaMeasurements).length != 0){\n            \n            cellAreaExecuted = true\n\n            console.log(cellAreaMeasurements)\n            //Object.entries(cellAreaMeasurements).map(([key,value]) => { //Goes thru at sample level\n            Object.entries(cellAreaMeasurements).map(([key, value]) => {\n\n                var tableData = Object.entries(value).map(([key2,value2]) =>   //Goes thru at cell type level\n                    <tr>\n                        <td>{key2}</td>\n                        <td>{value2[\"pixel_counts\"]}</td>\n                        <td>{value2[\"cell_counts\"]}</td>\n                    </tr>\n                )\n\n                let id = \"measurementsTable\" + key\n                cellAreaList.push(\n                    <div id={id} hidden>\n                        <br></br>\n                        <b>{key} cell area measurements</b>\n                        <table>\n                        <tr>\n                            <th>Cell</th>\n                            <th>Pixel count</th>\n                            <th>Cell count</th>\n                        </tr>\n                        {tableData}\n                        \n    \n                        </table>\n                    </div>\n                )\n            })\n            setCellArea(cellAreaList)\n        }\n\n        \n        //Creates the options for sample dropdown menu\n        var sampleOptions = Object.entries(Object.keys(samples)).map(([key,value]) => \n            <option value={value}>{value}</option>\n        )\n        //Creates the options for markers dropdown menu\n        var markerOptions = Object.entries(samples[Object.keys(samples)[0]]).map(([key,value]) => {\n            console.log(key)\n            if(key == \"merged_tiff\"){\n                merged = true\n            }\n            if(key == \"merged_overlays\"){\n                mergedOverlays = true\n            }\n\n            if(key != \"merged_tiff\" && key != \"merged_overlays\"){\n                return <option value={key}>{key}</option>\n            }\n        })\n\n        \n        //Create the dropdown list for samples\n        //The options are created above\n        setDropDownSamples(\n        <div class=\"row\">\n            <p>Samples: </p>\n            <select name=\"sampleSelector\" id=\"sampleSelector\" onChange={event => handleChangeSelect(event, segmentation, merged, \"sampleDropDown\", cellAreaExecuted)}>\n                 <option id=\"optionNoneSample\" value=\"None\" selected=\"true\">None</option>  \n                 {sampleOptions}      \n            </select>             \n        </div>)\n        \n        //If the backend response contains images where channels are merged (multi channel images) this if clause is executed \n        if(merged == true){\n            //Creates dropdown menu for markers\n            //The options are passed in a varible. The variable is initialized above\n            setDropDownMarkers(\n                <div class=\"row\">\n                    <p>Markers: </p>\n                    <select name=\"markerSelector\" id=\"markerSelector\" onChange={event => handleChangeSelect(event, segmentation, merged, \"markerDropDown\", cellAreaExecuted)} disabled>\n                         <option id=\"optionNonemarker\" value=\"None\" selected=\"true\">None</option>  \n                         {markerOptions}         \n                    </select>               \n                </div>\n            )\n            //Temp lists where the html elements are stored\n            let mergedImagesTemp = []\n            let markerImagesTemp = []\n            //Map thru a dictionary, with sample names and paths to the images/plots\n            Object.entries(samples).map(([key1,value1]) => {\n\n                //Add a counter in here\n\n                //Id to images and divs, key1 contains the sample name\n                let idMergedTiff = \"idTiff\" + key1\n                let idMergedOverlay = \"idOverlay\" + key1\n                let idMergedTiffDiv = \"tiffDiv\" + key1\n                let idMergedOverlayDiv = \"overlayDiv\" + key1\n\n                //Append the list with HTML element\n                //These are the merged images\n                mergedImagesTemp.push(<div id = {key1} hidden>\n                    <b>Merged image channels</b>\n                    <div id = {idMergedTiffDiv}>\n                        <p>{key1} merged image channels:</p>    \n                        <img class=\"contain\" id ={idMergedTiff} src={require(\"../src/images/\" + value1[\"merged_tiff\"])} onClick= {event => displayFullScreen(idMergedTiff)}></img>\n                    </div>\n                    {mergedOverlays ? (\n                    <div id = {idMergedOverlayDiv}>\n                        <p> {key1} segmented cells:</p>\n                        <img class=\"contain\" id ={idMergedOverlay} src={require(\"../src/images/\" + value1[\"merged_overlays\"])}  onClick= {event => displayFullScreen(idMergedOverlay)}></img>\n                    </div>\n                    ):(<></>)         \n                }   \n                    \n                </div>)    \n                //Map thru the single channel images (preprocessed, segmented, thresholded)\n                Object.entries(value1).map(([key,value]) => { \n                    if(key != \"merged_tiff\" && key != \"merged_overlays\"){ //The merged files are skipped\n\n                        //Initialize id to images and divs, key1 is the sample name and key is the marker\n                        let idPreprocessed = \"idPre\" + key1 + key\n                        let idThresholded = \"idThres\" + key1+ key\n                        let idSegmented = \"idSeg\" + key1+ key\n        \n                        let idPreprocessedDiv = \"preDiv\" + key1+ key\n                        let idThresholdedDiv = \"thresDiv\"+ key1 + key\n                        let idSegmentedDiv = \"segDiv\"+ key1 + key\n                        \n                        //Append the list with HTML element\n                        //These are the single channel images\n                        //THe segmented image is appended only if segmentation is executed\n                        markerImagesTemp.push(<div id = {key1 + key} hidden>\n                            <b>Single-channel image</b>\n                            <div id = {idPreprocessedDiv}>\n                                <p>{key1} preprocessed {key}:</p>    \n                                <img class=\"contain\" id ={idPreprocessed} src={require(\"../src/images/\" + value[0][\"preprocessed\"])} onClick= {event => displayFullScreen(idPreprocessed)}></img>\n                            </div>\n                            <div id = {idThresholdedDiv}>\n                                <p>{key1} thresholded {key}:</p>\n                                <img class=\"contain\" id ={idThresholded} src={require(\"../src/images/\" + value[1][\"thresholded\"])}  onClick= {event => displayFullScreen(idThresholded)}></img>\n                            </div>\n                            {segmentation ? (\n                                <div id = {idSegmentedDiv}>\n                                    <p>{key1} segmented {key}:</p>\n                                    <img class=\"contain\" id ={idSegmented} src={require(\"../src/images/\" + value[2][\"overlays\"])}  onClick= {event => displayFullScreen(idSegmented)}></img>         \n                                    <br></br>\n                                    <br></br>\n                                </div>               \n                            ):(<></>)         \n                            }   \n                            </div>)\n                    }\n                })\n                \n            })\n            //Add the temp lists to the state variable\n            setMergedImages(mergedImagesTemp)\n            setMarkerImages(markerImagesTemp)\n\n\n            \n        }\n        //If backend response contains single channel images, this if clause is executed\n        else if(merged == false){\n            //Map thru the samples and images\n            //The return value is directly updated to state variable\n            setSampleImages(Object.entries(samples).map(([key,value]) => {\n                //Id to images and divs, key contains the sample name\n                let idPreprocessed = \"idPre\" + key\n                let idThresholded = \"idThres\" + key\n                let idSegmented = \"idSeg\" + key\n\n                let idPreprocessedDiv = \"preDiv\" + key\n                let idThresholdedDiv = \"thresDiv\" + key\n                let idSegmentedDiv = \"segDiv\" + key\n\n                console.log(Object.values(value)[0][2][\"overlays\"])\n                let temp_l = Object.values(value)[0][2][\"overlays\"].split(\"-\")\n                let key_for_cell_count = temp_l[0].split(\"/\")[1] + \"-\" + temp_l[1]\n                console.log(temp_l[0].split(\"/\")[1])\n                console.log(key_for_cell_count)\n                //Return the html element\n                //THe segmented image and the counts are appended to the list only if the segmentation is executed\n                return([...sampleImages, \n                <div id = {key} hidden>\n                    \n                    <div id = {idPreprocessedDiv}>\n                        <p>Preprocessed {key}:</p>    \n                        <img class=\"contain\" id ={idPreprocessed} src={require(\"../src/images/\" + Object.values(value)[0][0][\"preprocessed\"])} onClick= {event => displayFullScreen(idPreprocessed)}></img>\n                    </div>\n                    <div id = {idThresholdedDiv}>\n                        <p>Thresholded {key}:</p>\n                        <img class=\"contain\" id ={idThresholded} src={require(\"../src/images/\" + Object.values(value)[0][1][\"thresholded\"])}  onClick= {event => displayFullScreen(idThresholded)}></img>\n                    </div>\n                    {segmentation ? (\n                        <div id = {idSegmentedDiv}>\n                            <p>Segmented {key}:</p>\n                            <img class=\"contain\" id ={idSegmented} src={require(\"../src/images/\" + Object.values(value)[0][2][\"overlays\"])}  onClick= {event => displayFullScreen(idSegmented)}></img>  \n                            <p>Number of cells detected in image segmentation : {totalCells[key_for_cell_count]}</p> \n                            <p>Number of cells after removing unassigned ones : {resultingCells[key_for_cell_count]}</p>       \n                            <br></br>\n                            <br></br>\n                        </div>               \n                    ):(<></>)         \n                    }   \n                </div>])\n            }))\n\n        }\n       \n\n\n\n        \n\n        //If area measurements for the thresholded image is computed\n        if(area != \"\"){\n            //Add the plot to a state variable\n            setAreaPlots(\n                <div>\n                    <b>Measurement of marker positive area:</b>\n                    <br></br>\n                    <img id =\"areaPlot\" src={require(\"../src/images/Area/\" + area)} onClick= {event => displayFullScreen(\"areaPlot\")}></img>\n                </div>\n            )\n        }\n\n        if(Object.keys(intensity).length != 0){\n\n                   \n            //Creates the options for markers dropdown menu\n            var intensityOptions = []\n            intensityOptions.push(Object.keys(intensity).map((key,index) => {\n                console.log(key)\n                if(key != \"group_plot\"){\n                    return <option value={key}>{key}</option>\n                }\n            }))\n\n            console.log(intensityOptions)\n\n            var dropDownPixels = <div class=\"row\">\n                                    <p>Sample distributions: </p>\n                                    <select name=\"pixelSampleSelector\" id=\"pixelSampleSelector\" onChange={event => handleChangeSelectPixel(event)}>\n                                        <option id=\"optionNonePixel\" value=\"None\" selected=\"true\">None</option>  \n                                        {intensityOptions}              \n                                    </select>                     \n                                </div>\n            console.log(dropDownPixel)\n            var pixelTempList = []\n\n            setPixelComparisonPlot(\n                <div>\n                    <br></br>\n                    <br></br>\n                    <b>Cell pixel intensity distribution</b>\n                    {dropDownPixels}\n                    {pixelTempList}                  \n                    <p>{intensityCellType}-cell pixel intensity distribution between two groups:</p>\n                    <img id=\"comparisonIntensityPlot\" src={require(\"../src/images/Intensity/\" + intensity[\"group_plot\"])} onClick = {event => displayFullScreen(\"comparisonIntensityPlot\")}></img>\n                </div>\n            )\n\n            Object.keys(intensity).forEach((key,value) => {\n                    console.log(key)\n                    console.log(value)\n                    if(key != \"group_plot\"){\n                        //Id to images and divs, key contains the sample name\n                        let idIntensityPlot = \"idIntensity\" + key\n                        let idIntensityPlotDiv = \"idIntensityDiv\" + key\n                        console.log(intensity[key])\n        \n                        //Return the html element\n                        //The segmented image and the counts are appended to the list only if the segmentation is executed\n                        pixelTempList.push(\n                        <div id = {\"intensity\" + key} hidden>       \n                            <div id = {idIntensityPlotDiv}>\n                                <p>Pixel intensities of {intensityCellType}-cells in {key}:</p>    \n                                <img class=\"contain\" id ={idIntensityPlot} src={require(\"../src/images/Intensity/\" + intensity[key])} onClick= {event => displayFullScreen(idIntensityPlot)}></img>\n                            </div>\n                        <br></br>    \n                        </div>)\n\n                    }             \n                }\n            )\n            setPixelSamplePlot(pixelTempList)\n            console.log(pixelSamplePlot)\n            \n\n        }    \n    } \n\n    //Function which displays the images full screen\n    const displayFullScreen = (id) => { \n        let elem = document.getElementById(id) //Get element based on id\n        if(document.fullscreenElement){ //Exit if fullscreen\n            document.exitFullscreen()\n        }\n        //Otherwise, no image is in fullscreen mode \n        //Display image fullscreen\n        //THis function is dependent from the browser used\n        else{\n            if (elem.requestFullscreen) {\n                elem.requestFullscreen();\n              } else if (elem.webkitRequestFullscreen) { /* Safari */\n                elem.webkitRequestFullscreen();\n              } else if (elem.msRequestFullscreen) { /* IE11 */\n                elem.msRequestFullscreen();\n              }\n        }\n        \n    }\n\n    //Handles changes in the sample drop-down list\n    //segmentation and merged are boolean parameters\n    //call parameter contains the source of the function call (sampleDropDown or markerDropDown)\n    //THis function is both for multi and single channel images. It is specified in the comments which images the if clause handles\n    const handleChangeSelect = (event, segmentation, merged, call, cellAreaExecuted) => { \n\n        //Displays the merged tiff and the merged masks\n        //For multichannel images\n        if(merged == true && event.target.value!=\"None\" && call == \"sampleDropDown\"){\n            //Format the variables based on the selected value in drop down menu\n            let idMergedDiv = \"tiffDiv\" + event.target.value\n            let idOverlayDiv = \"overlayDiv\" + event.target.value\n\n            //For cell measurement table\n            let idMeasurements = \"measurementsTable\" + event.target.value\n\n            //When sample is changed, change the value of markerSelector to None \n            document.getElementById(\"markerSelector\").value = \"None\" \n            document.getElementById(\"markerSelector\").disabled = false //Display the markerSelector dropDown menu\n            //Display the images\n            document.getElementById(idMergedDiv).style.display = \"block\"\n            document.getElementById(idOverlayDiv).style.display = \"block\" \n\n            //Check that cell area measurements is executed\n            if(cellAreaExecuted == true){\n                document.getElementById(idMeasurements).style.display = \"block\"           \n            }\n        }\n\n        //If the sampleSelector value is changed to None, hide the markerSelector dropdown menu\n        //For multichannel images\n        else if(merged == true && event.target.value==\"None\" && call == \"sampleDropDown\"){\n            document.getElementById(\"markerSelector\").value = \"None\" //Changes value\n            document.getElementById(\"markerSelector\").disabled = true //Hide\n        \n        }\n\n        //This if statement displays the the single channel images (input image, thresholded, and segmented)\n        //Displays also the checkboxes which can be used to hide the images listed above\n        //THis if statement is both for images which composes of multiple channels and single channels\n        else if(merged == true && event.target.value!=\"None\" && call == \"markerDropDown\" || merged == false && event.target.value != \"None\" && call == \"sampleDropDown\"){\n\n            //IF the checkbox exists it is checked by default\n            if(document.getElementById(\"preprocessedImgCheck\") != null){\n                document.getElementById(\"preprocessedImgCheck\").checked = true;    \n            }\n            if(document.getElementById(\"thresholdImgCheck\") != null){\n                document.getElementById(\"thresholdImgCheck\").checked = true; \n            }\n            if(document.getElementById(\"segmentedImgCheck\") != null){\n                document.getElementById(\"segmentedImgCheck\").checked = true;    \n            }    \n\n            let idPreprocessedDiv = \"\"\n            let idThresholdedDiv = \"\"\n            let idSegmentedDiv = \"\"\n\n            //If statement for merged images (multiple channels)\n            if(merged == true){\n                //Get's the current sample from the sampleSelector\n                let currentSample = document.getElementById(\"sampleSelector\").value\n                //THe current sample is used to create the id of the DIV where the images are stored\n                //event.target value contains the marker \n                //The id is in form preDiv + sample + marker (e.g preDivSample1LMX)\n                idPreprocessedDiv = \"preDiv\" + currentSample + event.target.value\n                idThresholdedDiv = \"thresDiv\"+ currentSample + event.target.value\n                idSegmentedDiv = \"segDiv\" + currentSample+ event.target.value\n\n                //Using the id to display the images\n                document.getElementById(idPreprocessedDiv).style.display = \"block\"\n                document.getElementById(idThresholdedDiv).style.display = \"block\"\n                document.getElementById(idSegmentedDiv).style.display = \"block\"\n            }\n            // If statement for single channel images\n            else if(merged == false){\n                //Build the div id from input value\n                idPreprocessedDiv = \"preDiv\" + event.target.value\n                idThresholdedDiv = \"thresDiv\" + event.target.value\n                idSegmentedDiv = \"segDiv\" + event.target.value\n\n                //If the image is hidden make them visible\n                document.getElementById(idPreprocessedDiv).style.display = \"block\"\n                document.getElementById(idThresholdedDiv).style.display = \"block\"\n                if(segmentation == true){\n                    document.getElementById(idSegmentedDiv).style.display = \"block\"\n                }\n\n            }\n            \n            //Creates the checkbox HTML element to each image\n            setCheckbox(\n                <div class=\"row\">\n                    <div class = \"colQC-1\">\n                        <div class=\"checkbox\">    \n                            <p>Preprocessed image: </p>\n                            <input type = \"checkbox\" id=\"preprocessedImgCheck\" onClick={()=>handleCheckbox(idPreprocessedDiv, \"preprocessedImgCheck\")} defaultChecked/>                \n                        </div>\n                    </div>\n                    <div class = \"colQC-2\">\n                        <div class=\"checkbox\">    \n                            <p>Thresholded image: </p>\n                            <input type = \"checkbox\" id=\"thresholdImgCheck\" onClick={()=>handleCheckbox(idThresholdedDiv, \"thresholdImgCheck\")} defaultChecked/>                \n                        </div>\n                    </div>\n                           \n                    {segmentation ? (\n                              <div class = \"colQC-3\">\n                              <div class=\"checkbox\">    \n                                  <p>Segmented image: </p>\n                                  <input type = \"checkbox\" id=\"segmentedImgCheck\" onClick={()=>handleCheckbox(idSegmentedDiv, \"segmentedImgCheck\")} defaultChecked/>                \n                              </div>         \n    \n                          </div>\n                    ):(<></>)         \n                    }         \n                </div>    \n            )             \n        }\n\n        //Displays the main div where the merged sample specific images are stored\n        //Both for multi and single channel images\n        if(event.target.value != \"None\" && call == \"sampleDropDown\"){\n            document.getElementById(event.target.value).style.display = \"block\"\n        }\n        //Displays the main div where the marker specific images are stored\n        //For multichannel images\n        if(event.target.value != \"None\" && call == \"markerDropDown\"){\n            document.getElementById(sample + event.target.value).style.display = \"block\"\n        }\n\n        //Hides the previously selected sample, so that only on sample is displayed at the time\n        if(sample != \"\" && sample != \"None\" && sample != event.target.value && call == \"sampleDropDown\"){\n            if(merged == true){\n                setCheckbox(\"\") //after the sample changes, hide the checkbox which is used to control the single channel images\n            }\n            document.getElementById(sample).style.display = \"none\"\n            \n            if(cellAreaExecuted == true){\n                document.getElementById(cellTableG).style.display = \"none\"\n            }\n\n            //Hides the chosen marker image after sample changes\n            if(marker != \"\" && marker != \"None\" && merged == true){\n                document.getElementById(sample+marker).style.display = \"none\"\n            }\n\n        }\n        //Hides the previously selected marker image, so that only one set of marker images is displayed at once\n        //Multichannel images\n        else if(marker != \"\" && marker != \"None\" && marker != event.target.value && call == \"markerDropDown\"){\n            document.getElementById(sample + marker).style.display = \"none\"\n        }\n        //Empties (hides) the checkbox variable if marker is set to null\n        //Multichannel images\n        else if(call == \"markerDropDown\" && marker == \"None\" && checkbox != \"\"){\n            setCheckbox(\"\")\n        }\n        //Hides previous images\n        //For single channel images\n        else if(sample != \"\" && sample != \"None\" && merged == false){\n            document.getElementById(sample).style.display = \"none\"\n        }\n        //Hides the checkboxes if condition is met\n        //THis if statement is bot for single and multi channel images\n        if(event.target.value == \"None\" && merged == false || event.target.value == \"None\" && call == \"markerDropDown\"){\n            setCheckbox(\"\")\n        }\n\n        //Update the current sample and marker values, these values are \"previous\" values when the function is called next time\n        if(call == \"sampleDropDown\"){\n            sample = event.target.value\n            cellTableG = \"measurementsTable\" + event.target.value\n        }\n        if(call == \"markerDropDown\"){\n            marker = event.target.value\n        }     \n    }\n\n    //This function handles changes in checkboxes\n    //Parameters are the id of image div and id of checkbox\n    //The checkboxes are created in function above\n    const handleCheckbox = (idDiv, idCb) => {\n\n        var elem = document.getElementById(idDiv) //Get the div element\n        //If clause which hides the element\n        if(window.getComputedStyle(elem).display == \"block\"){\n            elem.style.display = \"none\"\n            document.getElementById(idCb).defaultChecked = false;\n        }\n        //If clause which displays the element\n        else if(window.getComputedStyle(elem).display == \"none\"){\n            elem.style.display =\"block\"\n            document.getElementById(idCb).defaultChecked = true;\n        }\n\n    }\n \n    const handleChangeSelectPixel = (event) =>{\n        console.log(pixelImage)\n        //displays images/nothing depending of the selected drop-down value\n        let idIntensityDiv = \"idIntensityDiv\" + event.target.value\n         \n        console.log(idIntensityDiv)\n        //Make the image DIV visible       \n        if(event.target.value != \"None\"){\n            //document.getElementById(idIntensityDiv).style.display = \"block\"\n            document.getElementById(\"intensity\" + event.target.value).style.display = \"block\"\n        }\n\n        //Hides images depending of the value\n        if(pixelImage != \"\" && pixelImage != \"intensityNone\"){\n            document.getElementById(pixelImage).style.display = \"none\"\n        }\n        pixelImage = \"intensity\" + event.target.value //Update the value to a global variable\n        \n    }\n    //Display HTML to the user\n    return(\n        <div>\n            <form class=\"resultsForm\" id=\"resultsForm\">\n                <div hidden id=\"load\">\n                    <p>Running SIMPLI</p>         \n                </div>\n                \n                <div hidden id=\"results\">  \n                    <b>SIMPLI results</b>  \n                    <br></br>\n                    <button id=\"resultsButton\" type=\"button\" onClick={event => displayResults()}>Display results</button>\n                    <div class = \"row\">\n                        <div class = \"colQC-1\">\n                            {dropDownSamples}     \n                        </div>\n                        <div class = \"colQC-2\">\n                            {dropDownMarkers}     \n                        </div>\n                       \n                    </div>\n                    <div class = \"colQC-1\">\n                            {checkbox}                     \n                    </div>\n                        \n                    {sampleImages}\n                    {markerImages}\n                    {mergedImages}\n                    {cellArea}\n                    {areaPlots}\n                    {pixelComparisonPlot}\n\n                </div>\n            </form>\n        </div>\n    )\n}\nexport default GetResults;"],"mappings":"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"},"metadata":{},"sourceType":"module"}