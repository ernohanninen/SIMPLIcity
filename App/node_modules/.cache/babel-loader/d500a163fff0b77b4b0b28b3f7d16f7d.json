{"ast":null,"code":"import _toConsumableArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli-app/src/getResults.js\";\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport Table from \"./sample_table.js\";\n\nvar GetResults = function GetResults() {\n  //Variables\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      plotPaths = _useState2[0],\n      setPlotPaths = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      areaPlots = _useState4[0],\n      setAreaPlots = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sampleImages = _useState6[0],\n      setSampleImages = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dropDownSamples = _useState8[0],\n      setDropDownSamples = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      dropDownMarkers = _useState10[0],\n      setDropDownMarkers = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      checkbox = _useState12[0],\n      setCheckbox = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      displaySegmentationCb = _useState14[0],\n      setDisplaySegmentationCb = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      preprocessedCb = _useState16[0],\n      setPreprocessedCb = _useState16[1];\n\n  var _useState17 = useState(true),\n      _useState18 = _slicedToArray(_useState17, 2),\n      firstCall = _useState18[0],\n      setFirstCall = _useState18[1];\n\n  var _useState19 = useState({}),\n      _useState20 = _slicedToArray(_useState19, 2),\n      totalCells = _useState20[0],\n      setTotalCells = _useState20[1];\n\n  var _useState21 = useState({}),\n      _useState22 = _slicedToArray(_useState21, 2),\n      resultingCells = _useState22[0],\n      setResultingCells = _useState22[1];\n\n  var _useState23 = useState(\"\"),\n      _useState24 = _slicedToArray(_useState23, 2),\n      markerImages = _useState24[0],\n      setMarkerImages = _useState24[1];\n\n  var _useState25 = useState([]),\n      _useState26 = _slicedToArray(_useState25, 2),\n      mergedImages = _useState26[0],\n      setMergedImages = _useState26[1];\n\n  var _useState27 = useState(\"\"),\n      _useState28 = _slicedToArray(_useState27, 2),\n      pixelComparisonPlot = _useState28[0],\n      setPixelComparisonPlot = _useState28[1];\n\n  var _useState29 = _slicedToArray(useState, 2),\n      pixelSamplePlot = _useState29[0],\n      setPixelSamplePlot = _useState29[1]; //const [displaySegmented, setDisplaySegmented] = useState(true)\n\n\n  var sample = \"\";\n  var marker = \"\"; //Function which get the images from backend\n\n  var displayResults = function displayResults() {\n    document.getElementById(\"resultsButton\").style.display = \"none\";\n    axios.get(\"/fetchResults\").then(function (response) {\n      setTotalCells(response.data[1]);\n      setResultingCells(response.data[2]);\n      console.log(\"PALUU ARVO\");\n      console.log(response.data);\n      console.log(response.data[1]);\n      console.log(response.data[2]); //Extracting values from dictionary\n\n      var samples = response.data[0][\"samples\"];\n      var area = response.data[0][\"area\"];\n      var intensity = response.data[0][\"intensity\"];\n      console.log(area);\n      console.log(samples);\n      setPlotPaths(area);\n      displayImages(area, samples, intensity, response.data[1], response.data[2]); //Calling function which displays the images         \n    });\n  }; //Function which displays the images to the user\n\n\n  var displayImages = function displayImages(area, samples, intensity, totalCells, resultingCells) {\n    var segmentation = false;\n    var merged = false;\n    var counter = 0;\n    var i = Object.entries(samples[Object.keys(samples)[0]]).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      console.log(key);\n      console.log(value);\n\n      if (Object.keys(value).includes(\"overlays\")) {\n        console.log(\"SEGMENTATION\");\n        segmentation = true;\n      }\n      /*if(Object.keys(value).includes(\"preprocessed\")){\n          counter += 1\n      }*/\n\n    });\n    segmentation = true;\n    Object.entries(samples).map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          key = _ref4[0],\n          value = _ref4[1];\n\n      console.log(key);\n      console.log(value);\n\n      if (\"merged_overlays\" == value) {\n        console.log(\"___________________________________--\");\n        merged = true;\n      }\n    }); //Creates the options for sample dropdown menu\n\n    var sampleOptions = Object.entries(Object.keys(samples)).map(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n          key = _ref6[0],\n          value = _ref6[1];\n\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: value,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }\n      }, value);\n    }); //Creates the options for markers dropdown menu\n\n    var markerOptions = Object.entries(samples[Object.keys(samples)[0]]).map(function (_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 2),\n          key = _ref8[0],\n          value = _ref8[1];\n\n      console.log(key);\n\n      if (key != \"merged_tiff\" && key != \"merged_overlays\") {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: key,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 24\n          }\n        }, key);\n      }\n    });\n    merged = false; //Create the dropdown list for samples\n    //The options are created above\n\n    setDropDownSamples( /*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, \"Samples: \"), /*#__PURE__*/React.createElement(\"select\", {\n      name: \"sampleSelector\",\n      id: \"sampleSelector\",\n      onChange: function onChange(event) {\n        return handleChangeSelect(event, segmentation, merged, \"sampleDropDown\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      id: \"optionNoneSample\",\n      value: \"None\",\n      selected: \"true\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 18\n      }\n    }, \"None\"), sampleOptions))); //If the backend response contains images where channels are merged (multi channel images) this if clause is executed \n\n    if (merged == true) {\n      //Creates dropdown menu for markers\n      //The options are passed in a varible. The variable is initialized above\n      setDropDownMarkers( /*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }\n      }, \"Markers: \"), /*#__PURE__*/React.createElement(\"select\", {\n        name: \"markerSelector\",\n        id: \"markerSelector\",\n        onChange: function onChange(event) {\n          return handleChangeSelect(event, segmentation, merged, \"markerDropDown\");\n        },\n        disabled: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        id: \"optionNonemarker\",\n        value: \"None\",\n        selected: \"true\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 26\n        }\n      }, \"None\"), markerOptions))); //Temp lists where the html elements are stored\n\n      var mergedImagesTemp = [];\n      var markerImagesTemp = []; //Map thru a dictionary, with sample names and paths to the images/plots\n\n      Object.entries(samples).map(function (_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 2),\n            key1 = _ref10[0],\n            value1 = _ref10[1];\n\n        //Add a counter in here\n        //Id to images and divs, key1 contains the sample name\n        var idMergedTiff = \"idTiff\" + key1;\n        var idMergedOverlay = \"idOverlay\" + key1;\n        var idMergedTiffDiv = \"tiffDiv\" + key1;\n        var idMergedOverlayDiv = \"overlayDiv\" + key1; //Append the list with HTML element\n        //These are the merged images\n\n        mergedImagesTemp.push( /*#__PURE__*/React.createElement(\"div\", {\n          id: key1,\n          hidden: true,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 39\n          }\n        }, /*#__PURE__*/React.createElement(\"b\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 21\n          }\n        }, \"Merged image channels\"), /*#__PURE__*/React.createElement(\"div\", {\n          id: idMergedTiffDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 25\n          }\n        }, key1, \" merged image channels:\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idMergedTiff,\n          src: require(\"../src/images/\" + value1[\"merged_tiff\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idMergedTiff);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          id: idMergedOverlayDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }\n        }, \" \", key1, \" segmented cells:\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idMergedOverlay,\n          src: require(\"../src/images/\" + value1[\"merged_overlays\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idMergedOverlay);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 25\n          }\n        })))); //Map thru the single channel images (preprocessed, segmented, thresholded)\n\n        Object.entries(value1).map(function (_ref11) {\n          var _ref12 = _slicedToArray(_ref11, 2),\n              key = _ref12[0],\n              value = _ref12[1];\n\n          if (key != \"merged_tiff\" && key != \"merged_overlays\") {\n            //The merged files are skipped\n            //Initialize id to images and divs, key1 is the sample name and key is the marker\n            var idPreprocessed = \"idPre\" + key1 + key;\n            var idThresholded = \"idThres\" + key1 + key;\n            var idSegmented = \"idSeg\" + key1 + key;\n            var idPreprocessedDiv = \"preDiv\" + key1 + key;\n            var idThresholdedDiv = \"thresDiv\" + key1 + key;\n            var idSegmentedDiv = \"segDiv\" + key1 + key; //Append the list with HTML element\n            //These are the single channel images\n            //THe segmented image is appended only if segmentation is executed\n\n            markerImagesTemp.push( /*#__PURE__*/React.createElement(\"div\", {\n              id: key1 + key,\n              hidden: true,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 47\n              }\n            }, /*#__PURE__*/React.createElement(\"b\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 29\n              }\n            }, \"Single-channel image\"), /*#__PURE__*/React.createElement(\"div\", {\n              id: idPreprocessedDiv,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 33\n              }\n            }, key1, \" preprocessed \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n              class: \"contain\",\n              id: idPreprocessed,\n              src: require(\"../src/images/\" + value[0][\"preprocessed\"]),\n              onClick: function onClick(event) {\n                return displayFullScreen(idPreprocessed);\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 33\n              }\n            })), /*#__PURE__*/React.createElement(\"div\", {\n              id: idThresholdedDiv,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 33\n              }\n            }, key1, \" thresholded \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n              class: \"contain\",\n              id: idThresholded,\n              src: require(\"../src/images/\" + value[1][\"thresholded\"]),\n              onClick: function onClick(event) {\n                return displayFullScreen(idThresholded);\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 33\n              }\n            })), segmentation ? /*#__PURE__*/React.createElement(\"div\", {\n              id: idSegmentedDiv,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 37\n              }\n            }, key1, \" segmented \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n              class: \"contain\",\n              id: idSegmented,\n              src: require(\"../src/images/\" + value[2][\"overlays\"]),\n              onClick: function onClick(event) {\n                return displayFullScreen(idSegmented);\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 37\n              }\n            }), /*#__PURE__*/React.createElement(\"p\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 37\n              }\n            }, \"Number of cells detected in image segmentation : \", totalCells[key]), /*#__PURE__*/React.createElement(\"p\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 37\n              }\n            }, \"Number of cells after removing unassigned ones : \", resultingCells[key]), /*#__PURE__*/React.createElement(\"br\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 37\n              }\n            }), /*#__PURE__*/React.createElement(\"br\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 37\n              }\n            })) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n          }\n        });\n      }); //Add the temp lists to the state variable\n\n      setMergedImages(mergedImagesTemp);\n      setMarkerImages(markerImagesTemp);\n    } //If backend response contains single channel images, this if clause is executed\n    else if (merged == false) {\n      //Map thru the samples and images\n      //The return value is directly updated to state variable\n      setSampleImages(Object.entries(samples).map(function (_ref13) {\n        var _ref14 = _slicedToArray(_ref13, 2),\n            key = _ref14[0],\n            value = _ref14[1];\n\n        //Id to images and divs, key contains the sample name\n        var idPreprocessed = \"idPre\" + key;\n        var idThresholded = \"idThres\" + key;\n        var idSegmented = \"idSeg\" + key;\n        var idPreprocessedDiv = \"preDiv\" + key;\n        var idThresholdedDiv = \"thresDiv\" + key;\n        var idSegmentedDiv = \"segDiv\" + key; //Return the html element\n        //THe segmented image and the counts are appended to the list only if the segmentation is executed\n\n        return [].concat(_toConsumableArray(sampleImages), [/*#__PURE__*/React.createElement(\"div\", {\n          id: key,\n          hidden: true,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          id: idPreprocessedDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }\n        }, \"Preprocessed \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idPreprocessed,\n          src: require(\"../src/images/\" + Object.values(value)[0][0][\"preprocessed\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idPreprocessed);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 25\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          id: idThresholdedDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 25\n          }\n        }, \"Thresholded \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idThresholded,\n          src: require(\"../src/images/\" + Object.values(value)[0][1][\"thresholded\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idThresholded);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 25\n          }\n        })), segmentation ? /*#__PURE__*/React.createElement(\"div\", {\n          id: idSegmentedDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 29\n          }\n        }, \"Segmented \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idSegmented,\n          src: require(\"../src/images/\" + Object.values(value)[0][2][\"overlays\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idSegmented);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 29\n          }\n        }, \"Number of cells detected in image segmentation : \", totalCells[key]), /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 29\n          }\n        }, \"Number of cells after removing unassigned ones : \", resultingCells[key]), /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 29\n          }\n        })) : /*#__PURE__*/React.createElement(React.Fragment, null))]);\n      }));\n    } //If area measurements for the thresholded image is computed\n\n\n    if (area != \"\") {\n      //Add the plot to a state variable\n      setAreaPlots( /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 21\n        }\n      }, \"Measurement of marker positive area:\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        id: \"areaPlot\",\n        src: require(\"../src/images/Area/\" + area),\n        onClick: function onClick(event) {\n          return displayFullScreen(\"areaPlot\");\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }\n      })));\n    }\n\n    if (intensity != \"\") {\n      console.log(intensity);\n      setPixelComparisonPlot( /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }\n      }, \"Cell pixel intensity distribution between two groups\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        id: \"comparisonIntensityPlot\",\n        src: require(\"../src/images/Intensity/\" + Object.values(intensity)[0][\"group_plot\"]),\n        onClick: function onClick(event) {\n          return displayFullScreen(\"comparisonIntensityPlot\");\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }\n      })));\n    }\n  }; //Function which displays the images full screen\n\n\n  var displayFullScreen = function displayFullScreen(id) {\n    var elem = document.getElementById(id); //Get element based on id\n\n    if (document.fullscreenElement) {\n      //Exit if fullscreen\n      document.exitFullscreen();\n    } //Otherwise, no image is in fullscreen mode \n    //Display image fullscreen\n    //THis function is dependent from the browser used\n    else {\n      if (elem.requestFullscreen) {\n        elem.requestFullscreen();\n      } else if (elem.webkitRequestFullscreen) {\n        /* Safari */\n        elem.webkitRequestFullscreen();\n      } else if (elem.msRequestFullscreen) {\n        /* IE11 */\n        elem.msRequestFullscreen();\n      }\n    }\n  }; //Handles changes in the sample drop-down list\n  //segmentation and merged are boolean parameters\n  //call parameter contains the source of the function call (sampleDropDown or markerDropDown)\n  //THis function is both for multi and single channel images. It is specified in the comments which images the if clause handles\n\n\n  var handleChangeSelect = function handleChangeSelect(event, segmentation, merged, call) {\n    //Displays the merged tiff and the merged masks\n    //For multichannel images\n    if (merged == true && event.target.value != \"None\" && call == \"sampleDropDown\") {\n      //Format the variables based on the selected value in drop down menu\n      var idMergedDiv = \"tiffDiv\" + event.target.value;\n      var idOverlayDiv = \"overlayDiv\" + event.target.value; //When sample is changed, change the value of markerSelector to None \n\n      document.getElementById(\"markerSelector\").value = \"None\";\n      document.getElementById(\"markerSelector\").disabled = false; //Display the markerSelector dropDown menu\n      //Display the images\n\n      document.getElementById(idMergedDiv).style.display = \"block\";\n      document.getElementById(idOverlayDiv).style.display = \"block\";\n    } //If the sampleSelector value is changed to None, hide the markerSelector dropdown menu\n    //For multichannel images\n    else if (merged == true && event.target.value == \"None\" && call == \"sampleDropDown\") {\n      document.getElementById(\"markerSelector\").value = \"None\"; //Changes value\n\n      document.getElementById(\"markerSelector\").disabled = true; //Hide\n    } //This if statement displays the the single channel images (input image, thresholded, and segmented)\n    //Displays also the checkboxes which can be used to hide the images listed above\n    //THis if statement is both for images which composes of multiple channels and single channels\n    else if (merged == true && event.target.value != \"None\" && call == \"markerDropDown\" || merged == false && event.target.value != \"None\" && call == \"sampleDropDown\") {\n      //IF the checkbox exists it is checked by default\n      if (document.getElementById(\"preprocessedImgCheck\") != null) {\n        document.getElementById(\"preprocessedImgCheck\").checked = true;\n      }\n\n      if (document.getElementById(\"thresholdImgCheck\") != null) {\n        document.getElementById(\"thresholdImgCheck\").checked = true;\n      }\n\n      if (document.getElementById(\"segmentedImgCheck\") != null) {\n        document.getElementById(\"segmentedImgCheck\").checked = true;\n      }\n\n      var idPreprocessedDiv = \"\";\n      var idThresholdedDiv = \"\";\n      var idSegmentedDiv = \"\"; //If statement for merged images (multiple channels)\n\n      if (merged == true) {\n        //Get's the current sample from the sampleSelector\n        var currentSample = document.getElementById(\"sampleSelector\").value; //THe current sample is used to create the id of the DIV where the images are stored\n        //event.target value contains the marker \n        //The id is in form preDiv + sample + marker (e.g preDivSample1LMX)\n\n        idPreprocessedDiv = \"preDiv\" + currentSample + event.target.value;\n        idThresholdedDiv = \"thresDiv\" + currentSample + event.target.value;\n        idSegmentedDiv = \"segDiv\" + currentSample + event.target.value; //Using the id to display the images\n\n        document.getElementById(idPreprocessedDiv).style.display = \"block\";\n        document.getElementById(idThresholdedDiv).style.display = \"block\";\n        document.getElementById(idSegmentedDiv).style.display = \"block\";\n      } // If statement for single channel images\n      else if (merged == false) {\n        //Build the div id from input value\n        idPreprocessedDiv = \"preDiv\" + event.target.value;\n        idThresholdedDiv = \"thresDiv\" + event.target.value;\n        idSegmentedDiv = \"segDiv\" + event.target.value; //If the image is hidden make them visible\n\n        document.getElementById(idPreprocessedDiv).style.display = \"block\";\n        document.getElementById(idThresholdedDiv).style.display = \"block\";\n\n        if (segmentation == true) {\n          document.getElementById(idSegmentedDiv).style.display = \"block\";\n        }\n      } //Creates the checkbox HTML element to each image\n\n\n      setCheckbox( /*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"colQC-1\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"checkbox\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 29\n        }\n      }, \"Preprocessed image: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"preprocessedImgCheck\",\n        onClick: function onClick() {\n          return handleCheckbox(idPreprocessedDiv, \"preprocessedImgCheck\");\n        },\n        defaultChecked: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"colQC-2\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"checkbox\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 29\n        }\n      }, \"Thresholded image: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"thresholdImgCheck\",\n        onClick: function onClick() {\n          return handleCheckbox(idThresholdedDiv, \"thresholdImgCheck\");\n        },\n        defaultChecked: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 29\n        }\n      }))), segmentation ? /*#__PURE__*/React.createElement(\"div\", {\n        class: \"colQC-3\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"checkbox\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 35\n        }\n      }, \"Segmented image: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"segmentedImgCheck\",\n        onClick: function onClick() {\n          return handleCheckbox(idSegmentedDiv, \"segmentedImgCheck\");\n        },\n        defaultChecked: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 35\n        }\n      }))) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n    } //Displays the main div where the merged sample specific images are stored\n    //Both for multi and single channel images\n\n\n    if (event.target.value != \"None\" && call == \"sampleDropDown\") {\n      document.getElementById(event.target.value).style.display = \"block\";\n    } //Displays the main div where the marker specific images are stored\n    //For multichannel images\n\n\n    if (event.target.value != \"None\" && call == \"markerDropDown\") {\n      document.getElementById(sample + event.target.value).style.display = \"block\";\n    } //Hides the previously selected sample, so that only on sample is displayed at the time\n\n\n    if (sample != \"\" && sample != \"None\" && sample != event.target.value && call == \"sampleDropDown\") {\n      console.log(\"_____________________________________\");\n      setCheckbox(\"\"); //after the sample changes, hide the checkbox which is used to control the single channel images\n\n      document.getElementById(sample).style.display = \"none\"; //Hides the chosen marker image after sample changes\n\n      if (marker != \"\" && marker != \"None\" && merged == true) {\n        document.getElementById(sample + marker).style.display = \"none\";\n      }\n    } //Hides the previously selected marker image, so that only one set of marker images is displayed at once\n    //Multichannel images\n    else if (marker != \"\" && marker != \"None\" && marker != event.target.value && call == \"markerDropDown\") {\n      document.getElementById(sample + marker).style.display = \"none\";\n    } //Empties (hides) the checkbox variable if marker is set to null\n    //Multichannel images\n    else if (call == \"markerDropDown\" && marker == \"None\" && checkbox != \"\") {\n      setCheckbox(\"\");\n    } //Hides previous images\n    //For single channel images\n    else if (sample != \"\" && sample != \"None\" && merged == false) {\n      document.getElementById(sample).style.display = \"none\";\n    } //Hides the checkboxes if condition is met\n    //THis if statement is bot for single and multi channel images\n\n\n    if (event.target.value == \"None\" && merged == false || event.target.value == \"None\" && call == \"markerDropDown\") {\n      setCheckbox(\"\");\n    } //Update the current sample and marker values, these values are \"previous\" values when the function is called next time\n\n\n    if (call == \"sampleDropDown\") {\n      sample = event.target.value;\n    }\n\n    if (call == \"markerDropDown\") {\n      marker = event.target.value;\n    }\n  }; //This function handles changes in checkboxes\n  //Parameters are the id of image div and id of checkbox\n  //The checkboxes are created in function above\n\n\n  var handleCheckbox = function handleCheckbox(idDiv, idCb) {\n    var elem = document.getElementById(idDiv); //Get the div element\n    //If clause which hides the element\n\n    if (window.getComputedStyle(elem).display == \"block\") {\n      elem.style.display = \"none\";\n      document.getElementById(idCb).defaultChecked = false;\n    } //If clause which displays the element\n    else if (window.getComputedStyle(elem).display == \"none\") {\n      elem.style.display = \"block\";\n      document.getElementById(idCb).defaultChecked = true;\n    }\n  }; //Display HTML to the user\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    class: \"resultsForm\",\n    id: \"resultsForm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"load\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 21\n    }\n  }, \"Running SIMPLI\")), /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"results\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 21\n    }\n  }, \"SIMPLI results\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"resultsButton\",\n    type: \"button\",\n    onClick: function onClick(event) {\n      return displayResults();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 21\n    }\n  }, \"Display results\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"colQC-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 25\n    }\n  }, dropDownSamples), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"colQC-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 25\n    }\n  }, dropDownMarkers)), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"colQC-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 21\n    }\n  }, checkbox), sampleImages, markerImages, mergedImages, areaPlots)));\n};\n\nexport default GetResults;","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","axios","Table","GetResults","plotPaths","setPlotPaths","areaPlots","setAreaPlots","sampleImages","setSampleImages","dropDownSamples","setDropDownSamples","dropDownMarkers","setDropDownMarkers","checkbox","setCheckbox","displaySegmentationCb","setDisplaySegmentationCb","preprocessedCb","setPreprocessedCb","firstCall","setFirstCall","totalCells","setTotalCells","resultingCells","setResultingCells","markerImages","setMarkerImages","mergedImages","setMergedImages","pixelComparisonPlot","setPixelComparisonPlot","pixelSamplePlot","setPixelSamplePlot","sample","marker","displayResults","document","getElementById","style","display","get","then","response","data","console","log","samples","area","intensity","displayImages","segmentation","merged","counter","i","Object","entries","keys","map","key","value","includes","sampleOptions","markerOptions","event","handleChangeSelect","mergedImagesTemp","markerImagesTemp","key1","value1","idMergedTiff","idMergedOverlay","idMergedTiffDiv","idMergedOverlayDiv","push","require","displayFullScreen","idPreprocessed","idThresholded","idSegmented","idPreprocessedDiv","idThresholdedDiv","idSegmentedDiv","values","id","elem","fullscreenElement","exitFullscreen","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","call","target","idMergedDiv","idOverlayDiv","disabled","checked","currentSample","handleCheckbox","idDiv","idCb","window","getComputedStyle","defaultChecked"],"sources":["/home/ernohanninen/simpli-app/src/getResults.js"],"sourcesContent":["import React,  { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport Table from \"./sample_table.js\";\n\n\n\nconst GetResults = () => { \n    \n    //Variables\n    const [plotPaths, setPlotPaths] = useState(\"\")\n    const [areaPlots, setAreaPlots] = useState(\"\")\n    const [sampleImages, setSampleImages] = useState(\"\")\n\n    const [dropDownSamples, setDropDownSamples] = useState(\"\")\n    const [dropDownMarkers, setDropDownMarkers] = useState(\"\")\n    \n    const [checkbox, setCheckbox] = useState(\"\")\n    const [displaySegmentationCb, setDisplaySegmentationCb] = useState(false)\n    const [preprocessedCb, setPreprocessedCb] = useState(false)\n    const [firstCall,setFirstCall] = useState(true)\n    const [totalCells, setTotalCells] = useState({})\n    const [resultingCells, setResultingCells] = useState({})\n    const [markerImages, setMarkerImages] = useState(\"\")\n    const [mergedImages, setMergedImages] = useState([])\n    const [pixelComparisonPlot, setPixelComparisonPlot] = useState(\"\")\n    const [pixelSamplePlot, setPixelSamplePlot] = useState\n\n    \n    //const [displaySegmented, setDisplaySegmented] = useState(true)\n\n    \n    var sample = \"\"\n    var marker = \"\"\n\n    //Function which get the images from backend\n    const displayResults = () => {\n        document.getElementById(\"resultsButton\").style.display = \"none\"\n        axios.get(\"/fetchResults\")\n        .then(function(response){\n           setTotalCells(response.data[1])\n           setResultingCells(response.data[2])\n           console.log(\"PALUU ARVO\")\n           console.log(response.data)\n\n           console.log(response.data[1])\n           console.log(response.data[2])\n           //Extracting values from dictionary\n           let samples = response.data[0][\"samples\"]\n           let area = response.data[0][\"area\"]\n           let intensity = response.data[0][\"intensity\"]\n           console.log(area)\n           console.log(samples)\n        \n           setPlotPaths(area)    \n           displayImages(area, samples, intensity, response.data[1], response.data[2]) //Calling function which displays the images         \n        })\n    }\n    //Function which displays the images to the user\n    const displayImages = (area, samples, intensity, totalCells, resultingCells) => { \n\n        let segmentation = false\n        let merged = false\n\n        let counter = 0\n\n        let i = Object.entries(samples[Object.keys(samples)[0]]).map(([key,value]) => {\n            console.log(key)\n            console.log(value)\n            if(Object.keys(value).includes(\"overlays\")){\n                console.log(\"SEGMENTATION\")\n                segmentation = true\n            }\n            /*if(Object.keys(value).includes(\"preprocessed\")){\n                counter += 1\n            }*/\n        })\n\n        segmentation = true\n        Object.entries(samples).map(([key,value]) => {\n            console.log(key)\n            console.log(value)\n\n            if(\"merged_overlays\" == value){\n                console.log(\"___________________________________--\")\n                merged = true\n            }\n        })\n        \n        //Creates the options for sample dropdown menu\n        var sampleOptions = Object.entries(Object.keys(samples)).map(([key,value]) => \n            <option value={value}>{value}</option>\n        )\n        //Creates the options for markers dropdown menu\n        var markerOptions = Object.entries(samples[Object.keys(samples)[0]]).map(([key,value]) => {\n            console.log(key)\n            if(key != \"merged_tiff\" && key != \"merged_overlays\"){\n                return <option value={key}>{key}</option>\n            }\n        })\n       \n        merged = false\n        \n        //Create the dropdown list for samples\n        //The options are created above\n        setDropDownSamples(\n        <div class=\"row\">\n            <p>Samples: </p>\n            <select name=\"sampleSelector\" id=\"sampleSelector\" onChange={event => handleChangeSelect(event, segmentation, merged, \"sampleDropDown\")}>\n                 <option id=\"optionNoneSample\" value=\"None\" selected=\"true\">None</option>  \n                 {sampleOptions}\n                  \n            </select>          \n            \n        </div>)\n        \n        //If the backend response contains images where channels are merged (multi channel images) this if clause is executed \n        if(merged == true){\n            //Creates dropdown menu for markers\n            //The options are passed in a varible. The variable is initialized above\n            setDropDownMarkers(\n                <div class=\"row\">\n                    <p>Markers: </p>\n                    <select name=\"markerSelector\" id=\"markerSelector\" onChange={event => handleChangeSelect(event, segmentation, merged, \"markerDropDown\")} disabled>\n                         <option id=\"optionNonemarker\" value=\"None\" selected=\"true\">None</option>  \n                         {markerOptions}\n                          \n                    </select>          \n                    \n                </div>\n                )\n            //Temp lists where the html elements are stored\n            let mergedImagesTemp = []\n            let markerImagesTemp = []\n            //Map thru a dictionary, with sample names and paths to the images/plots\n            Object.entries(samples).map(([key1,value1]) => {\n\n                //Add a counter in here\n\n                //Id to images and divs, key1 contains the sample name\n                let idMergedTiff = \"idTiff\" + key1\n                let idMergedOverlay = \"idOverlay\" + key1\n                let idMergedTiffDiv = \"tiffDiv\" + key1\n                let idMergedOverlayDiv = \"overlayDiv\" + key1\n\n                //Append the list with HTML element\n                //These are the merged images\n                mergedImagesTemp.push(<div id = {key1} hidden>\n                    <b>Merged image channels</b>\n                    <div id = {idMergedTiffDiv}>\n                        <p>{key1} merged image channels:</p>    \n                        <img class=\"contain\" id ={idMergedTiff} src={require(\"../src/images/\" + value1[\"merged_tiff\"])} onClick= {event => displayFullScreen(idMergedTiff)}></img>\n                    </div>\n                    <div id = {idMergedOverlayDiv}>\n                        <p> {key1} segmented cells:</p>\n                        <img class=\"contain\" id ={idMergedOverlay} src={require(\"../src/images/\" + value1[\"merged_overlays\"])}  onClick= {event => displayFullScreen(idMergedOverlay)}></img>\n                    </div>\n                    \n                </div>)    \n                //Map thru the single channel images (preprocessed, segmented, thresholded)\n                Object.entries(value1).map(([key,value]) => { \n                    if(key != \"merged_tiff\" && key != \"merged_overlays\"){ //The merged files are skipped\n\n                        //Initialize id to images and divs, key1 is the sample name and key is the marker\n                        let idPreprocessed = \"idPre\" + key1 + key\n                        let idThresholded = \"idThres\" + key1+ key\n                        let idSegmented = \"idSeg\" + key1+ key\n        \n                        let idPreprocessedDiv = \"preDiv\" + key1+ key\n                        let idThresholdedDiv = \"thresDiv\"+ key1 + key\n                        let idSegmentedDiv = \"segDiv\"+ key1 + key\n                        \n                        //Append the list with HTML element\n                        //These are the single channel images\n                        //THe segmented image is appended only if segmentation is executed\n                        markerImagesTemp.push(<div id = {key1 + key} hidden>\n                            <b>Single-channel image</b>\n                            <div id = {idPreprocessedDiv}>\n                                <p>{key1} preprocessed {key}:</p>    \n                                <img class=\"contain\" id ={idPreprocessed} src={require(\"../src/images/\" + value[0][\"preprocessed\"])} onClick= {event => displayFullScreen(idPreprocessed)}></img>\n                            </div>\n                            <div id = {idThresholdedDiv}>\n                                <p>{key1} thresholded {key}:</p>\n                                <img class=\"contain\" id ={idThresholded} src={require(\"../src/images/\" + value[1][\"thresholded\"])}  onClick= {event => displayFullScreen(idThresholded)}></img>\n                            </div>\n                            {segmentation ? (\n                                <div id = {idSegmentedDiv}>\n                                    <p>{key1} segmented {key}:</p>\n                                    <img class=\"contain\" id ={idSegmented} src={require(\"../src/images/\" + value[2][\"overlays\"])}  onClick= {event => displayFullScreen(idSegmented)}></img>  \n                                    <p>Number of cells detected in image segmentation : {totalCells[key]}</p> \n                                    <p>Number of cells after removing unassigned ones : {resultingCells[key]}</p>       \n                                    <br></br>\n                                    <br></br>\n                                </div>               \n                            ):(<></>)         \n                            }   \n                            </div>)\n                    }\n                })\n                \n            })\n            //Add the temp lists to the state variable\n            setMergedImages(mergedImagesTemp)\n            setMarkerImages(markerImagesTemp)\n        }\n        //If backend response contains single channel images, this if clause is executed\n        else if(merged == false){\n            //Map thru the samples and images\n            //The return value is directly updated to state variable\n            setSampleImages(Object.entries(samples).map(([key,value]) => {\n                //Id to images and divs, key contains the sample name\n                let idPreprocessed = \"idPre\" + key\n                let idThresholded = \"idThres\" + key\n                let idSegmented = \"idSeg\" + key\n\n                let idPreprocessedDiv = \"preDiv\" + key\n                let idThresholdedDiv = \"thresDiv\" + key\n                let idSegmentedDiv = \"segDiv\" + key\n\n                //Return the html element\n                //THe segmented image and the counts are appended to the list only if the segmentation is executed\n                return([...sampleImages, \n                <div id = {key} hidden>\n                    \n                    <div id = {idPreprocessedDiv}>\n                        <p>Preprocessed {key}:</p>    \n                        <img class=\"contain\" id ={idPreprocessed} src={require(\"../src/images/\" + Object.values(value)[0][0][\"preprocessed\"])} onClick= {event => displayFullScreen(idPreprocessed)}></img>\n                    </div>\n                    <div id = {idThresholdedDiv}>\n                        <p>Thresholded {key}:</p>\n                        <img class=\"contain\" id ={idThresholded} src={require(\"../src/images/\" + Object.values(value)[0][1][\"thresholded\"])}  onClick= {event => displayFullScreen(idThresholded)}></img>\n                    </div>\n                    {segmentation ? (\n                        <div id = {idSegmentedDiv}>\n                            <p>Segmented {key}:</p>\n                            <img class=\"contain\" id ={idSegmented} src={require(\"../src/images/\" + Object.values(value)[0][2][\"overlays\"])}  onClick= {event => displayFullScreen(idSegmented)}></img>  \n                            <p>Number of cells detected in image segmentation : {totalCells[key]}</p> \n                            <p>Number of cells after removing unassigned ones : {resultingCells[key]}</p>       \n                            <br></br>\n                            <br></br>\n                        </div>               \n                    ):(<></>)         \n                    }   \n                </div>])\n            }))\n\n        }\n\n        //If area measurements for the thresholded image is computed\n        if(area != \"\"){\n            //Add the plot to a state variable\n            setAreaPlots(\n                <div>\n                    <b>Measurement of marker positive area:</b>\n                    <br></br>\n                    <img id =\"areaPlot\" src={require(\"../src/images/Area/\" + area)} onClick= {event => displayFullScreen(\"areaPlot\")}></img>\n                </div>\n            )\n        }\n\n        if(intensity != \"\"){\n            console.log(intensity)\n            setPixelComparisonPlot(\n                <div>\n                    <b>Cell pixel intensity distribution between two groups</b>\n                    <br></br>\n                    <img id=\"comparisonIntensityPlot\" src={require(\"../src/images/Intensity/\" + Object.values(intensity)[0][\"group_plot\"])} onClick = {event => displayFullScreen(\"comparisonIntensityPlot\")}></img>\n                </div>\n            )\n        }\n        \n    } \n\n    //Function which displays the images full screen\n    const displayFullScreen = (id) => { \n        let elem = document.getElementById(id) //Get element based on id\n        if(document.fullscreenElement){ //Exit if fullscreen\n            document.exitFullscreen()\n        }\n        //Otherwise, no image is in fullscreen mode \n        //Display image fullscreen\n        //THis function is dependent from the browser used\n        else{\n            if (elem.requestFullscreen) {\n                elem.requestFullscreen();\n              } else if (elem.webkitRequestFullscreen) { /* Safari */\n                elem.webkitRequestFullscreen();\n              } else if (elem.msRequestFullscreen) { /* IE11 */\n                elem.msRequestFullscreen();\n              }\n        }\n        \n    }\n\n    //Handles changes in the sample drop-down list\n    //segmentation and merged are boolean parameters\n    //call parameter contains the source of the function call (sampleDropDown or markerDropDown)\n    //THis function is both for multi and single channel images. It is specified in the comments which images the if clause handles\n    const handleChangeSelect = (event, segmentation, merged, call) => { \n\n        //Displays the merged tiff and the merged masks\n        //For multichannel images\n        if(merged == true && event.target.value!=\"None\" && call == \"sampleDropDown\"){\n            //Format the variables based on the selected value in drop down menu\n            let idMergedDiv = \"tiffDiv\" + event.target.value\n            let idOverlayDiv = \"overlayDiv\" + event.target.value\n\n            //When sample is changed, change the value of markerSelector to None \n            document.getElementById(\"markerSelector\").value = \"None\" \n            document.getElementById(\"markerSelector\").disabled = false //Display the markerSelector dropDown menu\n            //Display the images\n            document.getElementById(idMergedDiv).style.display = \"block\"\n            document.getElementById(idOverlayDiv).style.display = \"block\"\n\n           \n        }\n\n        //If the sampleSelector value is changed to None, hide the markerSelector dropdown menu\n        //For multichannel images\n        else if(merged == true && event.target.value==\"None\" && call == \"sampleDropDown\"){\n            document.getElementById(\"markerSelector\").value = \"None\" //Changes value\n            document.getElementById(\"markerSelector\").disabled = true //Hide\n        \n        }\n\n        //This if statement displays the the single channel images (input image, thresholded, and segmented)\n        //Displays also the checkboxes which can be used to hide the images listed above\n        //THis if statement is both for images which composes of multiple channels and single channels\n        else if(merged == true && event.target.value!=\"None\" && call == \"markerDropDown\" || merged == false && event.target.value != \"None\" && call == \"sampleDropDown\"){\n\n            //IF the checkbox exists it is checked by default\n            if(document.getElementById(\"preprocessedImgCheck\") != null){\n                document.getElementById(\"preprocessedImgCheck\").checked = true;    \n            }\n            if(document.getElementById(\"thresholdImgCheck\") != null){\n                document.getElementById(\"thresholdImgCheck\").checked = true; \n            }\n            if(document.getElementById(\"segmentedImgCheck\") != null){\n                document.getElementById(\"segmentedImgCheck\").checked = true;    \n            }    \n\n            let idPreprocessedDiv = \"\"\n            let idThresholdedDiv = \"\"\n            let idSegmentedDiv = \"\"\n\n            //If statement for merged images (multiple channels)\n            if(merged == true){\n                //Get's the current sample from the sampleSelector\n                let currentSample = document.getElementById(\"sampleSelector\").value\n                //THe current sample is used to create the id of the DIV where the images are stored\n                //event.target value contains the marker \n                //The id is in form preDiv + sample + marker (e.g preDivSample1LMX)\n                idPreprocessedDiv = \"preDiv\" + currentSample + event.target.value\n                idThresholdedDiv = \"thresDiv\"+ currentSample + event.target.value\n                idSegmentedDiv = \"segDiv\" + currentSample+ event.target.value\n\n                //Using the id to display the images\n                document.getElementById(idPreprocessedDiv).style.display = \"block\"\n                document.getElementById(idThresholdedDiv).style.display = \"block\"\n                document.getElementById(idSegmentedDiv).style.display = \"block\"\n            }\n            // If statement for single channel images\n            else if(merged == false){\n                //Build the div id from input value\n                idPreprocessedDiv = \"preDiv\" + event.target.value\n                idThresholdedDiv = \"thresDiv\" + event.target.value\n                idSegmentedDiv = \"segDiv\" + event.target.value\n\n                //If the image is hidden make them visible\n                document.getElementById(idPreprocessedDiv).style.display = \"block\"\n                document.getElementById(idThresholdedDiv).style.display = \"block\"\n                if(segmentation == true){\n                    document.getElementById(idSegmentedDiv).style.display = \"block\"\n                }\n\n            }\n            \n            //Creates the checkbox HTML element to each image\n            setCheckbox(\n                <div class=\"row\">\n                    <div class = \"colQC-1\">\n                        <div class=\"checkbox\">    \n                            <p>Preprocessed image: </p>\n                            <input type = \"checkbox\" id=\"preprocessedImgCheck\" onClick={()=>handleCheckbox(idPreprocessedDiv, \"preprocessedImgCheck\")} defaultChecked/>                \n                        </div>\n                    </div>\n                    <div class = \"colQC-2\">\n                        <div class=\"checkbox\">    \n                            <p>Thresholded image: </p>\n                            <input type = \"checkbox\" id=\"thresholdImgCheck\" onClick={()=>handleCheckbox(idThresholdedDiv, \"thresholdImgCheck\")} defaultChecked/>                \n                        </div>\n                    </div>\n                           \n                    {segmentation ? (\n                              <div class = \"colQC-3\">\n                              <div class=\"checkbox\">    \n                                  <p>Segmented image: </p>\n                                  <input type = \"checkbox\" id=\"segmentedImgCheck\" onClick={()=>handleCheckbox(idSegmentedDiv, \"segmentedImgCheck\")} defaultChecked/>                \n                              </div>         \n    \n                          </div>\n                    ):(<></>)         \n                    }         \n                </div>    \n                )   \n\n            \n            \n        }\n\n        //Displays the main div where the merged sample specific images are stored\n        //Both for multi and single channel images\n        if(event.target.value != \"None\" && call == \"sampleDropDown\"){\n            document.getElementById(event.target.value).style.display = \"block\"\n        }\n        //Displays the main div where the marker specific images are stored\n        //For multichannel images\n        if(event.target.value != \"None\" && call == \"markerDropDown\"){\n            document.getElementById(sample + event.target.value).style.display = \"block\"\n        }\n\n        //Hides the previously selected sample, so that only on sample is displayed at the time\n        if(sample != \"\" && sample != \"None\" && sample != event.target.value && call == \"sampleDropDown\"){\n            console.log(\"_____________________________________\")\n            setCheckbox(\"\") //after the sample changes, hide the checkbox which is used to control the single channel images\n            document.getElementById(sample).style.display = \"none\"\n            //Hides the chosen marker image after sample changes\n            if(marker != \"\" && marker != \"None\" && merged == true){\n                document.getElementById(sample+marker).style.display = \"none\"\n            }\n\n        }\n        //Hides the previously selected marker image, so that only one set of marker images is displayed at once\n        //Multichannel images\n        else if(marker != \"\" && marker != \"None\" && marker != event.target.value && call == \"markerDropDown\"){\n            document.getElementById(sample + marker).style.display = \"none\"\n        }\n        //Empties (hides) the checkbox variable if marker is set to null\n        //Multichannel images\n        else if(call == \"markerDropDown\" && marker == \"None\" && checkbox != \"\"){\n            setCheckbox(\"\")\n        }\n        //Hides previous images\n        //For single channel images\n        else if(sample != \"\" && sample != \"None\" && merged == false){\n            document.getElementById(sample).style.display = \"none\"\n        }\n        //Hides the checkboxes if condition is met\n        //THis if statement is bot for single and multi channel images\n        if(event.target.value == \"None\" && merged == false || event.target.value == \"None\" && call == \"markerDropDown\"){\n            setCheckbox(\"\")\n        }\n\n\n        //Update the current sample and marker values, these values are \"previous\" values when the function is called next time\n        if(call == \"sampleDropDown\"){\n            sample = event.target.value\n        }\n        if(call == \"markerDropDown\"){\n            marker = event.target.value\n        }\n\n        \n    }\n\n    //This function handles changes in checkboxes\n    //Parameters are the id of image div and id of checkbox\n    //The checkboxes are created in function above\n    const handleCheckbox = (idDiv, idCb) => {\n\n        var elem = document.getElementById(idDiv) //Get the div element\n        //If clause which hides the element\n        if(window.getComputedStyle(elem).display == \"block\"){\n            elem.style.display = \"none\"\n            document.getElementById(idCb).defaultChecked = false;\n        }\n        //If clause which displays the element\n        else if(window.getComputedStyle(elem).display == \"none\"){\n            elem.style.display =\"block\"\n            document.getElementById(idCb).defaultChecked = true;\n\n        }\n\n    }\n \n    //Display HTML to the user\n    return(\n        <div>\n            <form class=\"resultsForm\" id=\"resultsForm\">\n                <div hidden id=\"load\">\n                    <p>Running SIMPLI</p>         \n                </div>\n                \n                <div hidden id=\"results\">  \n                    <b>SIMPLI results</b>  \n                    <br></br>\n                    <button id=\"resultsButton\" type=\"button\" onClick={event => displayResults()}>Display results</button>\n                    <div class = \"row\">\n                        <div class = \"colQC-1\">\n                            {dropDownSamples}     \n                        </div>\n                        <div class = \"colQC-2\">\n                            {dropDownMarkers}     \n                        </div>\n                       \n                    </div>\n                    <div class = \"colQC-1\">\n                            {checkbox}                     \n                    </div>\n                        \n                    {sampleImages}\n                    {markerImages}\n                    {mergedImages}\n                    {areaPlots}\n                </div>\n            </form>\n        </div>\n    )\n}\nexport default GetResults;"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAiBC,QAAjB,EAA2BC,UAA3B,EAAuCC,mBAAvC,QAAkE,OAAlE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,mBAAlB;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;EAErB;EAFqB,gBAGaL,QAAQ,CAAC,EAAD,CAHrB;EAAA;EAAA,IAGdM,SAHc;EAAA,IAGHC,YAHG;;EAAA,iBAIaP,QAAQ,CAAC,EAAD,CAJrB;EAAA;EAAA,IAIdQ,SAJc;EAAA,IAIHC,YAJG;;EAAA,iBAKmBT,QAAQ,CAAC,EAAD,CAL3B;EAAA;EAAA,IAKdU,YALc;EAAA,IAKAC,eALA;;EAAA,iBAOyBX,QAAQ,CAAC,EAAD,CAPjC;EAAA;EAAA,IAOdY,eAPc;EAAA,IAOGC,kBAPH;;EAAA,iBAQyBb,QAAQ,CAAC,EAAD,CARjC;EAAA;EAAA,IAQdc,eARc;EAAA,IAQGC,kBARH;;EAAA,kBAUWf,QAAQ,CAAC,EAAD,CAVnB;EAAA;EAAA,IAUdgB,QAVc;EAAA,IAUJC,WAVI;;EAAA,kBAWqCjB,QAAQ,CAAC,KAAD,CAX7C;EAAA;EAAA,IAWdkB,qBAXc;EAAA,IAWSC,wBAXT;;EAAA,kBAYuBnB,QAAQ,CAAC,KAAD,CAZ/B;EAAA;EAAA,IAYdoB,cAZc;EAAA,IAYEC,iBAZF;;EAAA,kBAaYrB,QAAQ,CAAC,IAAD,CAbpB;EAAA;EAAA,IAadsB,SAbc;EAAA,IAaJC,YAbI;;EAAA,kBAcevB,QAAQ,CAAC,EAAD,CAdvB;EAAA;EAAA,IAcdwB,UAdc;EAAA,IAcFC,aAdE;;EAAA,kBAeuBzB,QAAQ,CAAC,EAAD,CAf/B;EAAA;EAAA,IAed0B,cAfc;EAAA,IAeEC,iBAfF;;EAAA,kBAgBmB3B,QAAQ,CAAC,EAAD,CAhB3B;EAAA;EAAA,IAgBd4B,YAhBc;EAAA,IAgBAC,eAhBA;;EAAA,kBAiBmB7B,QAAQ,CAAC,EAAD,CAjB3B;EAAA;EAAA,IAiBd8B,YAjBc;EAAA,IAiBAC,eAjBA;;EAAA,kBAkBiC/B,QAAQ,CAAC,EAAD,CAlBzC;EAAA;EAAA,IAkBdgC,mBAlBc;EAAA,IAkBOC,sBAlBP;;EAAA,iCAmByBjC,QAnBzB;EAAA,IAmBdkC,eAnBc;EAAA,IAmBGC,kBAnBH,mBAsBrB;;;EAGA,IAAIC,MAAM,GAAG,EAAb;EACA,IAAIC,MAAM,GAAG,EAAb,CA1BqB,CA4BrB;;EACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;IACzBC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCC,KAAzC,CAA+CC,OAA/C,GAAyD,MAAzD;IACAvC,KAAK,CAACwC,GAAN,CAAU,eAAV,EACCC,IADD,CACM,UAASC,QAAT,EAAkB;MACrBpB,aAAa,CAACoB,QAAQ,CAACC,IAAT,CAAc,CAAd,CAAD,CAAb;MACAnB,iBAAiB,CAACkB,QAAQ,CAACC,IAAT,CAAc,CAAd,CAAD,CAAjB;MACAC,OAAO,CAACC,GAAR,CAAY,YAAZ;MACAD,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACC,IAArB;MAEAC,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACC,IAAT,CAAc,CAAd,CAAZ;MACAC,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACC,IAAT,CAAc,CAAd,CAAZ,EAPqB,CAQrB;;MACA,IAAIG,OAAO,GAAGJ,QAAQ,CAACC,IAAT,CAAc,CAAd,EAAiB,SAAjB,CAAd;MACA,IAAII,IAAI,GAAGL,QAAQ,CAACC,IAAT,CAAc,CAAd,EAAiB,MAAjB,CAAX;MACA,IAAIK,SAAS,GAAGN,QAAQ,CAACC,IAAT,CAAc,CAAd,EAAiB,WAAjB,CAAhB;MACAC,OAAO,CAACC,GAAR,CAAYE,IAAZ;MACAH,OAAO,CAACC,GAAR,CAAYC,OAAZ;MAEA1C,YAAY,CAAC2C,IAAD,CAAZ;MACAE,aAAa,CAACF,IAAD,EAAOD,OAAP,EAAgBE,SAAhB,EAA2BN,QAAQ,CAACC,IAAT,CAAc,CAAd,CAA3B,EAA6CD,QAAQ,CAACC,IAAT,CAAc,CAAd,CAA7C,CAAb,CAhBqB,CAgBuD;IAC9E,CAlBD;EAmBH,CArBD,CA7BqB,CAmDrB;;;EACA,IAAMM,aAAa,GAAG,SAAhBA,aAAgB,CAACF,IAAD,EAAOD,OAAP,EAAgBE,SAAhB,EAA2B3B,UAA3B,EAAuCE,cAAvC,EAA0D;IAE5E,IAAI2B,YAAY,GAAG,KAAnB;IACA,IAAIC,MAAM,GAAG,KAAb;IAEA,IAAIC,OAAO,GAAG,CAAd;IAEA,IAAIC,CAAC,GAAGC,MAAM,CAACC,OAAP,CAAeT,OAAO,CAACQ,MAAM,CAACE,IAAP,CAAYV,OAAZ,EAAqB,CAArB,CAAD,CAAtB,EAAiDW,GAAjD,CAAqD,gBAAiB;MAAA;MAAA,IAAfC,GAAe;MAAA,IAAXC,KAAW;;MAC1Ef,OAAO,CAACC,GAAR,CAAYa,GAAZ;MACAd,OAAO,CAACC,GAAR,CAAYc,KAAZ;;MACA,IAAGL,MAAM,CAACE,IAAP,CAAYG,KAAZ,EAAmBC,QAAnB,CAA4B,UAA5B,CAAH,EAA2C;QACvChB,OAAO,CAACC,GAAR,CAAY,cAAZ;QACAK,YAAY,GAAG,IAAf;MACH;MACD;AACZ;AACA;;IACS,CAVO,CAAR;IAYAA,YAAY,GAAG,IAAf;IACAI,MAAM,CAACC,OAAP,CAAeT,OAAf,EAAwBW,GAAxB,CAA4B,iBAAiB;MAAA;MAAA,IAAfC,GAAe;MAAA,IAAXC,KAAW;;MACzCf,OAAO,CAACC,GAAR,CAAYa,GAAZ;MACAd,OAAO,CAACC,GAAR,CAAYc,KAAZ;;MAEA,IAAG,qBAAqBA,KAAxB,EAA8B;QAC1Bf,OAAO,CAACC,GAAR,CAAY,uCAAZ;QACAM,MAAM,GAAG,IAAT;MACH;IACJ,CARD,EApB4E,CA8B5E;;IACA,IAAIU,aAAa,GAAGP,MAAM,CAACC,OAAP,CAAeD,MAAM,CAACE,IAAP,CAAYV,OAAZ,CAAf,EAAqCW,GAArC,CAAyC;MAAA;MAAA,IAAEC,GAAF;MAAA,IAAMC,KAAN;;MAAA,oBACzD;QAAQ,KAAK,EAAEA,KAAf;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAAuBA,KAAvB,CADyD;IAAA,CAAzC,CAApB,CA/B4E,CAkC5E;;IACA,IAAIG,aAAa,GAAGR,MAAM,CAACC,OAAP,CAAeT,OAAO,CAACQ,MAAM,CAACE,IAAP,CAAYV,OAAZ,EAAqB,CAArB,CAAD,CAAtB,EAAiDW,GAAjD,CAAqD,iBAAiB;MAAA;MAAA,IAAfC,GAAe;MAAA,IAAXC,KAAW;;MACtFf,OAAO,CAACC,GAAR,CAAYa,GAAZ;;MACA,IAAGA,GAAG,IAAI,aAAP,IAAwBA,GAAG,IAAI,iBAAlC,EAAoD;QAChD,oBAAO;UAAQ,KAAK,EAAEA,GAAf;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAAqBA,GAArB,CAAP;MACH;IACJ,CALmB,CAApB;IAOAP,MAAM,GAAG,KAAT,CA1C4E,CA4C5E;IACA;;IACAzC,kBAAkB,eAClB;MAAK,KAAK,EAAC,KAAX;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,eADJ,eAEI;MAAQ,IAAI,EAAC,gBAAb;MAA8B,EAAE,EAAC,gBAAjC;MAAkD,QAAQ,EAAE,kBAAAqD,KAAK;QAAA,OAAIC,kBAAkB,CAACD,KAAD,EAAQb,YAAR,EAAsBC,MAAtB,EAA8B,gBAA9B,CAAtB;MAAA,CAAjE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACK;MAAQ,EAAE,EAAC,kBAAX;MAA8B,KAAK,EAAC,MAApC;MAA2C,QAAQ,EAAC,MAApD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,UADL,EAEMU,aAFN,CAFJ,CADkB,CAAlB,CA9C4E,CAyD5E;;IACA,IAAGV,MAAM,IAAI,IAAb,EAAkB;MACd;MACA;MACAvC,kBAAkB,eACd;QAAK,KAAK,EAAC,KAAX;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,eADJ,eAEI;QAAQ,IAAI,EAAC,gBAAb;QAA8B,EAAE,EAAC,gBAAjC;QAAkD,QAAQ,EAAE,kBAAAmD,KAAK;UAAA,OAAIC,kBAAkB,CAACD,KAAD,EAAQb,YAAR,EAAsBC,MAAtB,EAA8B,gBAA9B,CAAtB;QAAA,CAAjE;QAAwI,QAAQ,MAAhJ;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACK;QAAQ,EAAE,EAAC,kBAAX;QAA8B,KAAK,EAAC,MAApC;QAA2C,QAAQ,EAAC,MAApD;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,UADL,EAEMW,aAFN,CAFJ,CADc,CAAlB,CAHc,CAcd;;MACA,IAAIG,gBAAgB,GAAG,EAAvB;MACA,IAAIC,gBAAgB,GAAG,EAAvB,CAhBc,CAiBd;;MACAZ,MAAM,CAACC,OAAP,CAAeT,OAAf,EAAwBW,GAAxB,CAA4B,iBAAmB;QAAA;QAAA,IAAjBU,IAAiB;QAAA,IAAZC,MAAY;;QAE3C;QAEA;QACA,IAAIC,YAAY,GAAG,WAAWF,IAA9B;QACA,IAAIG,eAAe,GAAG,cAAcH,IAApC;QACA,IAAII,eAAe,GAAG,YAAYJ,IAAlC;QACA,IAAIK,kBAAkB,GAAG,eAAeL,IAAxC,CAR2C,CAU3C;QACA;;QACAF,gBAAgB,CAACQ,IAAjB,eAAsB;UAAK,EAAE,EAAIN,IAAX;UAAiB,MAAM,MAAvB;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,gBAClB;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,2BADkB,eAElB;UAAK,EAAE,EAAII,eAAX;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,gBACI;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAAIJ,IAAJ,4BADJ,eAEI;UAAK,KAAK,EAAC,SAAX;UAAqB,EAAE,EAAGE,YAA1B;UAAwC,GAAG,EAAEK,OAAO,CAAC,mBAAmBN,MAAM,CAAC,aAAD,CAA1B,CAApD;UAAgG,OAAO,EAAG,iBAAAL,KAAK;YAAA,OAAIY,iBAAiB,CAACN,YAAD,CAArB;UAAA,CAA/G;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAFJ,CAFkB,eAMlB;UAAK,EAAE,EAAIG,kBAAX;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,gBACI;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,QAAKL,IAAL,sBADJ,eAEI;UAAK,KAAK,EAAC,SAAX;UAAqB,EAAE,EAAGG,eAA1B;UAA2C,GAAG,EAAEI,OAAO,CAAC,mBAAmBN,MAAM,CAAC,iBAAD,CAA1B,CAAvD;UAAwG,OAAO,EAAG,iBAAAL,KAAK;YAAA,OAAIY,iBAAiB,CAACL,eAAD,CAArB;UAAA,CAAvH;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAFJ,CANkB,CAAtB,EAZ2C,CAwB3C;;QACAhB,MAAM,CAACC,OAAP,CAAea,MAAf,EAAuBX,GAAvB,CAA2B,kBAAiB;UAAA;UAAA,IAAfC,GAAe;UAAA,IAAXC,KAAW;;UACxC,IAAGD,GAAG,IAAI,aAAP,IAAwBA,GAAG,IAAI,iBAAlC,EAAoD;YAAE;YAElD;YACA,IAAIkB,cAAc,GAAG,UAAUT,IAAV,GAAiBT,GAAtC;YACA,IAAImB,aAAa,GAAG,YAAYV,IAAZ,GAAkBT,GAAtC;YACA,IAAIoB,WAAW,GAAG,UAAUX,IAAV,GAAgBT,GAAlC;YAEA,IAAIqB,iBAAiB,GAAG,WAAWZ,IAAX,GAAiBT,GAAzC;YACA,IAAIsB,gBAAgB,GAAG,aAAYb,IAAZ,GAAmBT,GAA1C;YACA,IAAIuB,cAAc,GAAG,WAAUd,IAAV,GAAiBT,GAAtC,CATgD,CAWhD;YACA;YACA;;YACAQ,gBAAgB,CAACO,IAAjB,eAAsB;cAAK,EAAE,EAAIN,IAAI,GAAGT,GAAlB;cAAuB,MAAM,MAA7B;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,gBAClB;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,0BADkB,eAElB;cAAK,EAAE,EAAIqB,iBAAX;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,gBACI;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,GAAIZ,IAAJ,oBAAwBT,GAAxB,MADJ,eAEI;cAAK,KAAK,EAAC,SAAX;cAAqB,EAAE,EAAGkB,cAA1B;cAA0C,GAAG,EAAEF,OAAO,CAAC,mBAAmBf,KAAK,CAAC,CAAD,CAAL,CAAS,cAAT,CAApB,CAAtD;cAAqG,OAAO,EAAG,iBAAAI,KAAK;gBAAA,OAAIY,iBAAiB,CAACC,cAAD,CAArB;cAAA,CAApH;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,EAFJ,CAFkB,eAMlB;cAAK,EAAE,EAAII,gBAAX;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,gBACI;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,GAAIb,IAAJ,mBAAuBT,GAAvB,MADJ,eAEI;cAAK,KAAK,EAAC,SAAX;cAAqB,EAAE,EAAGmB,aAA1B;cAAyC,GAAG,EAAEH,OAAO,CAAC,mBAAmBf,KAAK,CAAC,CAAD,CAAL,CAAS,aAAT,CAApB,CAArD;cAAoG,OAAO,EAAG,iBAAAI,KAAK;gBAAA,OAAIY,iBAAiB,CAACE,aAAD,CAArB;cAAA,CAAnH;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,EAFJ,CANkB,EAUjB3B,YAAY,gBACT;cAAK,EAAE,EAAI+B,cAAX;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,gBACI;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,GAAId,IAAJ,iBAAqBT,GAArB,MADJ,eAEI;cAAK,KAAK,EAAC,SAAX;cAAqB,EAAE,EAAGoB,WAA1B;cAAuC,GAAG,EAAEJ,OAAO,CAAC,mBAAmBf,KAAK,CAAC,CAAD,CAAL,CAAS,UAAT,CAApB,CAAnD;cAA+F,OAAO,EAAG,iBAAAI,KAAK;gBAAA,OAAIY,iBAAiB,CAACG,WAAD,CAArB;cAAA,CAA9G;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,EAFJ,eAGI;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,wDAAqDzD,UAAU,CAACqC,GAAD,CAA/D,CAHJ,eAII;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,wDAAqDnC,cAAc,CAACmC,GAAD,CAAnE,CAJJ,eAKI;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,EALJ,eAMI;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,EANJ,CADS,gBASV,yCAnBe,CAAtB;UAsBH;QACJ,CAtCD;MAwCH,CAjED,EAlBc,CAoFd;;MACA9B,eAAe,CAACqC,gBAAD,CAAf;MACAvC,eAAe,CAACwC,gBAAD,CAAf;IACH,CAvFD,CAwFA;IAxFA,KAyFK,IAAGf,MAAM,IAAI,KAAb,EAAmB;MACpB;MACA;MACA3C,eAAe,CAAC8C,MAAM,CAACC,OAAP,CAAeT,OAAf,EAAwBW,GAAxB,CAA4B,kBAAiB;QAAA;QAAA,IAAfC,GAAe;QAAA,IAAXC,KAAW;;QACzD;QACA,IAAIiB,cAAc,GAAG,UAAUlB,GAA/B;QACA,IAAImB,aAAa,GAAG,YAAYnB,GAAhC;QACA,IAAIoB,WAAW,GAAG,UAAUpB,GAA5B;QAEA,IAAIqB,iBAAiB,GAAG,WAAWrB,GAAnC;QACA,IAAIsB,gBAAgB,GAAG,aAAatB,GAApC;QACA,IAAIuB,cAAc,GAAG,WAAWvB,GAAhC,CARyD,CAUzD;QACA;;QACA,oCAAWnD,YAAX,iBACA;UAAK,EAAE,EAAImD,GAAX;UAAgB,MAAM,MAAtB;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,gBAEI;UAAK,EAAE,EAAIqB,iBAAX;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,gBACI;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,oBAAiBrB,GAAjB,MADJ,eAEI;UAAK,KAAK,EAAC,SAAX;UAAqB,EAAE,EAAGkB,cAA1B;UAA0C,GAAG,EAAEF,OAAO,CAAC,mBAAmBpB,MAAM,CAAC4B,MAAP,CAAcvB,KAAd,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,cAA3B,CAApB,CAAtD;UAAuH,OAAO,EAAG,iBAAAI,KAAK;YAAA,OAAIY,iBAAiB,CAACC,cAAD,CAArB;UAAA,CAAtI;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAFJ,CAFJ,eAMI;UAAK,EAAE,EAAII,gBAAX;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,gBACI;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,mBAAgBtB,GAAhB,MADJ,eAEI;UAAK,KAAK,EAAC,SAAX;UAAqB,EAAE,EAAGmB,aAA1B;UAAyC,GAAG,EAAEH,OAAO,CAAC,mBAAmBpB,MAAM,CAAC4B,MAAP,CAAcvB,KAAd,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,aAA3B,CAApB,CAArD;UAAsH,OAAO,EAAG,iBAAAI,KAAK;YAAA,OAAIY,iBAAiB,CAACE,aAAD,CAArB;UAAA,CAArI;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAFJ,CANJ,EAUK3B,YAAY,gBACT;UAAK,EAAE,EAAI+B,cAAX;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,gBACI;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,iBAAcvB,GAAd,MADJ,eAEI;UAAK,KAAK,EAAC,SAAX;UAAqB,EAAE,EAAGoB,WAA1B;UAAuC,GAAG,EAAEJ,OAAO,CAAC,mBAAmBpB,MAAM,CAAC4B,MAAP,CAAcvB,KAAd,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,UAA3B,CAApB,CAAnD;UAAiH,OAAO,EAAG,iBAAAI,KAAK;YAAA,OAAIY,iBAAiB,CAACG,WAAD,CAArB;UAAA,CAAhI;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAFJ,eAGI;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,wDAAqDzD,UAAU,CAACqC,GAAD,CAA/D,CAHJ,eAII;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,wDAAqDnC,cAAc,CAACmC,GAAD,CAAnE,CAJJ,eAKI;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EALJ,eAMI;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EANJ,CADS,gBASV,yCAnBP,CADA;MAuBH,CAnCe,CAAD,CAAf;IAqCH,CA3L2E,CA6L5E;;;IACA,IAAGX,IAAI,IAAI,EAAX,EAAc;MACV;MACAzC,YAAY,eACR;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,0CADJ,eAEI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAFJ,eAGI;QAAK,EAAE,EAAE,UAAT;QAAoB,GAAG,EAAEoE,OAAO,CAAC,wBAAwB3B,IAAzB,CAAhC;QAAgE,OAAO,EAAG,iBAAAgB,KAAK;UAAA,OAAIY,iBAAiB,CAAC,UAAD,CAArB;QAAA,CAA/E;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAHJ,CADQ,CAAZ;IAOH;;IAED,IAAG3B,SAAS,IAAI,EAAhB,EAAmB;MACfJ,OAAO,CAACC,GAAR,CAAYG,SAAZ;MACAlB,sBAAsB,eAClB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,0DADJ,eAEI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAFJ,eAGI;QAAK,EAAE,EAAC,yBAAR;QAAkC,GAAG,EAAE4C,OAAO,CAAC,6BAA6BpB,MAAM,CAAC4B,MAAP,CAAclC,SAAd,EAAyB,CAAzB,EAA4B,YAA5B,CAA9B,CAA9C;QAAwH,OAAO,EAAI,iBAAAe,KAAK;UAAA,OAAIY,iBAAiB,CAAC,yBAAD,CAArB;QAAA,CAAxI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAHJ,CADkB,CAAtB;IAOH;EAEJ,CApND,CApDqB,CA0QrB;;;EACA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAACQ,EAAD,EAAQ;IAC9B,IAAIC,IAAI,GAAGhD,QAAQ,CAACC,cAAT,CAAwB8C,EAAxB,CAAX,CAD8B,CACS;;IACvC,IAAG/C,QAAQ,CAACiD,iBAAZ,EAA8B;MAAE;MAC5BjD,QAAQ,CAACkD,cAAT;IACH,CAFD,CAGA;IACA;IACA;IALA,KAMI;MACA,IAAIF,IAAI,CAACG,iBAAT,EAA4B;QACxBH,IAAI,CAACG,iBAAL;MACD,CAFH,MAES,IAAIH,IAAI,CAACI,uBAAT,EAAkC;QAAE;QACzCJ,IAAI,CAACI,uBAAL;MACD,CAFM,MAEA,IAAIJ,IAAI,CAACK,mBAAT,EAA8B;QAAE;QACrCL,IAAI,CAACK,mBAAL;MACD;IACN;EAEJ,CAlBD,CA3QqB,CA+RrB;EACA;EACA;EACA;;;EACA,IAAMzB,kBAAkB,GAAG,SAArBA,kBAAqB,CAACD,KAAD,EAAQb,YAAR,EAAsBC,MAAtB,EAA8BuC,IAA9B,EAAuC;IAE9D;IACA;IACA,IAAGvC,MAAM,IAAI,IAAV,IAAkBY,KAAK,CAAC4B,MAAN,CAAahC,KAAb,IAAoB,MAAtC,IAAgD+B,IAAI,IAAI,gBAA3D,EAA4E;MACxE;MACA,IAAIE,WAAW,GAAG,YAAY7B,KAAK,CAAC4B,MAAN,CAAahC,KAA3C;MACA,IAAIkC,YAAY,GAAG,eAAe9B,KAAK,CAAC4B,MAAN,CAAahC,KAA/C,CAHwE,CAKxE;;MACAvB,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CsB,KAA1C,GAAkD,MAAlD;MACAvB,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CyD,QAA1C,GAAqD,KAArD,CAPwE,CAOb;MAC3D;;MACA1D,QAAQ,CAACC,cAAT,CAAwBuD,WAAxB,EAAqCtD,KAArC,CAA2CC,OAA3C,GAAqD,OAArD;MACAH,QAAQ,CAACC,cAAT,CAAwBwD,YAAxB,EAAsCvD,KAAtC,CAA4CC,OAA5C,GAAsD,OAAtD;IAGH,CAbD,CAeA;IACA;IAhBA,KAiBK,IAAGY,MAAM,IAAI,IAAV,IAAkBY,KAAK,CAAC4B,MAAN,CAAahC,KAAb,IAAoB,MAAtC,IAAgD+B,IAAI,IAAI,gBAA3D,EAA4E;MAC7EtD,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CsB,KAA1C,GAAkD,MAAlD,CAD6E,CACpB;;MACzDvB,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CyD,QAA1C,GAAqD,IAArD,CAF6E,CAEnB;IAE7D,CAJI,CAML;IACA;IACA;IARK,KASA,IAAG3C,MAAM,IAAI,IAAV,IAAkBY,KAAK,CAAC4B,MAAN,CAAahC,KAAb,IAAoB,MAAtC,IAAgD+B,IAAI,IAAI,gBAAxD,IAA4EvC,MAAM,IAAI,KAAV,IAAmBY,KAAK,CAAC4B,MAAN,CAAahC,KAAb,IAAsB,MAAzC,IAAmD+B,IAAI,IAAI,gBAA1I,EAA2J;MAE5J;MACA,IAAGtD,QAAQ,CAACC,cAAT,CAAwB,sBAAxB,KAAmD,IAAtD,EAA2D;QACvDD,QAAQ,CAACC,cAAT,CAAwB,sBAAxB,EAAgD0D,OAAhD,GAA0D,IAA1D;MACH;;MACD,IAAG3D,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,KAAgD,IAAnD,EAAwD;QACpDD,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,EAA6C0D,OAA7C,GAAuD,IAAvD;MACH;;MACD,IAAG3D,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,KAAgD,IAAnD,EAAwD;QACpDD,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,EAA6C0D,OAA7C,GAAuD,IAAvD;MACH;;MAED,IAAIhB,iBAAiB,GAAG,EAAxB;MACA,IAAIC,gBAAgB,GAAG,EAAvB;MACA,IAAIC,cAAc,GAAG,EAArB,CAf4J,CAiB5J;;MACA,IAAG9B,MAAM,IAAI,IAAb,EAAkB;QACd;QACA,IAAI6C,aAAa,GAAG5D,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CsB,KAA9D,CAFc,CAGd;QACA;QACA;;QACAoB,iBAAiB,GAAG,WAAWiB,aAAX,GAA2BjC,KAAK,CAAC4B,MAAN,CAAahC,KAA5D;QACAqB,gBAAgB,GAAG,aAAYgB,aAAZ,GAA4BjC,KAAK,CAAC4B,MAAN,CAAahC,KAA5D;QACAsB,cAAc,GAAG,WAAWe,aAAX,GAA0BjC,KAAK,CAAC4B,MAAN,CAAahC,KAAxD,CARc,CAUd;;QACAvB,QAAQ,CAACC,cAAT,CAAwB0C,iBAAxB,EAA2CzC,KAA3C,CAAiDC,OAAjD,GAA2D,OAA3D;QACAH,QAAQ,CAACC,cAAT,CAAwB2C,gBAAxB,EAA0C1C,KAA1C,CAAgDC,OAAhD,GAA0D,OAA1D;QACAH,QAAQ,CAACC,cAAT,CAAwB4C,cAAxB,EAAwC3C,KAAxC,CAA8CC,OAA9C,GAAwD,OAAxD;MACH,CAdD,CAeA;MAfA,KAgBK,IAAGY,MAAM,IAAI,KAAb,EAAmB;QACpB;QACA4B,iBAAiB,GAAG,WAAWhB,KAAK,CAAC4B,MAAN,CAAahC,KAA5C;QACAqB,gBAAgB,GAAG,aAAajB,KAAK,CAAC4B,MAAN,CAAahC,KAA7C;QACAsB,cAAc,GAAG,WAAWlB,KAAK,CAAC4B,MAAN,CAAahC,KAAzC,CAJoB,CAMpB;;QACAvB,QAAQ,CAACC,cAAT,CAAwB0C,iBAAxB,EAA2CzC,KAA3C,CAAiDC,OAAjD,GAA2D,OAA3D;QACAH,QAAQ,CAACC,cAAT,CAAwB2C,gBAAxB,EAA0C1C,KAA1C,CAAgDC,OAAhD,GAA0D,OAA1D;;QACA,IAAGW,YAAY,IAAI,IAAnB,EAAwB;UACpBd,QAAQ,CAACC,cAAT,CAAwB4C,cAAxB,EAAwC3C,KAAxC,CAA8CC,OAA9C,GAAwD,OAAxD;QACH;MAEJ,CA/C2J,CAiD5J;;;MACAzB,WAAW,eACP;QAAK,KAAK,EAAC,KAAX;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACI;QAAK,KAAK,EAAG,SAAb;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACI;QAAK,KAAK,EAAC,UAAX;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,0BADJ,eAEI;QAAO,IAAI,EAAG,UAAd;QAAyB,EAAE,EAAC,sBAA5B;QAAmD,OAAO,EAAE;UAAA,OAAImF,cAAc,CAAClB,iBAAD,EAAoB,sBAApB,CAAlB;QAAA,CAA5D;QAA2H,cAAc,MAAzI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAFJ,CADJ,CADJ,eAOI;QAAK,KAAK,EAAG,SAAb;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACI;QAAK,KAAK,EAAC,UAAX;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,yBADJ,eAEI;QAAO,IAAI,EAAG,UAAd;QAAyB,EAAE,EAAC,mBAA5B;QAAgD,OAAO,EAAE;UAAA,OAAIkB,cAAc,CAACjB,gBAAD,EAAmB,mBAAnB,CAAlB;QAAA,CAAzD;QAAoH,cAAc,MAAlI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAFJ,CADJ,CAPJ,EAcK9B,YAAY,gBACH;QAAK,KAAK,EAAG,SAAb;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACA;QAAK,KAAK,EAAC,UAAX;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,uBADJ,eAEI;QAAO,IAAI,EAAG,UAAd;QAAyB,EAAE,EAAC,mBAA5B;QAAgD,OAAO,EAAE;UAAA,OAAI+C,cAAc,CAAChB,cAAD,EAAiB,mBAAjB,CAAlB;QAAA,CAAzD;QAAkH,cAAc,MAAhI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAFJ,CADA,CADG,gBAQV,yCAtBP,CADO,CAAX;IA8BH,CA9G6D,CAgH9D;IACA;;;IACA,IAAGlB,KAAK,CAAC4B,MAAN,CAAahC,KAAb,IAAsB,MAAtB,IAAgC+B,IAAI,IAAI,gBAA3C,EAA4D;MACxDtD,QAAQ,CAACC,cAAT,CAAwB0B,KAAK,CAAC4B,MAAN,CAAahC,KAArC,EAA4CrB,KAA5C,CAAkDC,OAAlD,GAA4D,OAA5D;IACH,CApH6D,CAqH9D;IACA;;;IACA,IAAGwB,KAAK,CAAC4B,MAAN,CAAahC,KAAb,IAAsB,MAAtB,IAAgC+B,IAAI,IAAI,gBAA3C,EAA4D;MACxDtD,QAAQ,CAACC,cAAT,CAAwBJ,MAAM,GAAG8B,KAAK,CAAC4B,MAAN,CAAahC,KAA9C,EAAqDrB,KAArD,CAA2DC,OAA3D,GAAqE,OAArE;IACH,CAzH6D,CA2H9D;;;IACA,IAAGN,MAAM,IAAI,EAAV,IAAgBA,MAAM,IAAI,MAA1B,IAAoCA,MAAM,IAAI8B,KAAK,CAAC4B,MAAN,CAAahC,KAA3D,IAAoE+B,IAAI,IAAI,gBAA/E,EAAgG;MAC5F9C,OAAO,CAACC,GAAR,CAAY,uCAAZ;MACA/B,WAAW,CAAC,EAAD,CAAX,CAF4F,CAE5E;;MAChBsB,QAAQ,CAACC,cAAT,CAAwBJ,MAAxB,EAAgCK,KAAhC,CAAsCC,OAAtC,GAAgD,MAAhD,CAH4F,CAI5F;;MACA,IAAGL,MAAM,IAAI,EAAV,IAAgBA,MAAM,IAAI,MAA1B,IAAoCiB,MAAM,IAAI,IAAjD,EAAsD;QAClDf,QAAQ,CAACC,cAAT,CAAwBJ,MAAM,GAACC,MAA/B,EAAuCI,KAAvC,CAA6CC,OAA7C,GAAuD,MAAvD;MACH;IAEJ,CATD,CAUA;IACA;IAXA,KAYK,IAAGL,MAAM,IAAI,EAAV,IAAgBA,MAAM,IAAI,MAA1B,IAAoCA,MAAM,IAAI6B,KAAK,CAAC4B,MAAN,CAAahC,KAA3D,IAAoE+B,IAAI,IAAI,gBAA/E,EAAgG;MACjGtD,QAAQ,CAACC,cAAT,CAAwBJ,MAAM,GAAGC,MAAjC,EAAyCI,KAAzC,CAA+CC,OAA/C,GAAyD,MAAzD;IACH,CAFI,CAGL;IACA;IAJK,KAKA,IAAGmD,IAAI,IAAI,gBAAR,IAA4BxD,MAAM,IAAI,MAAtC,IAAgDrB,QAAQ,IAAI,EAA/D,EAAkE;MACnEC,WAAW,CAAC,EAAD,CAAX;IACH,CAFI,CAGL;IACA;IAJK,KAKA,IAAGmB,MAAM,IAAI,EAAV,IAAgBA,MAAM,IAAI,MAA1B,IAAoCkB,MAAM,IAAI,KAAjD,EAAuD;MACxDf,QAAQ,CAACC,cAAT,CAAwBJ,MAAxB,EAAgCK,KAAhC,CAAsCC,OAAtC,GAAgD,MAAhD;IACH,CApJ6D,CAqJ9D;IACA;;;IACA,IAAGwB,KAAK,CAAC4B,MAAN,CAAahC,KAAb,IAAsB,MAAtB,IAAgCR,MAAM,IAAI,KAA1C,IAAmDY,KAAK,CAAC4B,MAAN,CAAahC,KAAb,IAAsB,MAAtB,IAAgC+B,IAAI,IAAI,gBAA9F,EAA+G;MAC3G5E,WAAW,CAAC,EAAD,CAAX;IACH,CAzJ6D,CA4J9D;;;IACA,IAAG4E,IAAI,IAAI,gBAAX,EAA4B;MACxBzD,MAAM,GAAG8B,KAAK,CAAC4B,MAAN,CAAahC,KAAtB;IACH;;IACD,IAAG+B,IAAI,IAAI,gBAAX,EAA4B;MACxBxD,MAAM,GAAG6B,KAAK,CAAC4B,MAAN,CAAahC,KAAtB;IACH;EAGJ,CArKD,CAnSqB,CA0crB;EACA;EACA;;;EACA,IAAMsC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAQC,IAAR,EAAiB;IAEpC,IAAIf,IAAI,GAAGhD,QAAQ,CAACC,cAAT,CAAwB6D,KAAxB,CAAX,CAFoC,CAEM;IAC1C;;IACA,IAAGE,MAAM,CAACC,gBAAP,CAAwBjB,IAAxB,EAA8B7C,OAA9B,IAAyC,OAA5C,EAAoD;MAChD6C,IAAI,CAAC9C,KAAL,CAAWC,OAAX,GAAqB,MAArB;MACAH,QAAQ,CAACC,cAAT,CAAwB8D,IAAxB,EAA8BG,cAA9B,GAA+C,KAA/C;IACH,CAHD,CAIA;IAJA,KAKK,IAAGF,MAAM,CAACC,gBAAP,CAAwBjB,IAAxB,EAA8B7C,OAA9B,IAAyC,MAA5C,EAAmD;MACpD6C,IAAI,CAAC9C,KAAL,CAAWC,OAAX,GAAoB,OAApB;MACAH,QAAQ,CAACC,cAAT,CAAwB8D,IAAxB,EAA8BG,cAA9B,GAA+C,IAA/C;IAEH;EAEJ,CAfD,CA7cqB,CA8drB;;;EACA,oBACI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI;IAAM,KAAK,EAAC,aAAZ;IAA0B,EAAE,EAAC,aAA7B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI;IAAK,MAAM,MAAX;IAAY,EAAE,EAAC,MAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,oBADJ,CADJ,eAKI;IAAK,MAAM,MAAX;IAAY,EAAE,EAAC,SAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,oBADJ,eAEI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAFJ,eAGI;IAAQ,EAAE,EAAC,eAAX;IAA2B,IAAI,EAAC,QAAhC;IAAyC,OAAO,EAAE,iBAAAvC,KAAK;MAAA,OAAI5B,cAAc,EAAlB;IAAA,CAAvD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,qBAHJ,eAII;IAAK,KAAK,EAAG,KAAb;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI;IAAK,KAAK,EAAG,SAAb;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACK1B,eADL,CADJ,eAII;IAAK,KAAK,EAAG,SAAb;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACKE,eADL,CAJJ,CAJJ,eAaI;IAAK,KAAK,EAAG,SAAb;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACSE,QADT,CAbJ,EAiBKN,YAjBL,EAkBKkB,YAlBL,EAmBKE,YAnBL,EAoBKtB,SApBL,CALJ,CADJ,CADJ;AAgCH,CA/fD;;AAggBA,eAAeH,UAAf"},"metadata":{},"sourceType":"module"}