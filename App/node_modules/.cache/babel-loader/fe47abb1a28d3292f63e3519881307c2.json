{"ast":null,"code":"import _toConsumableArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli-app/src/getMetadata.js\";\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { render, waitForElementToBeRemoved } from '@testing-library/react'; //import GetSettings from \"./getSettings.js\"\n//If no markers prevent user to go forward\n\nvar GetMetadata = forwardRef(function (props, ref) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      renderArea = _useState2[0],\n      setRenderArea = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allMarkers = _useState4[0],\n      setAllMarkes = _useState4[1]; // const [inputFields, setInputFields] = useState([]);\n\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      markerDict = _useState6[0],\n      setMarkersDict = _useState6[1];\n\n  var inputFields = [];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      markers = _useState8[0],\n      setMarkers = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      originalMarkers = _useState10[0],\n      setOriginalMarkers = _useState10[1]; //This list keeps in track about the markers that the user inputted\n\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      markerTextBox = _useState12[0],\n      setMarkerTextBox = _useState12[1]; //let originalMarkers = []\n\n\n  useImperativeHandle(ref, function () {\n    return {\n      getProcesses: function getProcesses() {\n        console.log(\"AXIOS\");\n        axios.get(\"/submitSettings\").then(function (response) {\n          setMarkersDict(response.data[1]);\n          setMarkers(response.data[2]);\n          setOriginalMarkers(response.data[2]); //setSamples(JSON.parse(response.data[1]))\n          //console.log(samples)\n          //console.log(typeof(samples))\n          //Parse values from response data to boolean format\n\n          for (var prop in response.data[0]) {\n            if (response.data[0].hasOwnProperty(prop)) {\n              response.data[0][prop] = response.data[0][prop] == 'true' || response.data[0][prop] == 'false' ? response.data[0][prop] === 'true' : response.data[0][prop];\n            }\n          } //Checkbox to Compute marker positive areas to all markers\n          //+ input fields to custom markers\n\n\n          if (response.data[0].execute_area == true) {\n            setRenderArea(true); //console.log(\"Render area \", renderArea)\n          } else if (response.data[0].execute_area == false) setRenderArea(false);\n\n          if (response.data[0].execute_sd_segmentation == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_type_identification == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_clustering == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_thresholding == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_homotypic_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_heterotypic_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_permuted_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          } //console.log(skip_area)\n          //console.log(response.data.skip_area)\n\n        });\n      },\n      submitMetadata: function submitMetadata() {\n        console.log(\"metadata\");\n        console.log(allMarkers);\n        console.log(\"getMETADATA\");\n      }\n    };\n  });\n\n  var allMarkersChecked = function allMarkersChecked() {\n    setAllMarkes(!allMarkers);\n\n    if (allMarkers === false) {\n      console.log(\"checked\"); //Maps the key value pairs in samplesDict\n\n      /*Object.keys(samplesDict).forEach(function(key, index){\n          inputFields.push(samplesDict[key])\n          console.log(inputFields)\n          console.log(\"READY\")\n      })*/\n\n      console.log(\"SETTING MARKERS\");\n      {\n        console.log(originalMarkers);\n      }\n      var counter = 0;\n      Object.keys(markerDict).forEach(function (key, index) {\n        //setMarkerTextBox(markers.map((item,index) => {\n        {\n          console.log(key);\n        }\n        {\n          console.log(index);\n        }\n        {\n          console.log(markerDict[key]);\n        }\n\n        if (originalMarkers.includes(key)) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            class: \"row\",\n            id: index,\n            value: key,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 24\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            class: \"col-1\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"input\", {\n            name: \"marker\",\n            value: key,\n            onChange: function onChange(event) {\n              return handleChangeInput(index, event);\n            },\n            size: \"10\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 25\n            }\n          })), /*#__PURE__*/React.createElement(\"div\", {\n            class: \"col-2\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"input\", {\n            name: \"mainMarker\",\n            value: key,\n            onChange: function onChange(event) {\n              return handleChangeInput(index, event);\n            },\n            size: \"10\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 25\n            }\n          })), /*#__PURE__*/React.createElement(\"div\", {\n            class: \"col-3\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"button\", {\n            onClick: function onClick() {\n              return removeMarker(index);\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 25\n            }\n          }, \"Remove\")));\n        }\n      });\n    }\n  };\n\n  var addMarkers = function addMarkers(event) {\n    console.log(markerTextBox.length);\n    console.log(typeof markerTextBox); //THe div doesn't have a value\n    //Removing this doesn't work\n\n    setMarkerTextBox([].concat(_toConsumableArray(markerTextBox), [/*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      id: markerTextBox.length + 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-1\",\n      __self: _this,\n     