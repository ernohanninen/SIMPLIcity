{"ast":null,"code":"import _slicedToArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli-app/src/getMetadata.js\";\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport { render } from '@testing-library/react'; //import GetSettings from \"./getSettings.js\"\n\nvar GetMetadata = forwardRef(function (props, ref) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      renderArea = _useState2[0],\n      setRenderArea = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allMarkers = _useState4[0],\n      setAllMarkes = _useState4[1]; //const [samplesDict, setSamplesDict] = useState({})\n\n\n  var samplesDict = {};\n  useImperativeHandle(ref, function () {\n    return {\n      getProcesses: function getProcesses() {\n        axios.get(\"/submitSettings\").then(function (response) {\n          console.log(response);\n          console.log(response.data[0]);\n          console.log(typeof response.data[1]);\n          var samplesResponse = JSON.parse(response.data[1]);\n          console.log(length(samplesResponse)); //setSamples(JSON.parse(response.data[1]))\n          //console.log(samples)\n          //console.log(typeof(samples))\n          //Parse values from response data to boolean format\n\n          for (var prop in response.data[0]) {\n            if (response.data[0].hasOwnProperty(prop)) {\n              response.data[0][prop] = response.data[0][prop] == 'true' || response.data[0][prop] == 'false' ? response.data[0][prop] === 'true' : response.data[0][prop];\n            }\n          } //Checkbox to Compute marker positive areas to all markers\n          //+ input fields to custom markers\n\n\n          if (response.data[0].execute_area == true) {\n            console.log(\"RENDER SOMETHING\");\n            setRenderArea(true); //console.log(\"Render area \", renderArea)\n          } else if (response.data[0].execute_area == false) setRenderArea(false);\n\n          if (response.data[0].execute_sd_segmentation == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_type_identification == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_clustering == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_thresholding == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_homotypic_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_heterotypic_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_permuted_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          } //console.log(skip_area)\n          //console.log(response.data.skip_area)\n\n        });\n      },\n      submitMetadata: function submitMetadata() {\n        console.log(\"metadata\");\n        console.log(\"getMETADATA\");\n      }\n    };\n  });\n\n  var cbAreaChecked = function cbAreaChecked(event) {\n    console.log(\"OK\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    class: \"metadataForm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, \"Submit metadata:\"), renderArea ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }\n  }, \"Area\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"checkbox\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 29\n    }\n  }, \"Select all markers: \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    name: \"cbAreas\",\n    onChange: function onChange(event) {\n      setAllMarkes(!allMarkers);\n      cbAreaChecked(event);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 33\n    }\n  })), allMarkers ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 29\n    }\n  }, \"ALL markers\")) : /*#__PURE__*/React.createElement(React.Fragment, null)) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n});\nexport default GetMetadata; //<div>{allMarkers && <p>Loading...</p>}</div>","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","axios","render","GetMetadata","props","ref","renderArea","setRenderArea","allMarkers","setAllMarkes","samplesDict","getProcesses","get","then","response","console","log","data","samplesResponse","JSON","parse","length","prop","hasOwnProperty","execute_area","execute_sd_segmentation","execute_cell_type_identification","execute_cell_clustering","execute_cell_thresholding","execute_homotypic_interactions","execute_heterotypic_interactions","execute_permuted_interactions","submitMetadata","cbAreaChecked","event"],"sources":["/home/ernohanninen/simpli-app/src/getMetadata.js"],"sourcesContent":["import React,  { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport { render } from '@testing-library/react';\n//import GetSettings from \"./getSettings.js\"\n\n\nconst GetMetadata = forwardRef((props, ref)=>{\n\n    const [renderArea, setRenderArea] = useState(false)\n    const [allMarkers, setAllMarkes]  = useState(false)\n    //const [samplesDict, setSamplesDict] = useState({})\n    var samplesDict = {}\n    useImperativeHandle(ref, ()=>({\n        getProcesses(){\n            axios.get(\"/submitSettings\")\n            .then(function(response){\n                console.log(response)\n                console.log(response.data[0])\n                console.log(typeof(response.data[1]))\n                var samplesResponse = JSON.parse(response.data[1])\n                console.log(length(samplesResponse))\n\n                //setSamples(JSON.parse(response.data[1]))\n                //console.log(samples)\n                //console.log(typeof(samples))\n                //Parse values from response data to boolean format\n                for (let prop in response.data[0]) {\n                    if (response.data[0].hasOwnProperty(prop)) {\n                        response.data[0][prop] = (response.data[0][prop] == 'true' || response.data[0][prop] == 'false')? response.data[0][prop] === 'true': response.data[0][prop] ;\n                    }\n                } \n                //Checkbox to Compute marker positive areas to all markers\n                //+ input fields to custom markers\n                if(response.data[0].execute_area == true){\n                    console.log(\"RENDER SOMETHING\")\n                    setRenderArea(true)\n                    //console.log(\"Render area \", renderArea)\n\n                }\n                else if(response.data[0].execute_area == false)setRenderArea(false)\n                \n                if(response.data[0].execute_sd_segmentation == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_type_identification == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_clustering == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_thresholding == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_homotypic_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_heterotypic_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_permuted_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                \n                //console.log(skip_area)\n                //console.log(response.data.skip_area)\n            })\n        },\n        submitMetadata(){\n\n            console.log(\"metadata\")\n            \n\n            console.log(\"getMETADATA\")\n        }\n       \n\n        \n\n    }))\n\n    const cbAreaChecked =  event => {\n        console.log(\"OK\")\n\n    }\n \n    return(\n        <div>\n            <form class=\"metadataForm\">\n                <b>Submit metadata:</b>\n                {renderArea ? (\n                    <div>\n                        <p>Area</p>\n                            <div class = \"checkbox\" >\n\n                            <p>Select all markers: </p>\n                                <input type = \"checkbox\" name=\"cbAreas\" onChange={event=>{setAllMarkes(!allMarkers);cbAreaChecked(event)}}/>\n                        </div>\n                        {allMarkers ? (\n                        <div>\n                            <p>ALL markers</p>\n                        </div>\n                         ):(<></>)}\n                    </div>\n                   \n\n                ):(<></>)}\n\n\n          \n            </form>\n        </div>\n    \n        )\n   \n})\nexport default GetMetadata;\n//<div>{allMarkers && <p>Loading...</p>}</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}