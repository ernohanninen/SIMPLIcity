{"ast":null,"code":"import _toConsumableArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli-app/src/getResults.js\";\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport Table from \"./sample_table.js\";\n\nvar GetResults = function GetResults() {\n  //Variables\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      plotPaths = _useState2[0],\n      setPlotPaths = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      areaPlots = _useState4[0],\n      setAreaPlots = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sampleImages = _useState6[0],\n      setSampleImages = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dropDown = _useState8[0],\n      setDropDown = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      checkbox = _useState10[0],\n      setCheckbox = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      displaySegmentationCb = _useState12[0],\n      setDisplaySegmentationCb = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      preprocessedCb = _useState14[0],\n      setPreprocessedCb = _useState14[1];\n\n  var _useState15 = useState(true),\n      _useState16 = _slicedToArray(_useState15, 2),\n      firstCall = _useState16[0],\n      setFirstCall = _useState16[1];\n\n  var _useState17 = useState({}),\n      _useState18 = _slicedToArray(_useState17, 2),\n      totalCells = _useState18[0],\n      setTotalCells = _useState18[1];\n\n  var _useState19 = useState({}),\n      _useState20 = _slicedToArray(_useState19, 2),\n      resultingCells = _useState20[0],\n      setResultingCells = _useState20[1]; //const [displaySegmented, setDisplaySegmented] = useState(true)\n\n\n  var sample = \"\"; //Function which get the images from backend\n\n  var displayResults = function displayResults() {\n    document.getElementById(\"resultsButton\").style.display = \"none\";\n    axios.get(\"/fetchResults\").then(function (response) {\n      setTotalCells(response.data[1]);\n      setResultingCells(response.data[2]);\n      console.log(\"PALUU ARVO\");\n      console.log(response.data);\n      console.log(response.data[1]);\n      console.log(response.data[2]); //Extracting values from dictionary\n\n      var samples = response.data[0][\"samples\"];\n      var area = response.data[0][\"area\"];\n      console.log(area);\n      console.log(samples);\n      setPlotPaths(area);\n      displayImages(area, samples, response.data[1], response.data[2]); //Calling function which displays the images         \n    });\n  }; //Function which displays the images to the user\n\n\n  var displayImages = function displayImages(area, samples, totalCells, resultingCells) {\n    var segmentation = false;\n    var counter = 0;\n    var i = Object.entries(samples[Object.keys(samples)[0]]).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      if (Object.keys(value).includes(\"overlays\")) {\n        segmentation = true;\n      }\n\n      if (Object.keys(value).includes(\"preprocessed\")) {\n        counter += 1;\n      }\n    });\n\n    if (counter > 1) {\n      var sample_markers = [];\n      Object.entries(samples[Object.keys(samples)[0]]).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            key = _ref4[0],\n            value = _ref4[1];\n\n        console.log(value);\n\n        if (Object.keys(value).includes(\"preprocessed\")) {\n          var sample_name = value[Object.keys(value)];\n          console.log(sample_name);\n          sample_name = sample_name.split(\"/\")[1];\n          console.log(sample_name);\n          sample_name = sample_name.split(/(.*)-/)[1];\n          console.log(sample_name);\n\n          if (sample_name != \"ALL\") {\n            sample_markers.push(sample_name);\n          }\n        } else {\n          return;\n        }\n      });\n      samples = sample_markers;\n    }\n\n    console.log(sample_markers);\n    console.log(counter); //Get the values for drop-down list\n\n    if (counter == 1) {\n      var optionItems = Object.entries(samples).map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            key = _ref6[0],\n            value = _ref6[1];\n\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: key,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }\n        }, key);\n      });\n    }\n\n    if (counter > 1) {\n      var optionItems = Object.entries(samples).map(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            key = _ref8[0],\n            value = _ref8[1];\n\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: value,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }\n        }, value);\n      });\n    } //Create the dropdown list\n\n\n    setDropDown( /*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, \"Samples: \"), /*#__PURE__*/React.createElement(\"select\", {\n      name: \"sampleSelector\",\n      id: \"sampleSelector\",\n      onChange: function onChange(event) {\n        return handleChangeSelect(event, segmentation);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      id: \"optionNone\",\n      value: \"None\",\n      selected: \"true\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 18\n      }\n    }, \"None\"), optionItems)));\n\n    if (counter == 1) {\n      //Map samples and set the images to variable\n      setSampleImages(Object.entries(samples).map(function (_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 2),\n            key = _ref10[0],\n            value = _ref10[1];\n\n        var idPreprocessed = \"idPre\" + key;\n        var idThresholded = \"idThres\" + key;\n        var idSegmented = \"idSeg\" + key;\n        var idPreprocessedDiv = \"preDiv\" + key;\n        var idThresholdedDiv = \"thresDiv\" + key;\n        var idSegmentedDiv = \"segDiv\" + key;\n        return [].concat(_toConsumableArray(sampleImages), [/*#__PURE__*/React.createElement(\"div\", {\n          id: key,\n          hidden: true,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          id: idPreprocessedDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }\n        }, \"Preprocessed \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idPreprocessed,\n          src: require(\"../src/images/\" + value[0][\"preprocessed\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idPreprocessed);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          id: idThresholdedDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }\n        }, \"Thresholded \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idThresholded,\n          src: require(\"../src/images/\" + value[1][\"thresholded\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idThresholded);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }\n        })), segmentation ? /*#__PURE__*/React.createElement(\"div\", {\n          id: idSegmentedDiv,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 29\n          }\n        }, \"Segmented \", key, \":\"), /*#__PURE__*/React.createElement(\"img\", {\n          class: \"contain\",\n          id: idSegmented,\n          src: require(\"../src/images/\" + value[2][\"overlays\"]),\n          onClick: function onClick(event) {\n            return displayFullScreen(idSegmented);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 29\n          }\n        }, \"Number of cells detected in image segmentation : \", totalCells[key]), /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 29\n          }\n        }, \"Number of cells after removing unassigned ones : \", resultingCells[key]), /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(\"br\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 29\n          }\n        })) : /*#__PURE__*/React.createElement(React.Fragment, null))]);\n      }));\n    }\n\n    if (counter > 1) {\n      setSampleImages(Object.entries(samples).map(function (_ref11) {\n        var _ref12 = _slicedToArray(_ref11, 2),\n            key = _ref12[0],\n            value = _ref12[1];\n\n        console.log(key);\n        console.log(value);\n      }));\n    } //Set marker area plot\n\n\n    if (area != \"\") {\n      setAreaPlots( /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }\n      }, \"Measurement of marker positive area:\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        id: \"areaPlot\",\n        src: require(\"../src/images/Area/\" + area),\n        onClick: function onClick(event) {\n          return displayFullScreen(\"areaPlot\");\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }\n      })));\n    }\n  };\n\n  var displayFullScreen = function displayFullScreen(id) {\n    var elem = document.getElementById(id);\n\n    if (document.fullscreenElement) {\n      document.exitFullscreen();\n    } else {\n      if (elem.requestFullscreen) {\n        elem.requestFullscreen();\n      } else if (elem.webkitRequestFullscreen) {\n        /* Safari */\n        elem.webkitRequestFullscreen();\n      } else if (elem.msRequestFullscreen) {\n        /* IE11 */\n        elem.msRequestFullscreen();\n      }\n    }\n  }; //Handles changes in the sample drop-down list\n\n\n  var handleChangeSelect = function handleChangeSelect(event, segmentation) {\n    //displays images/nothing depending of the selected drop-down value\n    var idPreprocessedDiv = \"preDiv\" + event.target.value;\n    var idThresholdedDiv = \"thresDiv\" + event.target.value;\n    var idSegmentedDiv = \"segDiv\" + event.target.value;\n    console.log(\"Segmentation : \", segmentation);\n    console.log(totalCells);\n    console.log(resultingCells);\n\n    if (event.target.value == \"None\") {\n      setCheckbox(\"\");\n    } else {\n      //IF the checkbox exists it is checked by default\n      if (document.getElementById(\"preprocessedImgCheck\") != null) {\n        document.getElementById(\"preprocessedImgCheck\").checked = true;\n      }\n\n      if (document.getElementById(\"thresholdImgCheck\") != null) {\n        document.getElementById(\"thresholdImgCheck\").checked = true;\n      }\n\n      if (document.getElementById(\"segmentedImgCheck\") != null) {\n        document.getElementById(\"segmentedImgCheck\").checked = true;\n      } //If the image is hidden make them visible\n\n\n      document.getElementById(idPreprocessedDiv).style.display = \"block\";\n      document.getElementById(idThresholdedDiv).style.display = \"block\";\n\n      if (segmentation == true) {\n        document.getElementById(idSegmentedDiv).style.display = \"block\";\n      }\n\n      setCheckbox( /*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"colQC-1\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"checkbox\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }\n      }, \"Preprocessed image: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"preprocessedImgCheck\",\n        onClick: function onClick() {\n          return handleCheckbox(idPreprocessedDiv, \"preprocessedImgCheck\");\n        },\n        defaultChecked: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"colQC-2\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"checkbox\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 25\n        }\n      }, \"Thresholded image: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"thresholdImgCheck\",\n        onClick: function onClick() {\n          return handleCheckbox(idThresholdedDiv, \"thresholdImgCheck\");\n        },\n        defaultChecked: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 25\n        }\n      }))), segmentation ? /*#__PURE__*/React.createElement(\"div\", {\n        class: \"colQC-3\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"checkbox\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 31\n        }\n      }, \"Segmented image: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"segmentedImgCheck\",\n        onClick: function onClick() {\n          return handleCheckbox(idSegmentedDiv, \"segmentedImgCheck\");\n        },\n        defaultChecked: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 31\n        }\n      }))) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n    }\n\n    if (event.target.value != \"None\") {\n      document.getElementById(event.target.value).style.display = \"block\";\n    } //Hides images depending of the value\n\n\n    if (sample != \"\" && sample != \"None\") {\n      document.getElementById(sample).style.display = \"none\";\n    }\n\n    sample = event.target.value;\n  };\n\n  var handleCheckbox = function handleCheckbox(idDiv, idCb) {\n    var elem = document.getElementById(idDiv); //Hide element\n\n    if (window.getComputedStyle(elem).display == \"block\") {\n      elem.style.display = \"none\";\n      document.getElementById(idCb).defaultChecked = false;\n    } //Display element\n    else if (window.getComputedStyle(elem).display == \"none\") {\n      elem.style.display = \"block\";\n      document.getElementById(idCb).defaultChecked = true;\n    }\n  }; //Display HTML to the user\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    class: \"resultsForm\",\n    id: \"resultsForm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"load\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 21\n    }\n  }, \"Running SIMPLI\")), /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"results\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 21\n    }\n  }, \"SIMPLI results\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"resultsButton\",\n    type: \"button\",\n    onClick: function onClick(event) {\n      return displayResults();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 21\n    }\n  }, \"Display results\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"colQC-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 25\n    }\n  }, dropDown), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"colQC-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 25\n    }\n  }, checkbox)), sampleImages, areaPlots)));\n};\n\nexport default GetResults;","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","axios","Table","GetResults","plotPaths","setPlotPaths","areaPlots","setAreaPlots","sampleImages","setSampleImages","dropDown","setDropDown","checkbox","setCheckbox","displaySegmentationCb","setDisplaySegmentationCb","preprocessedCb","setPreprocessedCb","firstCall","setFirstCall","totalCells","setTotalCells","resultingCells","setResultingCells","sample","displayResults","document","getElementById","style","display","get","then","response","data","console","log","samples","area","displayImages","segmentation","counter","i","Object","entries","keys","map","key","value","includes","sample_markers","sample_name","split","push","optionItems","event","handleChangeSelect","idPreprocessed","idThresholded","idSegmented","idPreprocessedDiv","idThresholdedDiv","idSegmentedDiv","require","displayFullScreen","id","elem","fullscreenElement","exitFullscreen","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","target","checked","handleCheckbox","idDiv","idCb","window","getComputedStyle","defaultChecked"],"sources":["/home/ernohanninen/simpli-app/src/getResults.js"],"sourcesContent":["import React,  { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport Table from \"./sample_table.js\";\n\n\n\nconst GetResults = () => { \n    \n    //Variables\n    const [plotPaths, setPlotPaths] = useState(\"\")\n    const [areaPlots, setAreaPlots] = useState(\"\")\n    const [sampleImages, setSampleImages] = useState(\"\")\n    const [dropDown, setDropDown] = useState(\"\")\n    const [checkbox, setCheckbox] = useState(\"\")\n    const [displaySegmentationCb, setDisplaySegmentationCb] = useState(false)\n    const [preprocessedCb, setPreprocessedCb] = useState(false)\n    const [firstCall,setFirstCall] = useState(true)\n    const [totalCells, setTotalCells] = useState({})\n    const [resultingCells, setResultingCells] = useState({})\n    \n    //const [displaySegmented, setDisplaySegmented] = useState(true)\n\n    var sample = \"\"\n\n    //Function which get the images from backend\n    const displayResults = () => {\n        document.getElementById(\"resultsButton\").style.display = \"none\"\n        axios.get(\"/fetchResults\")\n        .then(function(response){\n           setTotalCells(response.data[1])\n           setResultingCells(response.data[2])\n           console.log(\"PALUU ARVO\")\n           console.log(response.data)\n\n           console.log(response.data[1])\n           console.log(response.data[2])\n           //Extracting values from dictionary\n           let samples = response.data[0][\"samples\"]\n           let area = response.data[0][\"area\"]\n           console.log(area)\n           console.log(samples)\n        \n           setPlotPaths(area)    \n           displayImages(area, samples, response.data[1], response.data[2]) //Calling function which displays the images         \n        })\n    }\n    //Function which displays the images to the user\n    const displayImages = (area, samples, totalCells, resultingCells) => { \n\n        let segmentation = false\n\n        let counter = 0\n\n        let i = Object.entries(samples[Object.keys(samples)[0]]).map(([key,value]) => {\n            if(Object.keys(value).includes(\"overlays\")){\n                segmentation = true\n            }\n            if(Object.keys(value).includes(\"preprocessed\")){\n                counter += 1\n            }\n        })\n\n        if(counter > 1){\n            var sample_markers = []\n            Object.entries(samples[Object.keys(samples)[0]]).map(([key,value]) => {\n                console.log(value)\n                if(Object.keys(value).includes(\"preprocessed\")){\n                    let sample_name = value[Object.keys(value)]\n                    console.log(sample_name)\n                    sample_name = sample_name.split(\"/\")[1]\n                    console.log(sample_name)\n                    sample_name = sample_name.split(/(.*)-/)[1]\n                    console.log(sample_name)\n                    if(sample_name != \"ALL\"){\n                        sample_markers.push(sample_name)\n                    }\n                    \n                }\n                else{return}\n            })\n            samples = sample_markers\n        }\n        console.log(sample_markers)\n        console.log(counter)\n\n        //Get the values for drop-down list\n        if(counter == 1){\n            var optionItems = Object.entries(samples).map(([key,value]) => \n            <option value={key}>{key}</option>\n        )}\n        if(counter > 1){\n            var optionItems = Object.entries(samples).map(([key,value]) => \n            <option value={value}>{value}</option>\n        )}\n        \n        \n        //Create the dropdown list\n        setDropDown(\n        <div class=\"row\">\n            <p>Samples: </p>\n            <select name=\"sampleSelector\" id=\"sampleSelector\" onChange={event => handleChangeSelect(event, segmentation)}>\n                 <option id=\"optionNone\" value=\"None\" selected=\"true\">None</option>  \n                 {optionItems}\n                  \n            </select>          \n            \n        </div>\n        )\n         \n        if(counter == 1){\n            //Map samples and set the images to variable\n            setSampleImages(Object.entries(samples).map(([key,value]) => {\n                let idPreprocessed = \"idPre\" + key\n                let idThresholded = \"idThres\" + key\n                let idSegmented = \"idSeg\" + key\n\n                let idPreprocessedDiv = \"preDiv\" + key\n                let idThresholdedDiv = \"thresDiv\" + key\n                let idSegmentedDiv = \"segDiv\" + key\n\n\n                return([...sampleImages, \n                <div id = {key} hidden>\n                    \n                    <div id = {idPreprocessedDiv}>\n                        <p>Preprocessed {key}:</p>    \n                        <img class=\"contain\" id ={idPreprocessed} src={require(\"../src/images/\" + value[0][\"preprocessed\"])} onClick= {event => displayFullScreen(idPreprocessed)}></img>\n                    </div>\n                    <div id = {idThresholdedDiv}>\n                        <p>Thresholded {key}:</p>\n                        <img class=\"contain\" id ={idThresholded} src={require(\"../src/images/\" + value[1][\"thresholded\"])}  onClick= {event => displayFullScreen(idThresholded)}></img>\n                    </div>\n                    {segmentation ? (\n                        <div id = {idSegmentedDiv}>\n                            <p>Segmented {key}:</p>\n                            <img class=\"contain\" id ={idSegmented} src={require(\"../src/images/\" + value[2][\"overlays\"])}  onClick= {event => displayFullScreen(idSegmented)}></img>  \n                            <p>Number of cells detected in image segmentation : {totalCells[key]}</p> \n                            <p>Number of cells after removing unassigned ones : {resultingCells[key]}</p>       \n                            <br></br>\n                            <br></br>\n                        </div>               \n                    ):(<></>)         \n                    }   \n                </div>])\n            }))\n        }\n\n        if(counter > 1){\n            setSampleImages(Object.entries(samples).map(([key,value]) => {\n                console.log(key)\n                console.log(value)\n                \n            }))\n\n        }\n        \n        //Set marker area plot\n        if(area != \"\"){\n            setAreaPlots(\n                <div>\n                    <b>Measurement of marker positive area:</b>\n                    <br></br>\n                    <img id =\"areaPlot\" src={require(\"../src/images/Area/\" + area)} onClick= {event => displayFullScreen(\"areaPlot\")}></img>\n                </div>\n            )\n        }\n        \n    } \n\n\n    const displayFullScreen = (id) => { \n        let elem = document.getElementById(id)\n        if(document.fullscreenElement){\n            document.exitFullscreen()\n        }\n        else{\n            if (elem.requestFullscreen) {\n                elem.requestFullscreen();\n              } else if (elem.webkitRequestFullscreen) { /* Safari */\n                elem.webkitRequestFullscreen();\n              } else if (elem.msRequestFullscreen) { /* IE11 */\n                elem.msRequestFullscreen();\n              }\n        }\n        \n    }\n\n    //Handles changes in the sample drop-down list\n    const handleChangeSelect = (event, segmentation) => { \n        //displays images/nothing depending of the selected drop-down value\n        let idPreprocessedDiv = \"preDiv\" + event.target.value\n        let idThresholdedDiv = \"thresDiv\" + event.target.value\n        let idSegmentedDiv = \"segDiv\" + event.target.value\n\n        console.log(\"Segmentation : \", segmentation)\n        console.log(totalCells)\n        console.log(resultingCells)\n        \n        if(event.target.value == \"None\"){     \n            setCheckbox(\"\")  \n        }\n        else{\n            //IF the checkbox exists it is checked by default\n            if(document.getElementById(\"preprocessedImgCheck\") != null){\n                document.getElementById(\"preprocessedImgCheck\").checked = true;    \n            }\n            if(document.getElementById(\"thresholdImgCheck\") != null){\n                document.getElementById(\"thresholdImgCheck\").checked = true; \n            }\n            if(document.getElementById(\"segmentedImgCheck\") != null){\n                document.getElementById(\"segmentedImgCheck\").checked = true;    \n            }        \n\n            //If the image is hidden make them visible\n            document.getElementById(idPreprocessedDiv).style.display = \"block\"\n            document.getElementById(idThresholdedDiv).style.display = \"block\"\n            if(segmentation == true){\n                document.getElementById(idSegmentedDiv).style.display = \"block\"\n            }\n\n\n            setCheckbox(\n            <div class=\"row\">\n                <div class = \"colQC-1\">\n                    <div class=\"checkbox\">    \n                        <p>Preprocessed image: </p>\n                        <input type = \"checkbox\" id=\"preprocessedImgCheck\" onClick={()=>handleCheckbox(idPreprocessedDiv, \"preprocessedImgCheck\")} defaultChecked/>                \n                    </div>\n                </div>\n                <div class = \"colQC-2\">\n                    <div class=\"checkbox\">    \n                        <p>Thresholded image: </p>\n                        <input type = \"checkbox\" id=\"thresholdImgCheck\" onClick={()=>handleCheckbox(idThresholdedDiv, \"thresholdImgCheck\")} defaultChecked/>                \n                    </div>\n                </div>\n                       \n                {segmentation ? (\n                          <div class = \"colQC-3\">\n                          <div class=\"checkbox\">    \n                              <p>Segmented image: </p>\n                              <input type = \"checkbox\" id=\"segmentedImgCheck\" onClick={()=>handleCheckbox(idSegmentedDiv, \"segmentedImgCheck\")} defaultChecked/>                \n                          </div>         \n\n                      </div>\n                ):(<></>)         \n                }         \n            </div>    \n            )    \n\n            \n        } \n\n        if(event.target.value != \"None\"){\n            document.getElementById(event.target.value).style.display = \"block\"\n        }\n        //Hides images depending of the value\n        if(sample != \"\" && sample != \"None\"){\n            document.getElementById(sample).style.display = \"none\"\n        }\n        sample = event.target.value    \n        \n    }\n\n    const handleCheckbox = (idDiv, idCb) => {\n\n        var elem = document.getElementById(idDiv)\n        //Hide element\n        if(window.getComputedStyle(elem).display == \"block\"){\n            elem.style.display = \"none\"\n            document.getElementById(idCb).defaultChecked = false;\n        }\n        //Display element\n        else if(window.getComputedStyle(elem).display == \"none\"){\n            elem.style.display =\"block\"\n            document.getElementById(idCb).defaultChecked = true;\n\n        }\n\n    }\n \n    //Display HTML to the user\n    return(\n        <div>\n            <form class=\"resultsForm\" id=\"resultsForm\">\n                <div hidden id=\"load\">\n                    <p>Running SIMPLI</p>         \n                </div>\n                \n                <div hidden id=\"results\">  \n                    <b>SIMPLI results</b>  \n                    <br></br>\n                    <button id=\"resultsButton\" type=\"button\" onClick={event => displayResults()}>Display results</button>\n                    <div class = \"row\">\n                        <div class = \"colQC-1\">\n                            {dropDown}     \n                        </div>\n                        <div class = \"colQC-2\">\n                            {checkbox}                     \n                        </div>\n                    </div>\n                        \n                        \n                    \n                    {sampleImages}\n                    {areaPlots}\n                </div>\n            </form>\n        </div>\n    )\n}\nexport default GetResults;"],"mappings":"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"},"metadata":{},"sourceType":"module"}