{"ast":null,"code":"import _slicedToArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli-app/src/getMetadata.js\";\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport { render } from '@testing-library/react'; //import GetSettings from \"./getSettings.js\"\n\nvar GetMetadata = forwardRef(function (props, ref) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      renderArea = _useState2[0],\n      setRenderArea = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allMarkers = _useState4[0],\n      setAllMarkes = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      samplesDict = _useState6[0],\n      setSamplesDict = _useState6[1]; //var samplesDict = {}\n\n\n  useImperativeHandle(ref, function () {\n    return {\n      getProcesses: function getProcesses() {\n        axios.get(\"/submitSettings\").then(function (response) {\n          console.log(response);\n          console.log(response.data[0]);\n          console.log(response.data[1]);\n          setSamplesDict(response.data[1]); //setSamples(JSON.parse(response.data[1]))\n          //console.log(samples)\n          //console.log(typeof(samples))\n          //Parse values from response data to boolean format\n\n          for (var prop in response.data[0]) {\n            if (response.data[0].hasOwnProperty(prop)) {\n              response.data[0][prop] = response.data[0][prop] == 'true' || response.data[0][prop] == 'false' ? response.data[0][prop] === 'true' : response.data[0][prop];\n            }\n          } //Checkbox to Compute marker positive areas to all markers\n          //+ input fields to custom markers\n\n\n          if (response.data[0].execute_area == true) {\n            console.log(\"RENDER SOMETHING\");\n            console.log(allMarkers);\n            setRenderArea(true); //console.log(\"Render area \", renderArea)\n          } else if (response.data[0].execute_area == false) setRenderArea(false);\n\n          if (response.data[0].execute_sd_segmentation == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_type_identification == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_clustering == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_thresholding == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_homotypic_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_heterotypic_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_permuted_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          } //console.log(skip_area)\n          //console.log(response.data.skip_area)\n\n        });\n      },\n      submitMetadata: function submitMetadata() {\n        console.log(\"metadata\");\n        console.log(allMarkers);\n        console.log(\"getMETADATA\");\n      }\n    };\n  });\n\n  if (allMarkers === true) {\n    console.log(\"checked\");\n    console.log(samplesDict); //Maps the key value pairs in samplesDict\n\n    Object.keys(samplesDict).forEach(function (key, index) {\n      console.log(key);\n      console.log(samplesDict[key]);\n      var makerTextBox = document.createElement(\"input\");\n      makerTextBox.value = samplesDict[key];\n      document.body.appendChild(makerTextBox);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    class: \"metadataForm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, \"Submit metadata:\"), renderArea ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  }, \"Area\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"checkbox\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 29\n    }\n  }, \"Select all markers: \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    name: \"cbAreas\",\n    onClick: function onClick() {\n      return setAllMarkes(!allMarkers);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 33\n    }\n  })), allMarkers ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"body\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 29\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 37\n    }\n  }, \"Marker\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"marker\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 37\n    }\n  }, \"Main marker\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"main_marker\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 37\n    }\n  }))))) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n});\nexport default GetMetadata; //<div>{allMarkers && <p>Loading...</p>}</div>#setAllMarkes(!allMarkers);","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","axios","render","GetMetadata","props","ref","renderArea","setRenderArea","allMarkers","setAllMarkes","samplesDict","setSamplesDict","getProcesses","get","then","response","console","log","data","prop","hasOwnProperty","execute_area","execute_sd_segmentation","execute_cell_type_identification","execute_cell_clustering","execute_cell_thresholding","execute_homotypic_interactions","execute_heterotypic_interactions","execute_permuted_interactions","submitMetadata","Object","keys","forEach","key","index","makerTextBox","document","createElement","value","body","appendChild"],"sources":["/home/ernohanninen/simpli-app/src/getMetadata.js"],"sourcesContent":["import React,  { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport { render } from '@testing-library/react';\n//import GetSettings from \"./getSettings.js\"\n\n\nconst GetMetadata = forwardRef((props, ref)=>{\n\n    const [renderArea, setRenderArea] = useState(false)\n    const [allMarkers, setAllMarkes]  = useState(false)\n\n    const [samplesDict, setSamplesDict] = useState({})\n    //var samplesDict = {}\n    useImperativeHandle(ref, ()=>({\n        getProcesses(){\n            axios.get(\"/submitSettings\")\n            .then(function(response){\n                console.log(response)\n                console.log(response.data[0])\n                console.log(response.data[1])\n                setSamplesDict(response.data[1])\n\n                \n                //setSamples(JSON.parse(response.data[1]))\n                //console.log(samples)\n                //console.log(typeof(samples))\n                //Parse values from response data to boolean format\n                for (let prop in response.data[0]) {\n                    if (response.data[0].hasOwnProperty(prop)) {\n                        response.data[0][prop] = (response.data[0][prop] == 'true' || response.data[0][prop] == 'false')? response.data[0][prop] === 'true': response.data[0][prop] ;\n                    }\n                } \n                //Checkbox to Compute marker positive areas to all markers\n                //+ input fields to custom markers\n                if(response.data[0].execute_area == true){\n\n                    console.log(\"RENDER SOMETHING\")\n                    console.log(allMarkers)\n                    setRenderArea(true)\n                    //console.log(\"Render area \", renderArea)\n\n                }\n                else if(response.data[0].execute_area == false)setRenderArea(false)\n                \n                if(response.data[0].execute_sd_segmentation == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_type_identification == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_clustering == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_thresholding == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_homotypic_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_heterotypic_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_permuted_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                \n                //console.log(skip_area)\n                //console.log(response.data.skip_area)\n            })\n        },\n        submitMetadata(){\n\n            console.log(\"metadata\")\n            console.log(allMarkers)\n\n            console.log(\"getMETADATA\")\n        }\n    }))\n\n \n    \n    if(allMarkers === true){\n        console.log(\"checked\")\n    \n        console.log(samplesDict)\n        //Maps the key value pairs in samplesDict\n        Object.keys(samplesDict).forEach(function(key, index){\n            console.log(key)\n            console.log(samplesDict[key])\n            var makerTextBox = document.createElement(\"input\")\n            makerTextBox.value = samplesDict[key]\n            document.body.appendChild(makerTextBox)\n        })\n\n    }\n \n    return(\n        <div>\n            <form class=\"metadataForm\">\n                <b>Submit metadata:</b>\n                {renderArea ? (\n                    <div>\n                        <p>Area</p>\n                            <div class = \"checkbox\" >\n\n                            <p>Select all markers: </p>\n                                <input type = \"checkbox\" name=\"cbAreas\" onClick={()=>setAllMarkes(!allMarkers)}/>\n                        </div>\n                        {allMarkers ? (\n                        <div>\n                            <body>\n                                \n                            </body>\n                        </div>\n                         ):(\n                            <div>\n                                <div class=\"row\">\n                                <div class=\"col-1\">    \n                                    <p>Marker</p>\n                                    <input name=\"marker\"/>                \n                                </div>\n                                <div class=\"col-2\">    \n                                    <p>Main marker</p>\n                                    <input name=\"main_marker\"/>\n                                </div>\n                                </div>\n                            </div>\n                         )}\n                    </div>\n                   \n\n                ):(<></>)}\n\n\n          \n            </form>\n        </div>\n    \n        )\n   \n})\nexport default GetMetadata;\n//<div>{allMarkers && <p>Loading...</p>}</div>#setAllMarkes(!allMarkers);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}