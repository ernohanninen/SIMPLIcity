{"ast":null,"code":"import _defineProperty from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli-app/src/getMetadata.js\";\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { render, waitForElementToBeRemoved } from '@testing-library/react'; //import GetSettings from \"./getSettings.js\"\n//If no markers prevent user to go forward add new textbox\n//able user input non unique markers\n//adding custom markers doesn't work\n//Add random color generator for mask input\n//Using boolean it should be possible to check wether the input is filled before adding more mask metadata\n//If there is no marker the axios posts still sends data\n//Even if the area is unchecked the axios posts the data that is submitted on the main page (CHECK THAT THIS IS FIXED)\n//Check that the colors for cell_masking_metadata are okay\n\nvar GetMetadata = forwardRef(function (props, ref) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      renderArea = _useState2[0],\n      setRenderArea = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      renderMasking = _useState4[0],\n      setRenderMasking = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      allMarkers = _useState6[0],\n      setAllMarkes = _useState6[1];\n\n  var _useState7 = useState([{}]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      markersDict = _useState8[0],\n      setMarkersDict = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      counter = _useState10[0],\n      setCounter = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      markerKeyCounter = _useState12[0],\n      setMarkerKeyCounter = _useState12[1];\n\n  var markerTemp = {\n    marker: \"\",\n    mainMarker: \"\"\n  };\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      maskCounter = _useState14[0],\n      setMaskCounter = _useState14[1];\n\n  var _useState15 = useState(0),\n      _useState16 = _slicedToArray(_useState15, 2),\n      maskKeyCounter = _useState16[0],\n      setMaskKeyCounter = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      newMask = _useState18[0],\n      setNewMask = _useState18[1];\n\n  var maskTemp = {\n    cellType: \"\",\n    thresholdMarker: \"\",\n    thresholdValue: \"\",\n    color: \"\"\n  };\n  var inputFields = [];\n\n  var _useState19 = useState([]),\n      _useState20 = _slicedToArray(_useState19, 2),\n      originalMarkers = _useState20[0],\n      setOriginalMarkers = _useState20[1]; //This list keeps in track about the markers that the user inputted\n\n\n  var _useState21 = useState(\"\"),\n      _useState22 = _slicedToArray(_useState21, 2),\n      markerTextBox = _useState22[0],\n      setMarkerTextBox = _useState22[1];\n\n  var _useState23 = useState(\"\"),\n      _useState24 = _slicedToArray(_useState23, 2),\n      maskingTextBox = _useState24[0],\n      setMaskingTextBox = _useState24[1];\n\n  var _useState25 = useState([{}]),\n      _useState26 = _slicedToArray(_useState25, 2),\n      maskDict = _useState26[0],\n      setMaskDict = _useState26[1];\n\n  var _useState27 = useState(\"\"),\n      _useState28 = _slicedToArray(_useState27, 2),\n      errorMessageArea = _useState28[0],\n      setErrorMessageArea = _useState28[1];\n\n  useImperativeHandle(ref, function () {\n    return {\n      getProcesses: function getProcesses() {\n        console.log(\"AXIOS\");\n        axios.get(\"/submitSettings\").then(function (response) {\n          //setMarkersDict(response.data[1])\n          //setMarkers(response.data[2])\n          //a list of markers\n          //console.log(\"Render area \", renderArea)\n          //Parse values from response data to boolean format\n          for (var prop in response.data[0]) {\n            if (response.data[0].hasOwnProperty(prop)) {\n              response.data[0][prop] = response.data[0][prop] == 'true' || response.data[0][prop] == 'false' ? response.data[0][prop] === 'true' : response.data[0][prop];\n            }\n          } //Checkbox to Compute marker positive areas to all markers\n          //+ input fields to custom markers\n\n\n          if (response.data[0].execute_area == true) {\n            console.log(\"EXECUTE AREA\");\n            setRenderArea(true);\n            setMarkerTextBox(\"\");\n            var markers = response.data[1]; //dictionary of markers\n\n            allMarkersChecked(markers);\n            setOriginalMarkers(response.data[2]);\n          } else if (response.data[0].execute_area == false) setRenderArea(false);\n\n          if (response.data[0].execute_sd_segmentation == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_type_identification == true) {\n            setRenderMasking(true);\n            maskingInput();\n            console.log(\"RENDER SOMETHING\");\n          } else if (response.data[0].execute_cell_type_identification == false) {\n            setRenderMasking(false);\n            setMaskingTextBox(\"\");\n          }\n\n          if (response.data[0].execute_cell_clustering == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_thresholding == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_homotypic_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_heterotypic_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_permuted_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          } //console.log(skip_area)\n          //console.log(response.data.skip_area)\n\n        });\n      },\n      submitMetadata: function submitMetadata() {\n        console.log(\"SUBMIT METADATA\");\n        var url = '/submitMetadata';\n        axios.post(url, {\n          \"markers\": markersDict,\n          \"masks\": maskDict\n        }).then(function (response) {\n          if (response.data == \"error\") {\n            //If error\n            console.log(\"########ERROR########\");\n          } else {\n            //IF everyting okay\n            console.log(\"READY\");\n          }\n        });\n      }\n    };\n  });\n\n  var allMarkersChecked = function allMarkersChecked(markers) {\n    console.log(\"ORIGINAL MARKERS\", markers);\n    setMarkersDict(markers);\n    var count = -1; //let markers = originalMarkers //Using a temp list because the state variable doesn't update immediately \n\n    console.log(markers);\n    console.log(\"MARKERS LENGTH : \", Object.keys(markers).length);\n    setMarkerKeyCounter(Object.keys(markers).length);\n    setMarkerTextBox(Object.entries(markers).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          index = _ref2[1];\n\n      var obj = markers[key];\n      console.log(obj);\n      var marker = Object.keys(obj)[0];\n      console.log(marker); //if(marker in originalMarkers){//THis doesn't work because the marker is located in 0:{marker:mainMarker}\n\n      console.log(\"INCLUDES\");\n      count = count + 1;\n      setCounter(count);\n      console.log(count);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        id: count,\n        value: marker,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 28\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-1\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: \"marker\",\n        value: marker,\n        disabled: true,\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-2\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: \"mainMarker\",\n        value: marker,\n        disabled: true,\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-3\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return removeMarker(count);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 29\n        }\n      }, \"Remove\")));\n    }));\n  };\n\n  var addMarkers = function addMarkers(event) {\n    console.log(\"MARKER DICT : \", markersDict);\n    var count = counter + 1;\n    var id = \"marker\" + count;\n    console.log(id);\n    setMarkerTextBox([].concat(_toConsumableArray(markerTextBox), [/*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      id: id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: \"marker\",\n      onBlur: function onBlur(event) {\n        return handleChangeMarker(id, event, \"marker\");\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: \"mainMarker\",\n      onBlur: function onBlur(event) {\n        return handleChangeMarker(id, event, \"mainMarker\");\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: markerTextBox.length === 0,\n      onClick: function onClick() {\n        return removeMarker(id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }\n    }, \"Remove\")))]));\n    setCounter(count);\n  };\n\n  var removeMarker = function removeMarker(id) {\n    var key = document.getElementById(id).getAttribute(\"value\");\n    delete markersDict[key];\n    document.getElementById(id).remove();\n  };\n\n  var handleChangeMarker = function handleChangeMarker(id, event, input) {\n    setMarkerKeyCounter(markerKeyCounter + 1); //Update the counter\n    //Checks what is the input of the function and stores the input to a dictionary \n\n    if (input === \"marker\") {\n      validateMarker(event.target.value);\n      markerTemp = _objectSpread({}, markerTemp, {\n        marker: event.target.value\n      });\n    } else if (input === \"mainMarker\") {\n      markerTemp = _objectSpread({}, markerTemp, {\n        mainMarker: event.target.value\n      });\n    } //After the temp dictionary is filled store the properties to the main dictionary\n\n\n    if (Object.values(markerTemp).filter(function (x) {\n      return x === \"\";\n    }).length === 0) {\n      setMarkersDict(_objectSpread({}, markersDict, _defineProperty({}, markerKeyCounter, _defineProperty({}, markerTemp[\"marker\"], markerTemp[\"mainMarker\"]))));\n    }\n  };\n\n  function validateMarker(marker) {\n    var inputMarkers = [];\n    console.log(\"INPUMarker\", marker);\n    var regex = /^[a-zA-Z]+$/;\n    var inputError = false;\n\n    if (!marker.match(regex)) {\n      alert(\"Error in input\");\n    } else {\n      //Checks the logical operators the user inputted\n      if (marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")) {\n        inputMarkers = marker.split(/[&!|]+/); //Makes a list of the markers\n      } else {\n        //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n        inputMarkers.push(marker);\n      }\n\n      var _inputError = false; //Loop that checks the user inputted a marker that that the tiff-images have\n\n      for (var elem in inputMarkers) {\n        if (originalMarkers.includes(inputMarkers[elem])) {\n          _inputError = false;\n        } else {\n          _inputError = true;\n          break;\n        }\n      }\n    }\n\n    return inputError;\n  }\n  /*const handleChangeMarker = (id, event) => {\n      let inputMarkers = []\n       let inputString = event.target.value.replace(/\\s/g, \"\") //Removes the whitespaces\n      let marker = inputString\n      //Checks the logical operators the user inputted\n      if(marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")){\n          inputMarkers = marker.split(/[&!|]+/) //Makes a list of the markers\n      }\n      else{\n          //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n          inputMarkers.push(marker)\n      }\n      let inputError = false\n      //Loop that checks the user inputted a marker that that the tiff-images have\n      for(let elem in inputMarkers){\n          if(originalMarkers.includes(inputMarkers[elem])){\n              inputError = false\n          }\n          else{\n              inputError = true\n              break;\n          }\n      }\n       let dict = markersDict\n      console.log(inputError)\n      //If the tiff-images have the marker we can put it to the dictionary\n      if(inputError === false){\n          //setMarkersDict({...markersDict,[inputString]:\"\"})\n          console.log(\"SET MARKER TO DICT\")\n          console.log(\"MARKERSDICT\", markersDict)\n          let update = false\n          setMarkersDict(Object.entries(markersDict).map(([item]) => {\n              console.log(\"ITEM:\",item)\n              if(item == id){\n                  update = true\n                  console.log(\"UPDATE\")\n                  console.log(\"ERISUURI, \", inputString)\n                  console.log(markersDict)\n                  //return([...markersDict, id])\n                  return {...markersDict,[id]:{[inputString]:\"\"}}\n              }\n              \n          }))\n          if(update === false){\n              console.log(\"update is false, ID : \", id)\n              setMarkersDict({...markersDict,[id]:{[inputString]:\"\"}})\n          }\n          \n   \n          }\n      //If not, raising an error to the user\n      else if(inputError === true){\n          setErrorMessageArea(\"ERROR: input \" + inputString + \" couldn't be processed, please change the input\")\n          //alert(\"ERROR: input \" + inputString + \" couldn't be processed, please change the input format\")\n      }\n      }\n  */\n\n  /*const handleChangeMainMarker = (id,event) => {\n      console.log(\"MARKERSDICT\", markersDict)\n      console.log(\"Markers Dict type\", typeof(markersDict))\n      let mainMarker = event.target.value.replace(/\\s/g, \"\")\n      let key = document.getElementById(0-id).value\n      let inputError = handleMarkerInput(mainMarker)\n      //If the tiff-images have the marker we can put it to the dictionary\n      if(inputError === false){\n          console.log(\"SET MARKER TO DICT\")\n          console.log(\"MARKERSDICT\", markersDict)\n          let update = false\n          setMarkersDict(Object.entries(markersDict).map(([item]) => {\n              console.log(\"MAINMARKER ITEM \", item)\n              if(item != id){\n                  update = true\n                  console.log(\"UPDATE\")             \n              }\n              \n          }))\n          if(update === false){\n              console.log(\"update is false, ID : \", id)\n              setMarkersDict({...markersDict,[id]:{[key]:mainMarker}})\n          }        \n      }\n      //If not, raising an error to the user\n      else if(inputError === true){\n          setErrorMessageArea(\"ERROR: input \" + mainMarker + \" couldn't be processed, please change the input\")\n          //alert(\"ERROR: input \" + mainMarker + \" couldn't be processed, please change the input format\")\n      }   \n  }\n   function handleMarkerInput(marker){\n      let inputMarkers = []\n      console.log(\"INPUMarker\", marker)\n      console.log(\"MARKERSDICT\",markersDict)\n      //Checks the logical operators the user inputted\n      if(marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")){\n          inputMarkers = marker.split(/[&!|]+/) //Makes a list of the markers\n      }\n      else{\n          //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n          inputMarkers.push(marker)\n      }\n      let inputError = false\n      //Loop that checks the user inputted a marker that that the tiff-images have\n      for(let elem in inputMarkers){\n          if(originalMarkers.includes(inputMarkers[elem])){\n              inputError = false\n          }\n          else{\n              inputError = true\n              break;\n          }\n      }\n      return inputError\n  }*/\n\n\n  var maskingInput = function maskingInput() {\n    console.log(\"MASKING\");\n    var id = \"mask0\"; //If you go back to previous page, this code mess up\n\n    if (maskingTextBox === \"\") {\n      setMaskingTextBox(Object.entries(maskingTextBox + 1).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            key = _ref4[0],\n            index = _ref4[1];\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          class: \"row\",\n          id: id,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-1\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          name: \"mask0\",\n          onBlur: function onBlur(event) {\n            return handleChangeMask(id, event, \"cellType\");\n          },\n          size: \"10\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-2\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          name: \"mask0\",\n          onBlur: function onBlur(event) {\n            return handleChangeMask(id, event, \"thresholdMarker\");\n          },\n          size: \"10\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-3\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          name: \"mask0\",\n          onBlur: function onBlur(event) {\n            return handleChangeMask(id, event, \"thresholdValue\");\n          },\n          size: \"10\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-4\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"input\", {\n          name: \"mask0\",\n          onBlur: function onBlur(event) {\n            return handleChangeMask(id, event, \"color\");\n          },\n          size: \"10\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-5\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          onClick: function onClick() {\n            return removeMask(id, maskKeyCounter);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 29\n          }\n        }, \"Remove\")));\n      }));\n    }\n  };\n\n  var addMasks = function addMasks(event) {\n    console.log(newMask);\n\n    if (newMask === false) {\n      alert(\"Fill all the fields before adding new cell type\");\n    } else {\n      setNewMask(false); //This is a bit in a wrong place, the last row is never disabled\n      //Disables element after new one is added\n\n      if (Object.keys(maskDict).includes(maskCounter.toString())) {\n        var name = \"mask\" + maskCounter;\n        document.getElementsByName(name).forEach(function (e) {\n          e.disabled = true;\n        });\n      }\n\n      var count = maskCounter + 1;\n      var id = \"mask\" + count;\n      setMaskCounter(count);\n      setMaskingTextBox([].concat(_toConsumableArray(maskingTextBox), [/*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        id: id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-1\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: id,\n        onBlur: function onBlur(event) {\n          return handleChangeMask(id, event, \"cellType\");\n        },\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-2\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: id,\n        disabled: Object.keys(maskDict).includes(maskKeyCounter - 1),\n        onBlur: function onBlur(event) {\n          return handleChangeMask(id, event, \"thresholdMarker\");\n        },\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-3\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: id,\n        disabled: Object.keys(maskDict).includes(maskKeyCounter - 1),\n        onBlur: function onBlur(event) {\n          return handleChangeMask(id, event, \"thresholdValue\");\n        },\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-4\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: id,\n        disabled: Object.keys(maskDict).includes(maskKeyCounter - 1),\n        onBlur: function onBlur(event) {\n          return handleChangeMask(id, event, \"color\");\n        },\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-5\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return removeMask(id, maskKeyCounter);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 17\n        }\n      }, \"Remove\")))]));\n    }\n  };\n\n  var handleChangeMask = function handleChangeMask(id, event, input) {\n    console.log(\"MASK LENGTH : \", Object.values(maskTemp).filter(function (x) {\n      return x === \"\";\n    }).length);\n    setMaskKeyCounter(maskKeyCounter + 1); //console.log(\"MaskKeyCounter,\" , maskKeyCounter)\n    //Makes sure that all the fields are filled before adding new cell type\n\n    if (Object.values(maskTemp).filter(function (x) {\n      return x === \"\";\n    }).length === 1) {\n      //counts the number of empty values\n      setNewMask(true);\n    } //Checks what is the input of the function and stores the input to dictionary to right location\n\n\n    if (input === \"cellType\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        cellType: event.target.value\n      });\n    } else if (input === \"thresholdMarker\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        thresholdMarker: event.target.value\n      });\n    } else if (input === \"thresholdValue\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        thresholdValue: event.target.value\n      });\n    } else if (input === \"color\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        color: event.target.value\n      });\n    } //After the temp dictionary is filled store the properties to the main dictionary\n\n\n    if (Object.values(maskTemp).filter(function (x) {\n      return x === \"\";\n    }).length === 0) {\n      setMaskDict(_objectSpread({}, maskDict, _defineProperty({}, maskKeyCounter, [{\n        cell_type: maskTemp[\"cellType\"]\n      }, {\n        threshold_marker: maskTemp[\"thresholdMarker\"]\n      }, {\n        threshold_value: maskTemp[\"thresholdValue\"]\n      }, {\n        color: maskTemp[\"color\"]\n      }])));\n    }\n  }; //Removes the mask metadata input field and the corresponding property from the dictionary\n\n\n  var removeMask = function removeMask(id, dictKey) {\n    delete maskDict[dictKey];\n    document.getElementById(id).remove();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    class: \"metadataForm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 17\n    }\n  }, \"Submit metadata:\"), renderArea ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 25\n    }\n  }, \"Area\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 37\n    }\n  }, \"Marker\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 37\n    }\n  }, \"Main marker\"))), markerTextBox, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addMarkers,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 25\n    }\n  }, \"Add markers\"))) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 17\n    }\n  }), renderMasking ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 25\n    }\n  }, \"Masking\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 37\n    }\n  }, \"Cell type\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 37\n    }\n  }, \"Threshold marker\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 37\n    }\n  }, \"Threshold value\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 37\n    }\n  }, \"Color\"))), maskingTextBox, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addMasks,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 25\n    }\n  }, \"New cell type\"))) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n});\nexport default GetMetadata; //<div>{allMarkers && <p>Loading...</p>}</div>#setAllMarkes(!allMarkers);","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","axios","v4","uuidv4","render","waitForElementToBeRemoved","GetMetadata","props","ref","renderArea","setRenderArea","renderMasking","setRenderMasking","allMarkers","setAllMarkes","markersDict","setMarkersDict","counter","setCounter","markerKeyCounter","setMarkerKeyCounter","markerTemp","marker","mainMarker","maskCounter","setMaskCounter","maskKeyCounter","setMaskKeyCounter","newMask","setNewMask","maskTemp","cellType","thresholdMarker","thresholdValue","color","inputFields","originalMarkers","setOriginalMarkers","markerTextBox","setMarkerTextBox","maskingTextBox","setMaskingTextBox","maskDict","setMaskDict","errorMessageArea","setErrorMessageArea","getProcesses","console","log","get","then","response","prop","data","hasOwnProperty","execute_area","markers","allMarkersChecked","execute_sd_segmentation","execute_cell_type_identification","maskingInput","execute_cell_clustering","execute_cell_thresholding","execute_homotypic_interactions","execute_heterotypic_interactions","execute_permuted_interactions","submitMetadata","url","post","count","Object","keys","length","entries","map","key","index","obj","removeMarker","addMarkers","event","id","handleChangeMarker","document","getElementById","getAttribute","remove","input","validateMarker","target","value","values","filter","x","inputMarkers","regex","inputError","match","alert","includes","split","push","elem","handleChangeMask","removeMask","addMasks","toString","name","getElementsByName","forEach","e","disabled","cell_type","threshold_marker","threshold_value","dictKey"],"sources":["/home/ernohanninen/simpli-app/src/getMetadata.js"],"sourcesContent":["import React,  { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { render, waitForElementToBeRemoved } from '@testing-library/react';\n//import GetSettings from \"./getSettings.js\"\n\n\n\n//If no markers prevent user to go forward add new textbox\n//able user input non unique markers\n//adding custom markers doesn't work\n//Add random color generator for mask input\n//Using boolean it should be possible to check wether the input is filled before adding more mask metadata\n//If there is no marker the axios posts still sends data\n//Even if the area is unchecked the axios posts the data that is submitted on the main page (CHECK THAT THIS IS FIXED)\n\n//Check that the colors for cell_masking_metadata are okay\n\nconst GetMetadata = forwardRef((props, ref)=>{\n\n    const [renderArea, setRenderArea] = useState(false)\n    const [renderMasking, setRenderMasking] = useState(false)\n    const [allMarkers, setAllMarkes]  = useState(false)\n    const [markersDict, setMarkersDict] = useState([{}])\n    const [counter, setCounter] = useState(0)\n    const [markerKeyCounter, setMarkerKeyCounter] = useState(0)\n    let markerTemp = ({marker:\"\", mainMarker:\"\"})\n    const [maskCounter, setMaskCounter] = useState(0)\n    const [maskKeyCounter, setMaskKeyCounter] = useState(0)\n    const [newMask, setNewMask] = useState(false)\n    let maskTemp = ({cellType:\"\", thresholdMarker:\"\", thresholdValue:\"\", color:\"\"})\n    let inputFields = []\n\n\n    const [originalMarkers, setOriginalMarkers] = useState([]) //This list keeps in track about the markers that the user inputted\n    const [markerTextBox, setMarkerTextBox] = useState(\"\")\n    const [maskingTextBox, setMaskingTextBox] = useState(\"\")\n    const [maskDict, setMaskDict] = useState([{}])\n    const [errorMessageArea, setErrorMessageArea] = useState(\"\")\n\n    useImperativeHandle(ref, ()=>({\n        getProcesses(){\n            console.log(\"AXIOS\")\n            axios.get(\"/submitSettings\")\n            .then(function(response){\n\n                //setMarkersDict(response.data[1])\n                //setMarkers(response.data[2])\n                //a list of markers\n\n                \n                //console.log(\"Render area \", renderArea)\n                \n                //Parse values from response data to boolean format\n                for (let prop in response.data[0]) {\n                    if (response.data[0].hasOwnProperty(prop)) {\n                        response.data[0][prop] = (response.data[0][prop] == 'true' || response.data[0][prop] == 'false')? response.data[0][prop] === 'true': response.data[0][prop] ;\n                    }\n                } \n                //Checkbox to Compute marker positive areas to all markers\n                //+ input fields to custom markers\n                if(response.data[0].execute_area == true){\n                    console.log(\"EXECUTE AREA\")                   \n                    setRenderArea(true)\n                    setMarkerTextBox(\"\")\n                    let markers = response.data[1] //dictionary of markers\n                    allMarkersChecked(markers)\n                    setOriginalMarkers(response.data[2])\n                    \n                }\n                else if(response.data[0].execute_area == false)setRenderArea(false)\n                \n                if(response.data[0].execute_sd_segmentation == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_type_identification == true){\n                    setRenderMasking(true)\n                    maskingInput()\n                    console.log(\"RENDER SOMETHING\")\n                }\n                else if(response.data[0].execute_cell_type_identification == false){\n                    setRenderMasking(false)\n                    setMaskingTextBox(\"\")\n\n                }\n                if(response.data[0].execute_cell_clustering == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_thresholding == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_homotypic_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_heterotypic_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_permuted_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                \n                //console.log(skip_area)\n                //console.log(response.data.skip_area)\n            })\n        },\n        submitMetadata(){\n            console.log(\"SUBMIT METADATA\")\n\n            const url = '/submitMetadata';\n            axios.post(url, {\n                \"markers\": markersDict,\n                \"masks\": maskDict\n                })\n                .then((response) =>{\n                    if(response.data==\"error\"){ //If error\n                        console.log(\"########ERROR########\")\n                    }\n                    else{ //IF everyting okay\n                        console.log(\"READY\")\n                    }\n            });      \n        }\n    }))\n\n    const allMarkersChecked = (markers) => {    \n            console.log(\"ORIGINAL MARKERS\", markers)\n            setMarkersDict(markers)\n            let count = -1;\n\n            //let markers = originalMarkers //Using a temp list because the state variable doesn't update immediately \n            console.log(markers)\n            console.log(\"MARKERS LENGTH : \", Object.keys(markers).length)\n            setMarkerKeyCounter(Object.keys(markers).length) \n\n            setMarkerTextBox(Object.entries(markers).map(([key,index]) => {\n                let obj = markers[key]\n                console.log(obj)\n                let marker = Object.keys(obj)[0]\n                console.log(marker)\n                //if(marker in originalMarkers){//THis doesn't work because the marker is located in 0:{marker:mainMarker}\n                    console.log(\"INCLUDES\")\n                    count = count + 1\n                    setCounter(count)  \n\n                    console.log(count)\n                    return(<div class=\"row\" id={count} value={marker}>\n                        <div class=\"col-1\">    \n                            <input name=\"marker\" value={marker} disabled size=\"10\"/>                \n                        </div>\n                        <div class=\"col-2\">    \n                            <input name=\"mainMarker\" value={marker} disabled size=\"10\"/>                \n                        </div>\n                        <div class=\"col-3\">\n                            <button  onClick={() => removeMarker(count)}>Remove</button>                  \n                        </div>  \n                    </div>)        \n            }\n        ))             \n    }\n\n    const addMarkers = event =>{\n        console.log(\"MARKER DICT : \", markersDict)\n        let count = counter + 1\n        let id = \"marker\" + count\n        console.log(id)\n        setMarkerTextBox([...markerTextBox,\n        <div class=\"row\" id={id}>\n            <div class=\"col-1\">    \n                <input name=\"marker\"  onBlur={event => handleChangeMarker(id,event, \"marker\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-2\">    \n                <input name=\"mainMarker\" onBlur={event => handleChangeMarker(id,event, \"mainMarker\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-3\">\n                <button disabled={markerTextBox.length === 0} onClick={() => removeMarker(id)}>Remove</button>        \n            </div> \n\n        </div>\n        ])  \n        setCounter(count)       \n    }\n\n    \n    const removeMarker = (id) => {\n        let key = document.getElementById(id).getAttribute(\"value\")\n        delete markersDict[key]\n        document.getElementById(id).remove()\n    }\n\n    const handleChangeMarker = (id, event, input) => {\n        setMarkerKeyCounter(markerKeyCounter + 1) //Update the counter\n        //Checks what is the input of the function and stores the input to a dictionary \n        if(input===\"marker\"){\n            validateMarker(event.target.value)\n            markerTemp = {...markerTemp, marker:event.target.value}\n        }\n        else if(input === \"mainMarker\"){\n            markerTemp = {...markerTemp, mainMarker:event.target.value}\n        }\n\n        //After the temp dictionary is filled store the properties to the main dictionary\n        if(Object.values(markerTemp).filter(x => x === \"\").length === 0){\n            setMarkersDict({...markersDict,[markerKeyCounter]:{[markerTemp[\"marker\"]]:markerTemp[\"mainMarker\"]}})\n        }\n\n    }\n\n    function validateMarker(marker){\n        let inputMarkers = []\n        console.log(\"INPUMarker\", marker)\n        var regex = /^[a-zA-Z]+$/;\n        let inputError = false\n\n        if(!marker.match(regex)){\n            alert(\"Error in input\")\n        }\n        else{\n            //Checks the logical operators the user inputted\n            if(marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")){\n                inputMarkers = marker.split(/[&!|]+/) //Makes a list of the markers\n            }\n            else{\n                //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n                inputMarkers.push(marker)\n            }\n            let inputError = false\n            //Loop that checks the user inputted a marker that that the tiff-images have\n            for(let elem in inputMarkers){\n                if(originalMarkers.includes(inputMarkers[elem])){\n                    inputError = false\n                }\n                else{\n                    inputError = true\n                    break;\n                }\n            }\n        }\n        \n        return inputError\n    }\n\n\n    /*const handleChangeMarker = (id, event) => {\n        let inputMarkers = []\n\n        let inputString = event.target.value.replace(/\\s/g, \"\") //Removes the whitespaces\n        let marker = inputString\n        //Checks the logical operators the user inputted\n        if(marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")){\n            inputMarkers = marker.split(/[&!|]+/) //Makes a list of the markers\n        }\n        else{\n            //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n            inputMarkers.push(marker)\n        }\n        let inputError = false\n        //Loop that checks the user inputted a marker that that the tiff-images have\n        for(let elem in inputMarkers){\n            if(originalMarkers.includes(inputMarkers[elem])){\n                inputError = false\n            }\n            else{\n                inputError = true\n                break;\n            }\n        }\n\n        let dict = markersDict\n        console.log(inputError)\n        //If the tiff-images have the marker we can put it to the dictionary\n        if(inputError === false){\n            //setMarkersDict({...markersDict,[inputString]:\"\"})\n            console.log(\"SET MARKER TO DICT\")\n            console.log(\"MARKERSDICT\", markersDict)\n            let update = false\n            setMarkersDict(Object.entries(markersDict).map(([item]) => {\n                console.log(\"ITEM:\",item)\n                if(item == id){\n                    update = true\n                    console.log(\"UPDATE\")\n                    console.log(\"ERISUURI, \", inputString)\n                    console.log(markersDict)\n                    //return([...markersDict, id])\n                    return {...markersDict,[id]:{[inputString]:\"\"}}\n                }\n                \n            }))\n            if(update === false){\n                console.log(\"update is false, ID : \", id)\n                setMarkersDict({...markersDict,[id]:{[inputString]:\"\"}})\n            }\n            \n     \n            }\n        //If not, raising an error to the user\n        else if(inputError === true){\n            setErrorMessageArea(\"ERROR: input \" + inputString + \" couldn't be processed, please change the input\")\n            //alert(\"ERROR: input \" + inputString + \" couldn't be processed, please change the input format\")\n        }\n \n      }\n*/\n    /*const handleChangeMainMarker = (id,event) => {\n        console.log(\"MARKERSDICT\", markersDict)\n        console.log(\"Markers Dict type\", typeof(markersDict))\n        let mainMarker = event.target.value.replace(/\\s/g, \"\")\n        let key = document.getElementById(0-id).value\n        let inputError = handleMarkerInput(mainMarker)\n        //If the tiff-images have the marker we can put it to the dictionary\n        if(inputError === false){\n            console.log(\"SET MARKER TO DICT\")\n            console.log(\"MARKERSDICT\", markersDict)\n            let update = false\n            setMarkersDict(Object.entries(markersDict).map(([item]) => {\n                console.log(\"MAINMARKER ITEM \", item)\n                if(item != id){\n                    update = true\n                    console.log(\"UPDATE\")             \n                }\n                \n            }))\n            if(update === false){\n                console.log(\"update is false, ID : \", id)\n                setMarkersDict({...markersDict,[id]:{[key]:mainMarker}})\n            }        \n        }\n        //If not, raising an error to the user\n        else if(inputError === true){\n            setErrorMessageArea(\"ERROR: input \" + mainMarker + \" couldn't be processed, please change the input\")\n            //alert(\"ERROR: input \" + mainMarker + \" couldn't be processed, please change the input format\")\n        }   \n    }\n\n    function handleMarkerInput(marker){\n        let inputMarkers = []\n        console.log(\"INPUMarker\", marker)\n        console.log(\"MARKERSDICT\",markersDict)\n        //Checks the logical operators the user inputted\n        if(marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")){\n            inputMarkers = marker.split(/[&!|]+/) //Makes a list of the markers\n        }\n        else{\n            //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n            inputMarkers.push(marker)\n        }\n        let inputError = false\n        //Loop that checks the user inputted a marker that that the tiff-images have\n        for(let elem in inputMarkers){\n            if(originalMarkers.includes(inputMarkers[elem])){\n                inputError = false\n            }\n            else{\n                inputError = true\n                break;\n            }\n        }\n        return inputError\n    }*/\n\n    const maskingInput = () => {    \n        console.log(\"MASKING\")\n        let id = \"mask0\" \n        //If you go back to previous page, this code mess up\n        if(maskingTextBox === \"\"){\n            setMaskingTextBox(Object.entries(maskingTextBox+1).map(([key,index]) => {\n            \n                return(\n                    <div class=\"row\" id={id}>\n                        <div class=\"col-1\">    \n                            <input name = \"mask0\" onBlur={event => handleChangeMask(id,event, \"cellType\")}  size=\"10\"/>                \n                        </div>\n                        <div class=\"col-2\">    \n                            <input name = \"mask0\" onBlur={event => handleChangeMask(id,event, \"thresholdMarker\")} size=\"10\"/>                \n                        </div>\n                        <div class=\"col-3\">    \n                            <input name = \"mask0\"  onBlur={event => handleChangeMask(id,event, \"thresholdValue\")} size=\"10\"/>                \n                        </div>\n                        <div class=\"col-4\">    \n                            <input name = \"mask0\"  onBlur={event => handleChangeMask(id,event, \"color\")}  size=\"10\"/>                \n                        </div>\n                        <div class=\"col-5\">\n                            <button onClick={() => removeMask(id, maskKeyCounter)}>Remove</button>        \n                        </div> \n                    </div>)\n               \n            }))\n        }\n        \n    }\n\n    const addMasks = event =>{\n\n        console.log(newMask)\n        if(newMask === false){\n            alert(\"Fill all the fields before adding new cell type\")\n\n        }\n        else{\n        setNewMask(false)\n\n        //This is a bit in a wrong place, the last row is never disabled\n        //Disables element after new one is added\n        if(Object.keys(maskDict).includes(maskCounter.toString())){\n            let name = \"mask\" + maskCounter\n            document.getElementsByName(name).forEach(e => {\n                e.disabled = true\n            })        \n        }\n        let count = maskCounter + 1\n        let id = \"mask\" + count\n        setMaskCounter(count)\n        \n        setMaskingTextBox([...maskingTextBox,\n        <div class=\"row\" id={id} >\n            <div class=\"col-1\">    \n                <input name={id}  onBlur={event => handleChangeMask(id,event, \"cellType\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-2\">    \n                <input name={id} disabled={Object.keys(maskDict).includes(maskKeyCounter-1)} onBlur={event => handleChangeMask(id,event, \"thresholdMarker\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-3\">    \n                <input name={id} disabled={Object.keys(maskDict).includes(maskKeyCounter-1)} onBlur={event => handleChangeMask(id,event, \"thresholdValue\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-4\">    \n                <input name={id} disabled={Object.keys(maskDict).includes(maskKeyCounter-1)} onBlur={event => handleChangeMask(id,event, \"color\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-5\">\n                <button onClick={() => removeMask(id, maskKeyCounter)}>Remove</button>        \n            </div> \n\n        </div>\n        ])  \n        }\n        \n    }\n\n    const handleChangeMask = (id,event, input) => {\n        console.log(\"MASK LENGTH : \", Object.values(maskTemp).filter(x => x === \"\").length)\n        setMaskKeyCounter(maskKeyCounter + 1) \n        //console.log(\"MaskKeyCounter,\" , maskKeyCounter)\n        //Makes sure that all the fields are filled before adding new cell type\n        if(Object.values(maskTemp).filter(x => x === \"\").length === 1){//counts the number of empty values\n            setNewMask(true)\n        }\n        //Checks what is the input of the function and stores the input to dictionary to right location\n        if(input === \"cellType\"){\n            maskTemp = {...maskTemp, cellType:event.target.value}  \n        }\n        else if(input === \"thresholdMarker\"){\n            maskTemp = {...maskTemp, thresholdMarker:event.target.value}\n        }\n        else if(input === \"thresholdValue\"){\n            maskTemp ={...maskTemp, thresholdValue:event.target.value} \n        }\n        else if(input === \"color\"){\n            maskTemp ={...maskTemp, color:event.target.value}\n        }\n        //After the temp dictionary is filled store the properties to the main dictionary\n        if(Object.values(maskTemp).filter(x => x === \"\").length === 0){\n            setMaskDict({...maskDict,[maskKeyCounter]:[{cell_type:maskTemp[\"cellType\"]},{ threshold_marker:maskTemp[\"thresholdMarker\"]}, {threshold_value:maskTemp[\"thresholdValue\"]}, {color:maskTemp[\"color\"]}]})     \n        }    \n    }\n\n \n\n    //Removes the mask metadata input field and the corresponding property from the dictionary\n    const removeMask = (id,dictKey) => {\n        delete maskDict[dictKey]\n        document.getElementById(id).remove()\n    }\n\n    return(\n        <div>\n            <form class=\"metadataForm\">\n                <b>Submit metadata:</b>\n                {renderArea ? (\n                    <div>\n                    <React.Fragment> \n                        <p>Area</p>\n                        <div class=\"row\">\n                                <div class=\"col-1\">    \n                                    <p>Marker</p>\n                                </div>\n                                <div class=\"col-2\">    \n                                    <p>Main marker</p>\n                            </div>\n                        </div>\n                        {markerTextBox}\n                        <button type=\"button\" onClick={addMarkers}>Add markers</button>\n\n                    </React.Fragment>\n                    </div>                  \n                ):(<></>)} \n                <br></br>\n                {renderMasking ? (\n                    <div>\n                    <React.Fragment> \n                        <p>Masking</p>\n                        <div class=\"row\">\n                                <div class=\"col-1\">    \n                                    <p>Cell type</p>\n                                </div>\n                                <div class=\"col-2\">    \n                                    <p>Threshold marker</p>\n                                </div>\n                                <div class=\"col-3\">    \n                                    <p>Threshold value</p>\n                                </div>\n                                <div class=\"col-4\">    \n                                    <p>Color</p>\n                                </div>             \n                            </div>\n                        {maskingTextBox}\n                        <button type=\"button\" onClick={addMasks}>New cell type</button>\n                    </React.Fragment>\n                    </div>                  \n                ):(<></>)}     \n                 \n            </form>\n        </div>\n        ) \n})\nexport default GetMetadata;\n//<div>{allMarkers && <p>Loading...</p>}</div>#setAllMarkes(!allMarkers);\n"],"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAII;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAGI,IAAMpC,YAAY,GAAG,SAAfA,YAAe,GAAM;IACvBb,OAAO,CAACC,GAAR,CAAY,SAAZ;IACA,IAAIiC,EAAE,GAAG,OAAT,CAFuB,CAGvB;;IACA,IAAGzC,cAAc,KAAK,EAAtB,EAAyB;MACrBC,iBAAiB,CAAC6B,MAAM,CAACG,OAAP,CAAejC,cAAc,GAAC,CAA9B,EAAiCkC,GAAjC,CAAqC,iBAAiB;QAAA;QAAA,IAAfC,GAAe;QAAA,IAAXC,KAAW;;QAEpE,oBACI;UAAK,KAAK,EAAC,KAAX;UAAiB,EAAE,EAAEK,EAArB;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,gBACI;UAAK,KAAK,EAAC,OAAX;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,gBACI;UAAO,IAAI,EAAG,OAAd;UAAsB,MAAM,EAAE,gBAAAD,KAAK;YAAA,OAAIuB,gBAAgB,CAACtB,EAAD,EAAID,KAAJ,EAAW,UAAX,CAApB;UAAA,CAAnC;UAAgF,IAAI,EAAC,IAArF;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EADJ,CADJ,eAII;UAAK,KAAK,EAAC,OAAX;UAAA;UAAA;YAAA;YAAA;YAAA;U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"},"metadata":{},"sourceType":"module"}