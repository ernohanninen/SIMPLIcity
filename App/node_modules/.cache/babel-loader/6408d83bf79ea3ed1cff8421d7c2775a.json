{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli-app/src/getMetadata.js\";\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport GetSettings from \"./getSettings.js\";\nvar GetMetadata = forwardRef(function (props, ref, data) {\n  useImperativeHandle(ref, function () {\n    return {\n      getProcesses: function getProcesses() {\n        axios.get(\"/submitSettings\").then(function (response) {\n          console.log(response);\n          console.log(response.data[0]);\n          console.log(response.data[1]); //Parse values from response data to boolean format\n\n          for (var prop in response.data[0]) {\n            if (response.data[0].hasOwnProperty(prop)) {\n              response.data[0][prop] = response.data[0][prop] == 'true' || response.data[0][prop] == 'false' ? response.data[0][prop] === 'true' : response.data[0][prop];\n            }\n          } //Checkbox to Compute marker positive areas to all markers\n          //+ input fields to custom markers\n\n\n          if (response.data[0].execute_area == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_sd_segmentation == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_type_identification == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_clustering == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_thresholding == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_homotypic_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_heterotypic_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_permuted_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          } //console.log(skip_area)\n          //console.log(response.data.skip_area)\n\n        });\n      },\n      submitMetadata: function submitMetadata() {\n        console.log(\"metadata\");\n        console.log(\"getMETADATA\");\n      }\n    };\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GetSettings, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }), \"if()\");\n});\nexport default GetMetadata;","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","axios","GetSettings","GetMetadata","props","ref","data","getProcesses","get","then","response","console","log","prop","hasOwnProperty","execute_area","execute_sd_segmentation","execute_cell_type_identification","execute_cell_clustering","execute_cell_thresholding","execute_homotypic_interactions","execute_heterotypic_interactions","execute_permuted_interactions","submitMetadata"],"sources":["/home/ernohanninen/simpli-app/src/getMetadata.js"],"sourcesContent":["import React,  { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport GetSettings from \"./getSettings.js\"\n\n\nconst GetMetadata = forwardRef((props, ref, data)=>{\n\n    useImperativeHandle(ref, ()=>({\n        getProcesses(){\n            axios.get(\"/submitSettings\")\n            .then(function(response){\n                console.log(response)\n                console.log(response.data[0])\n                console.log(response.data[1])\n\n                //Parse values from response data to boolean format\n                for (let prop in response.data[0]) {\n                    if (response.data[0].hasOwnProperty(prop)) {\n                        response.data[0][prop] = (response.data[0][prop] == 'true' || response.data[0][prop] == 'false')? response.data[0][prop] === 'true': response.data[0][prop] ;\n                    }\n                } \n                //Checkbox to Compute marker positive areas to all markers\n                //+ input fields to custom markers\n                if(response.data[0].execute_area == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_sd_segmentation == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_type_identification == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_clustering == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_thresholding == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_homotypic_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_heterotypic_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_permuted_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                \n                //console.log(skip_area)\n                //console.log(response.data.skip_area)\n            })\n        },\n        submitMetadata(){\n\n            console.log(\"metadata\")\n            \n\n            console.log(\"getMETADATA\")\n        }\n    }))\n \n    return(\n        <div>\n            <GetSettings />\n            if()\n    \n        </div>\n    \n        )\n   \n})\nexport default GetMetadata;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}