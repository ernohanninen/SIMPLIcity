{"ast":null,"code":"import _defineProperty from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli-app/src/getMetadata.js\";\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { render, waitForElementToBeRemoved } from '@testing-library/react'; //import GetSettings from \"./getSettings.js\"\n//If no markers prevent user to go forward add new textbox\n//able user input non unique markers\n//adding custom markers doesn't work\n//Add random color generator for mask input\n//Using boolean it should be possible to check wether the input is filled before adding more mask metadata\n\nvar GetMetadata = forwardRef(function (props, ref) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      renderArea = _useState2[0],\n      setRenderArea = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      renderMasking = _useState4[0],\n      setRenderMasking = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      allMarkers = _useState6[0],\n      setAllMarkes = _useState6[1]; // const [inputFields, setInputFields] = useState([]);\n\n\n  var _useState7 = useState([{}]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      markersDict = _useState8[0],\n      setMarkersDict = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      counter = _useState10[0],\n      setCounter = _useState10[1];\n\n  var _useState11 = useState(0),\n      _useState12 = _slicedToArray(_useState11, 2),\n      maskCounter = _useState12[0],\n      setMaskCounter = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      maskKeyCounter = _useState14[0],\n      setMaskKeyCounter = _useState14[1];\n\n  var maskTemp = {\n    cellType: \"\",\n    thresholdMarker: \"\",\n    thresholdValue: \"\",\n    color: \"\"\n  };\n  var inputFields = [];\n\n  var _useState15 = useState([]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      originalMarkers = _useState16[0],\n      setOriginalMarkers = _useState16[1]; //This list keeps in track about the markers that the user inputted\n\n\n  var _useState17 = useState(\"\"),\n      _useState18 = _slicedToArray(_useState17, 2),\n      markerTextBox = _useState18[0],\n      setMarkerTextBox = _useState18[1];\n\n  var _useState19 = useState(\"\"),\n      _useState20 = _slicedToArray(_useState19, 2),\n      maskingTextBox = _useState20[0],\n      setMaskingTextBox = _useState20[1];\n\n  var _useState21 = useState([{}]),\n      _useState22 = _slicedToArray(_useState21, 2),\n      maskDict = _useState22[0],\n      setMaskDict = _useState22[1];\n\n  var _useState23 = useState(\"\"),\n      _useState24 = _slicedToArray(_useState23, 2),\n      errorMessageArea = _useState24[0],\n      setErrorMessageArea = _useState24[1];\n\n  useImperativeHandle(ref, function () {\n    return {\n      getProcesses: function getProcesses() {\n        console.log(\"AXIOS\");\n        axios.get(\"/submitSettings\").then(function (response) {\n          //setMarkersDict(response.data[1])\n          //setMarkers(response.data[2])\n          console.log(response.data[1]);\n          setMarkerTextBox(\"\");\n          var markers = response.data[1]; //dictionary of markers\n\n          console.log(markers);\n          allMarkersChecked(markers);\n          setOriginalMarkers(response.data[2]); //a list of markers\n          //console.log(\"Render area \", renderArea)\n          //Parse values from response data to boolean format\n\n          for (var prop in response.data[0]) {\n            if (response.data[0].hasOwnProperty(prop)) {\n              response.data[0][prop] = response.data[0][prop] == 'true' || response.data[0][prop] == 'false' ? response.data[0][prop] === 'true' : response.data[0][prop];\n            }\n          } //Checkbox to Compute marker positive areas to all markers\n          //+ input fields to custom markers\n\n\n          if (response.data[0].execute_area == true) {\n            setRenderArea(true);\n          } else if (response.data[0].execute_area == false) setRenderArea(false);\n\n          if (response.data[0].execute_sd_segmentation == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_type_identification == true) {\n            setRenderMasking(true);\n            maskingInput();\n            console.log(\"RENDER SOMETHING\");\n          } else if (response.data[0].execute_cell_type_identification == false) setRenderArea(false);\n\n          if (response.data[0].execute_cell_clustering == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_thresholding == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_homotypic_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_heterotypic_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_permuted_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          } //console.log(skip_area)\n          //console.log(response.data.skip_area)\n\n        });\n      },\n      submitMetadata: function submitMetadata() {\n        console.log(\"SUBMIT METADATA\");\n        /*var areaFormData = new FormData();       \n        for (const [key, value] of Object.entries(markersDict)) {\n            console.log(key);\n            console.log(value)\n            areaFormData.append(\"markerAreas\",key, value)\n        }\n        console.log(areaFormData)*/\n\n        var url = '/submitMetadata';\n        axios.post(url, markersDict).then(function (response) {\n          if (response.data == \"error\") {\n            //If error\n            console.log(\"########ERROR########\");\n          } else {\n            //IF everyting okay\n            console.log(\"READY\");\n          }\n        });\n      }\n    };\n  });\n\n  var allMarkersChecked = function allMarkersChecked(markers) {\n    console.log(\"ORIGINAL MARKERS\", markers);\n    setMarkersDict(markers);\n    var count = -1; //let markers = originalMarkers //Using a temp list because the state variable doesn't update immediately \n\n    console.log(markers);\n    setMarkerTextBox(Object.entries(markers).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          index = _ref2[1];\n\n      var obj = markers[key];\n      console.log(obj);\n      var marker = Object.keys(obj)[0];\n      console.log(marker); //if(marker in originalMarkers){//THis doesn't work because the marker is located in 0:{marker:mainMarker}\n\n      console.log(\"INCLUDES\");\n      count = count + 1;\n      setCounter(count);\n      console.log(count);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        id: count,\n        value: marker,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 28\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-1\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: \"marker\",\n        value: marker,\n        disabled: true,\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-2\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: \"mainMarker\",\n        value: marker,\n        disabled: true,\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-3\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return removeMarker(count);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 29\n        }\n      }, \"Remove\")));\n    }));\n  };\n\n  var addMarkers = function addMarkers(event) {\n    var count = counter + 1;\n    console.log(count);\n    setMarkerTextBox([].concat(_toConsumableArray(markerTextBox), [/*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      id: count,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: \"marker\",\n      id: 0 - count,\n      onBlur: function onBlur(event) {\n        return handleChangeMarker(count, event);\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: \"mainMarker\",\n      onBlur: function onBlur(event) {\n        return handleChangeMainMarker(count, event);\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: markerTextBox.length === 0,\n      onClick: function onClick() {\n        return removeMarker(count);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }\n    }, \"Remove\")))]));\n    setCounter(count);\n  };\n\n  var removeMarker = function removeMarker(id) {\n    var key = document.getElementById(id).getAttribute(\"value\");\n    delete markersDict[key];\n    document.getElementById(id).remove();\n    console.log(markersDict);\n  };\n\n  var handleChangeMarker = function handleChangeMarker(id, event) {\n    var inputMarkers = [];\n    var inputString = event.target.value.replace(/\\s/g, \"\"); //Removes the whitespaces\n\n    var marker = inputString; //Checks the logical operators the user inputted\n\n    if (marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")) {\n      inputMarkers = marker.split(/[&!|]+/); //Makes a list of the markers\n    } else {\n      //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n      inputMarkers.push(marker);\n    }\n\n    var inputError = false; //Loop that checks the user inputted a marker that that the tiff-images have\n\n    for (var elem in inputMarkers) {\n      if (originalMarkers.includes(inputMarkers[elem])) {\n        inputError = false;\n      } else {\n        inputError = true;\n        break;\n      }\n    }\n\n    var dict = markersDict;\n    console.log(inputError); //If the tiff-images have the marker we can put it to the dictionary\n\n    if (inputError === false) {\n      //setMarkersDict({...markersDict,[inputString]:\"\"})\n      console.log(\"SET MARKER TO DICT\");\n      console.log(\"MARKERSDICT\", markersDict);\n      var update = false;\n      setMarkersDict(Object.entries(markersDict).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n            item = _ref4[0];\n\n        console.log(\"ITEM:\", item);\n\n        if (item == id) {\n          update = true;\n          console.log(\"UPDATE\");\n          console.log(\"ERISUURI, \", inputString);\n          console.log(markersDict); //return([...markersDict, id])\n\n          return _objectSpread({}, markersDict, _defineProperty({}, id, _defineProperty({}, inputString, \"\"))); //setInputFields([...inputFields, { id: uuidv4(),  tiff: '', marker: '' }])\n        }\n      }));\n\n      if (update === false) {\n        console.log(\"update is false, ID : \", id);\n        setMarkersDict(_objectSpread({}, markersDict, _defineProperty({}, id, _defineProperty({}, inputString, \"\"))));\n      }\n      /*setMarkersDict(markersDict.map(function(item, i){\n          console.log(item)\n          return{...markersDict,inputString}\n      })*/\n\n    } //If not, raising an error to the user\n    else if (inputError === true) {\n      setErrorMessageArea(\"ERROR: input \" + inputString + \" couldn't be processed, please change the input\"); //alert(\"ERROR: input \" + inputString + \" couldn't be processed, please change the input format\")\n    }\n  };\n\n  var handleChangeMainMarker = function handleChangeMainMarker(id, event) {\n    console.log(\"MARKERSDICT\", markersDict);\n    console.log(\"Markers Dict type\", typeof markersDict);\n    var mainMarker = event.target.value.replace(/\\s/g, \"\");\n    var key = document.getElementById(0 - id).value;\n    var inputError = handleMarkerInput(mainMarker); //If the tiff-images have the marker we can put it to the dictionary\n\n    if (inputError === false) {\n      console.log(\"SET MARKER TO DICT\");\n      console.log(\"MARKERSDICT\", markersDict);\n      var update = false;\n      setMarkersDict(Object.entries(markersDict).map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 1),\n            item = _ref6[0];\n\n        console.log(\"MAINMARKER ITEM \", item);\n\n        if (item != id) {\n          update = true;\n          console.log(\"UPDATE\");\n        }\n      }));\n\n      if (update === false) {\n        console.log(\"update is false, ID : \", id);\n        setMarkersDict(_objectSpread({}, markersDict, _defineProperty({}, id, _defineProperty({}, key, mainMarker))));\n      }\n    } //If not, raising an error to the user\n    else if (inputError === true) {\n      setErrorMessageArea(\"ERROR: input \" + mainMarker + \" couldn't be processed, please change the input\"); //alert(\"ERROR: input \" + mainMarker + \" couldn't be processed, please change the input format\")\n    }\n  };\n\n  function handleMarkerInput(marker) {\n    var inputMarkers = [];\n    console.log(\"INPUMarker\", marker);\n    console.log(\"MARKERSDICT\", markersDict); //Checks the logical operators the user inputted\n\n    if (marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")) {\n      inputMarkers = marker.split(/[&!|]+/); //Makes a list of the markers\n    } else {\n      //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n      inputMarkers.push(marker);\n    }\n\n    var inputError = false; //Loop that checks the user inputted a marker that that the tiff-images have\n\n    for (var elem in inputMarkers) {\n      if (originalMarkers.includes(inputMarkers[elem])) {\n        inputError = false;\n      } else {\n        inputError = true;\n        break;\n      }\n    }\n\n    return inputError;\n  }\n\n  var maskingInput = function maskingInput() {\n    console.log(\"MASKING\");\n    var id = \"mask0\";\n    setMaskingTextBox(Object.entries(maskingTextBox + 1).map(function (_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 2),\n          key = _ref8[0],\n          index = _ref8[1];\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-1\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: \"mask0\",\n        id: \"mask0\",\n        onBlur: function onBlur(event) {\n          return handleChangeMask(id, event, \"cellType\");\n        },\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-2\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: \"mask0\",\n        onBlur: function onBlur(event) {\n          return handleChangeMask(id, event, \"thresholdMarker\");\n        },\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-3\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: \"mask0\",\n        onBlur: function onBlur(event) {\n          return handleChangeMask(id, event, \"thresholdValue\");\n        },\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-4\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: \"mask0\",\n        onBlur: function onBlur(event) {\n          return handleChangeMask(id, event, \"color\");\n        },\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 25\n        }\n      })));\n    }));\n  };\n\n  var addMasks = function addMasks(event) {\n    console.log(maskingTextBox); //make this dynamic solution\n\n    console.log(maskCounter);\n    console.log(Object.keys(maskDict));\n\n    if (Object.keys(maskDict).includes(parseInt(maskCounter))) {\n      console.log(\"DISABLE\");\n      document.getElementsByName(\"mask0\").forEach(function (e) {\n        e.disabled = true;\n      });\n    }\n\n    var count = maskCounter + 1;\n    var id = \"mask\" + count;\n    setMaskCounter(count);\n    setMaskingTextBox([].concat(_toConsumableArray(maskingTextBox), [/*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      id: id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: id,\n      onBlur: function onBlur(event) {\n        return handleChangeMask(id, event, \"cellType\");\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: id,\n      disabled: Object.keys(maskDict).includes(maskKeyCounter - 1),\n      onBlur: function onBlur(event) {\n        return handleChangeMask(id, event, \"thresholdMarker\");\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: id,\n      disabled: Object.keys(maskDict).includes(maskKeyCounter - 1),\n      onBlur: function onBlur(event) {\n        return handleChangeMask(id, event, \"thresholdValue\");\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-4\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: id,\n      disabled: Object.keys(maskDict).includes(maskKeyCounter - 1),\n      onBlur: function onBlur(event) {\n        return handleChangeMask(id, event, \"color\");\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-5\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: function onClick() {\n        return removeMask(id, maskKeyCounter);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 17\n      }\n    }, \"Remove\")))]));\n  };\n\n  var handleChangeMask = function handleChangeMask(id, event, input) {\n    //const [maskKeyCounter, setMaskKeyCounter] = useState(0)\n    //const [maskTemp, setMaskTemp] = useState({cellType:\"\", thresholdMarker:\"\", thresholdValue:\"\", color:\"\"})\n    //Object.keys(maskDict).length,\n    //console.log(\"MASKS:\", maskDict)\n    setMaskKeyCounter(maskKeyCounter + 1);\n\n    if (input === \"cellType\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        cellType: event.target.value\n      });\n    } else if (input === \"thresholdMarker\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        thresholdMarker: event.target.value\n      });\n    } else if (input === \"thresholdValue\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        thresholdValue: event.target.value\n      });\n    } else if (input === \"color\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        color: event.target.value\n      });\n    }\n\n    if (Object.values(maskTemp).filter(function (x) {\n      return x === \"\";\n    }).length === 0) {\n      setMaskDict(_objectSpread({}, maskDict, _defineProperty({}, maskKeyCounter, [{\n        cell_type: maskTemp[\"cellType\"]\n      }, {\n        threshold_marker: maskTemp[\"thresholdMarker\"]\n      }, {\n        threshold_value: maskTemp[\"thresholdValue\"]\n      }, {\n        color: maskTemp[\"color\"]\n      }])));\n    } //if(cell_type === true)\n\n  };\n\n  var removeMask = function removeMask(id, dictKey) {\n    delete maskDict[dictKey];\n    document.getElementById(id).remove();\n    console.log(maskDict);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    class: \"metadataForm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 17\n    }\n  }, \"Submit metadata:\"), renderArea ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 25\n    }\n  }, \"Area\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 37\n    }\n  }, \"Marker\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 37\n    }\n  }, \"Main marker\"))), markerTextBox, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addMarkers,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 25\n    }\n  }, \"Add markers\"))) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 17\n    }\n  }), renderMasking ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 25\n    }\n  }, \"Masking\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 37\n    }\n  }, \"Cell type\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 37\n    }\n  }, \"Threshold marker\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 37\n    }\n  }, \"Threshold value\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 37\n    }\n  }, \"Color\"))), maskingTextBox, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addMasks,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 25\n    }\n  }, \"Add more samples\"))) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n});\nexport default GetMetadata; //<div>{allMarkers && <p>Loading...</p>}</div>#setAllMarkes(!allMarkers);","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","axios","v4","uuidv4","render","waitForElementToBeRemoved","GetMetadata","props","ref","renderArea","setRenderArea","renderMasking","setRenderMasking","allMarkers","setAllMarkes","markersDict","setMarkersDict","counter","setCounter","maskCounter","setMaskCounter","maskKeyCounter","setMaskKeyCounter","maskTemp","cellType","thresholdMarker","thresholdValue","color","inputFields","originalMarkers","setOriginalMarkers","markerTextBox","setMarkerTextBox","maskingTextBox","setMaskingTextBox","maskDict","setMaskDict","errorMessageArea","setErrorMessageArea","getProcesses","console","log","get","then","response","data","markers","allMarkersChecked","prop","hasOwnProperty","execute_area","execute_sd_segmentation","execute_cell_type_identification","maskingInput","execute_cell_clustering","execute_cell_thresholding","execute_homotypic_interactions","execute_heterotypic_interactions","execute_permuted_interactions","submitMetadata","url","post","count","Object","entries","map","key","index","obj","marker","keys","removeMarker","addMarkers","event","handleChangeMarker","handleChangeMainMarker","length","id","document","getElementById","getAttribute","remove","inputMarkers","inputString","target","value","replace","includes","split","push","inputError","elem","dict","update","item","mainMarker","handleMarkerInput","handleChangeMask","addMasks","parseInt","getElementsByName","forEach","e","disabled","removeMask","input","values","filter","x","cell_type","threshold_marker","threshold_value","dictKey"],"sources":["/home/ernohanninen/simpli-app/src/getMetadata.js"],"sourcesContent":["import React,  { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { render, waitForElementToBeRemoved } from '@testing-library/react';\n//import GetSettings from \"./getSettings.js\"\n\n\n\n//If no markers prevent user to go forward add new textbox\n//able user input non unique markers\n//adding custom markers doesn't work\n//Add random color generator for mask input\n//Using boolean it should be possible to check wether the input is filled before adding more mask metadata\n\nconst GetMetadata = forwardRef((props, ref)=>{\n\n    const [renderArea, setRenderArea] = useState(false)\n    const [renderMasking, setRenderMasking] = useState(false)\n    const [allMarkers, setAllMarkes]  = useState(false)\n   // const [inputFields, setInputFields] = useState([]);\n    const [markersDict, setMarkersDict] = useState([{}])\n    const [counter, setCounter] = useState(0)\n    const [maskCounter, setMaskCounter] = useState(0)\n    const [maskKeyCounter, setMaskKeyCounter] = useState(0)\n    let maskTemp = ({cellType:\"\", thresholdMarker:\"\", thresholdValue:\"\", color:\"\"})\n    let inputFields = []\n\n\n    const [originalMarkers, setOriginalMarkers] = useState([]) //This list keeps in track about the markers that the user inputted\n    const [markerTextBox, setMarkerTextBox] = useState(\"\")\n    const [maskingTextBox, setMaskingTextBox] = useState(\"\")\n    const [maskDict, setMaskDict] = useState([{}])\n    const [errorMessageArea, setErrorMessageArea] = useState(\"\")\n\n    useImperativeHandle(ref, ()=>({\n        getProcesses(){\n            console.log(\"AXIOS\")\n            axios.get(\"/submitSettings\")\n            .then(function(response){\n\n                //setMarkersDict(response.data[1])\n                //setMarkers(response.data[2])\n                \n                console.log(response.data[1])\n                setMarkerTextBox(\"\")\n                let markers = response.data[1] //dictionary of markers\n                console.log(markers)\n                allMarkersChecked(markers)\n                setOriginalMarkers(response.data[2])//a list of markers\n                //console.log(\"Render area \", renderArea)\n                \n                //Parse values from response data to boolean format\n                for (let prop in response.data[0]) {\n                    if (response.data[0].hasOwnProperty(prop)) {\n                        response.data[0][prop] = (response.data[0][prop] == 'true' || response.data[0][prop] == 'false')? response.data[0][prop] === 'true': response.data[0][prop] ;\n                    }\n                } \n                //Checkbox to Compute marker positive areas to all markers\n                //+ input fields to custom markers\n                if(response.data[0].execute_area == true){\n                    setRenderArea(true)\n                    \n                }\n                else if(response.data[0].execute_area == false)setRenderArea(false)\n                \n                if(response.data[0].execute_sd_segmentation == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_type_identification == true){\n                    setRenderMasking(true)\n                    maskingInput()\n                    console.log(\"RENDER SOMETHING\")\n                }\n                else if(response.data[0].execute_cell_type_identification == false)setRenderArea(false)\n\n                if(response.data[0].execute_cell_clustering == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_thresholding == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_homotypic_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_heterotypic_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_permuted_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                \n                //console.log(skip_area)\n                //console.log(response.data.skip_area)\n            })\n        },\n        submitMetadata(){\n            console.log(\"SUBMIT METADATA\")\n            /*var areaFormData = new FormData();       \n            for (const [key, value] of Object.entries(markersDict)) {\n                console.log(key);\n                console.log(value)\n                areaFormData.append(\"markerAreas\",key, value)\n            }\n            console.log(areaFormData)*/\n            const url = '/submitMetadata';\n            axios.post(url, markersDict).then((response) =>{\n                if(response.data==\"error\"){ //If error\n                    console.log(\"########ERROR########\")\n                }\n                else{ //IF everyting okay\n                    console.log(\"READY\")\n                }\n            });      \n        }\n    }))\n\n    const allMarkersChecked = (markers) => {    \n            console.log(\"ORIGINAL MARKERS\", markers)\n            setMarkersDict(markers)\n            let count = -1;\n\n            //let markers = originalMarkers //Using a temp list because the state variable doesn't update immediately \n            console.log(markers)\n            setMarkerTextBox(Object.entries(markers).map(([key,index]) => {\n                let obj = markers[key]\n                console.log(obj)\n                let marker = Object.keys(obj)[0]\n                console.log(marker)\n                //if(marker in originalMarkers){//THis doesn't work because the marker is located in 0:{marker:mainMarker}\n                    console.log(\"INCLUDES\")\n                    count = count + 1\n                    setCounter(count)  \n\n                    console.log(count)\n                    return(<div class=\"row\" id={count} value={marker}>\n                        <div class=\"col-1\">    \n                            <input name=\"marker\" value={marker} disabled size=\"10\"/>                \n                        </div>\n                        <div class=\"col-2\">    \n                            <input name=\"mainMarker\" value={marker} disabled size=\"10\"/>                \n                        </div>\n                        <div class=\"col-3\">\n                            <button  onClick={() => removeMarker(count)}>Remove</button>                  \n                        </div>  \n                    </div>)        \n            }\n        ))             \n    }\n\n    const addMarkers = event =>{\n        let count = counter + 1\n        console.log(count)\n        setMarkerTextBox([...markerTextBox,\n        <div class=\"row\" id={count}>\n            <div class=\"col-1\">    \n                <input name=\"marker\"  id={0-count} onBlur={event => handleChangeMarker(count,event)} size=\"10\"/>                \n            </div>\n            <div class=\"col-2\">    \n                <input name=\"mainMarker\" onBlur={event => handleChangeMainMarker(count,event)} size=\"10\"/>                \n            </div>\n            <div class=\"col-3\">\n                <button disabled={markerTextBox.length === 0} onClick={() => removeMarker(count)}>Remove</button>        \n            </div> \n\n        </div>\n        ])  \n        setCounter(count)       \n    }\n\n   \n    const removeMarker = (id) => {\n\n        let key = document.getElementById(id).getAttribute(\"value\")\n        delete markersDict[key]\n        document.getElementById(id).remove()\n        console.log(markersDict)\n        \n    }\n\n    const handleChangeMarker = (id, event) => {\n        let inputMarkers = []\n\n        let inputString = event.target.value.replace(/\\s/g, \"\") //Removes the whitespaces\n        let marker = inputString\n        //Checks the logical operators the user inputted\n        if(marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")){\n            inputMarkers = marker.split(/[&!|]+/) //Makes a list of the markers\n        }\n        else{\n            //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n            inputMarkers.push(marker)\n        }\n        let inputError = false\n        //Loop that checks the user inputted a marker that that the tiff-images have\n        for(let elem in inputMarkers){\n            if(originalMarkers.includes(inputMarkers[elem])){\n                inputError = false\n            }\n            else{\n                inputError = true\n                break;\n            }\n        }\n\n        let dict = markersDict\n        console.log(inputError)\n        //If the tiff-images have the marker we can put it to the dictionary\n        if(inputError === false){\n            //setMarkersDict({...markersDict,[inputString]:\"\"})\n            console.log(\"SET MARKER TO DICT\")\n            console.log(\"MARKERSDICT\", markersDict)\n            let update = false\n            setMarkersDict(Object.entries(markersDict).map(([item]) => {\n                console.log(\"ITEM:\",item)\n                if(item == id){\n                    update = true\n                    console.log(\"UPDATE\")\n                    console.log(\"ERISUURI, \", inputString)\n                    console.log(markersDict)\n                    //return([...markersDict, id])\n                    return {...markersDict,[id]:{[inputString]:\"\"}}\n    //setInputFields([...inputFields, { id: uuidv4(),  tiff: '', marker: '' }])\n                }\n                \n            }))\n            if(update === false){\n                console.log(\"update is false, ID : \", id)\n                setMarkersDict({...markersDict,[id]:{[inputString]:\"\"}})\n            }\n            /*setMarkersDict(markersDict.map(function(item, i){\n                console.log(item)\n                return{...markersDict,inputString}\n            })*/\n     \n            }\n        //If not, raising an error to the user\n        else if(inputError === true){\n            setErrorMessageArea(\"ERROR: input \" + inputString + \" couldn't be processed, please change the input\")\n            //alert(\"ERROR: input \" + inputString + \" couldn't be processed, please change the input format\")\n        }\n \n      }\n\n    const handleChangeMainMarker = (id,event) => {\n        console.log(\"MARKERSDICT\", markersDict)\n        console.log(\"Markers Dict type\", typeof(markersDict))\n        let mainMarker = event.target.value.replace(/\\s/g, \"\")\n        let key = document.getElementById(0-id).value\n        let inputError = handleMarkerInput(mainMarker)\n        //If the tiff-images have the marker we can put it to the dictionary\n        if(inputError === false){\n            console.log(\"SET MARKER TO DICT\")\n            console.log(\"MARKERSDICT\", markersDict)\n            let update = false\n            setMarkersDict(Object.entries(markersDict).map(([item]) => {\n                console.log(\"MAINMARKER ITEM \", item)\n                if(item != id){\n                    update = true\n                    console.log(\"UPDATE\")\n                    \n                }\n                \n            }))\n            if(update === false){\n                console.log(\"update is false, ID : \", id)\n                setMarkersDict({...markersDict,[id]:{[key]:mainMarker}})\n            }        \n        }\n        //If not, raising an error to the user\n        else if(inputError === true){\n            setErrorMessageArea(\"ERROR: input \" + mainMarker + \" couldn't be processed, please change the input\")\n            //alert(\"ERROR: input \" + mainMarker + \" couldn't be processed, please change the input format\")\n        }   \n    }\n\n    function handleMarkerInput(marker){\n        let inputMarkers = []\n        console.log(\"INPUMarker\", marker)\n        console.log(\"MARKERSDICT\",markersDict)\n        //Checks the logical operators the user inputted\n        if(marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")){\n            inputMarkers = marker.split(/[&!|]+/) //Makes a list of the markers\n        }\n        else{\n            //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n            inputMarkers.push(marker)\n        }\n        let inputError = false\n        //Loop that checks the user inputted a marker that that the tiff-images have\n        for(let elem in inputMarkers){\n            if(originalMarkers.includes(inputMarkers[elem])){\n                inputError = false\n            }\n            else{\n                inputError = true\n                break;\n            }\n        }\n        return inputError\n    }\n\n    const maskingInput = () => {    \n        console.log(\"MASKING\")\n        let id = \"mask0\" \n        setMaskingTextBox(Object.entries(maskingTextBox+1).map(([key,index]) => {\n            return(\n                <div class=\"row\" >\n                    <div class=\"col-1\">    \n                        <input name = \"mask0\" id=\"mask0\" onBlur={event => handleChangeMask(id,event, \"cellType\")}  size=\"10\"/>                \n                    </div>\n                    <div class=\"col-2\">    \n                        <input name = \"mask0\" onBlur={event => handleChangeMask(id,event, \"thresholdMarker\")} size=\"10\"/>                \n                    </div>\n                    <div class=\"col-3\">    \n                        <input name = \"mask0\"  onBlur={event => handleChangeMask(id,event, \"thresholdValue\")} size=\"10\"/>                \n                    </div>\n                    <div class=\"col-4\">    \n                        <input name = \"mask0\"  onBlur={event => handleChangeMask(id,event, \"color\")}  size=\"10\"/>                \n                    </div>\n                </div>)\n        }))\n    }\n\n    const addMasks = event =>{\n        console.log(maskingTextBox)\n\n        //make this dynamic solution\n        console.log(maskCounter)\n        console.log(Object.keys(maskDict))\n\n        if(Object.keys(maskDict).includes(parseInt(maskCounter))){\n            console.log(\"DISABLE\")\n            document.getElementsByName(\"mask0\").forEach(e => {\n                e.disabled = true\n            })\n            \n        }\n        let count = maskCounter + 1\n        let id = \"mask\" + count\n        setMaskCounter(count)\n        \n        \n        setMaskingTextBox([...maskingTextBox,\n        <div class=\"row\" id={id} >\n            <div class=\"col-1\">    \n                <input name={id}  onBlur={event => handleChangeMask(id,event, \"cellType\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-2\">    \n                <input name={id} disabled={Object.keys(maskDict).includes(maskKeyCounter-1)} onBlur={event => handleChangeMask(id,event, \"thresholdMarker\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-3\">    \n                <input name={id} disabled={Object.keys(maskDict).includes(maskKeyCounter-1)} onBlur={event => handleChangeMask(id,event, \"thresholdValue\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-4\">    \n                <input name={id} disabled={Object.keys(maskDict).includes(maskKeyCounter-1)} onBlur={event => handleChangeMask(id,event, \"color\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-5\">\n                <button onClick={() => removeMask(id, maskKeyCounter)}>Remove</button>        \n            </div> \n\n        </div>\n        ])  \n    }\n\n    const handleChangeMask = (id,event, input) => {\n        //const [maskKeyCounter, setMaskKeyCounter] = useState(0)\n\n        //const [maskTemp, setMaskTemp] = useState({cellType:\"\", thresholdMarker:\"\", thresholdValue:\"\", color:\"\"})\n        //Object.keys(maskDict).length,\n        //console.log(\"MASKS:\", maskDict)\n        setMaskKeyCounter(maskKeyCounter + 1)\n        if(input === \"cellType\"){\n            maskTemp = {...maskTemp, cellType:event.target.value}  \n        }\n        else if(input === \"thresholdMarker\"){\n            maskTemp = {...maskTemp, thresholdMarker:event.target.value}\n        }\n        else if(input === \"thresholdValue\"){\n            maskTemp ={...maskTemp, thresholdValue:event.target.value} \n        }\n        else if(input === \"color\"){\n            maskTemp ={...maskTemp, color:event.target.value}\n        }\n        \n        if(Object.values(maskTemp).filter(x => x === \"\").length === 0){\n            setMaskDict({...maskDict,[maskKeyCounter]:[{cell_type:maskTemp[\"cellType\"]},{ threshold_marker:maskTemp[\"thresholdMarker\"]}, {threshold_value:maskTemp[\"thresholdValue\"]}, {color:maskTemp[\"color\"]}]})     \n        }\n\n        //if(cell_type === true)\n       \n    }\n\n    const removeMask = (id,dictKey) => {\n        delete maskDict[dictKey]\n        document.getElementById(id).remove()\n        console.log(maskDict)\n    }\n\n    return(\n        <div>\n            <form class=\"metadataForm\">\n                <b>Submit metadata:</b>\n                {renderArea ? (\n                    <div>\n                    <React.Fragment> \n                        <p>Area</p>\n                        <div class=\"row\">\n                                <div class=\"col-1\">    \n                                    <p>Marker</p>\n                                </div>\n                                <div class=\"col-2\">    \n                                    <p>Main marker</p>\n                            </div>\n                        </div>\n                        {markerTextBox}\n                        <button type=\"button\" onClick={addMarkers}>Add markers</button>\n\n                    </React.Fragment>\n                    </div>                  \n                ):(<></>)} \n                <br></br>\n                {renderMasking ? (\n                    <div>\n                    <React.Fragment> \n                        <p>Masking</p>\n                        <div class=\"row\">\n                                <div class=\"col-1\">    \n                                    <p>Cell type</p>\n                                </div>\n                                <div class=\"col-2\">    \n                                    <p>Threshold marker</p>\n                                </div>\n                                <div class=\"col-3\">    \n                                    <p>Threshold value</p>\n                                </div>\n                                <div class=\"col-4\">    \n                                    <p>Color</p>\n                                </div>             \n                            </div>\n                        {maskingTextBox}\n                        <button type=\"button\" onClick={addMasks}>Add more samples</button>\n                    </React.Fragment>\n                    </div>                  \n                ):(<></>)}     \n                 \n            </form>\n        </div>\n        ) \n})\nexport default GetMetadata;\n//<div>{allMarkers && <p>Loading...</p>}</div>#setAllMarkes(!allMarkers);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}