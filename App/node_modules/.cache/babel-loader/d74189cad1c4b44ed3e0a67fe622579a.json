{"ast":null,"code":"import _slicedToArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli-app/src/getMetadata.js\";\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport { render } from '@testing-library/react'; //import GetSettings from \"./getSettings.js\"\n\nvar GetMetadata = forwardRef(function (props, ref) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      renderArea = _useState2[0],\n      setRenderArea = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      allMarkers = _useState4[0],\n      setAllMarkes = _useState4[1];\n\n  print(\"RENDAAAAA\");\n\n  if (allMarkers == true) {\n    console.log(\"NYT VITTU NUKKUMAAN\");\n  } //const [samplesDict, setSamplesDict] = useState({})\n\n\n  var samplesDict = {};\n  useImperativeHandle(ref, function () {\n    return {\n      getProcesses: function getProcesses() {\n        axios.get(\"/submitSettings\").then(function (response) {\n          console.log(response);\n          console.log(response.data[0]);\n          console.log(response.data[1]);\n          samplesDict = response.data[1]; //setSamples(JSON.parse(response.data[1]))\n          //console.log(samples)\n          //console.log(typeof(samples))\n          //Parse values from response data to boolean format\n\n          for (var prop in response.data[0]) {\n            if (response.data[0].hasOwnProperty(prop)) {\n              response.data[0][prop] = response.data[0][prop] == 'true' || response.data[0][prop] == 'false' ? response.data[0][prop] === 'true' : response.data[0][prop];\n            }\n          } //Checkbox to Compute marker positive areas to all markers\n          //+ input fields to custom markers\n\n\n          if (response.data[0].execute_area == true) {\n            console.log(\"RENDER SOMETHING\");\n            console.log(allMarkers);\n            setRenderArea(true); //console.log(\"Render area \", renderArea)\n          } else if (response.data[0].execute_area == false) setRenderArea(false);\n\n          if (response.data[0].execute_sd_segmentation == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_type_identification == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_clustering == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_cell_thresholding == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_homotypic_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_heterotypic_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          }\n\n          if (response.data[0].execute_permuted_interactions == true) {\n            console.log(\"RENDER SOMETHING\");\n          } //console.log(skip_area)\n          //console.log(response.data.skip_area)\n\n        });\n      },\n      submitMetadata: function submitMetadata() {\n        console.log(\"metadata\");\n        console.log(allMarkers);\n        console.log(\"getMETADATA\");\n      }\n    };\n  });\n\n  var cbAreaChecked = function cbAreaChecked(event) {\n    console.log(allMarkers);\n\n    if (allMarkers === true) {\n      console.log(\"checked\");\n      console.log(samplesDict);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    class: \"metadataForm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, \"Submit metadata:\"), renderArea ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 25\n    }\n  }, \"Area\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"checkbox\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 29\n    }\n  }, \"Select all markers: \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    name: \"cbAreas\",\n    onChange: function onChange() {\n      return setAllMarkes(!allMarkers);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 33\n    }\n  })), allMarkers ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 29\n    }\n  }, \"ALL markers\")) : /*#__PURE__*/React.createElement(React.Fragment, null)) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n});\nexport default GetMetadata; //<div>{allMarkers && <p>Loading...</p>}</div>#setAllMarkes(!allMarkers);","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","axios","render","GetMetadata","props","ref","renderArea","setRenderArea","allMarkers","setAllMarkes","print","console","log","samplesDict","getProcesses","get","then","response","data","prop","hasOwnProperty","execute_area","execute_sd_segmentation","execute_cell_type_identification","execute_cell_clustering","execute_cell_thresholding","execute_homotypic_interactions","execute_heterotypic_interactions","execute_permuted_interactions","submitMetadata","cbAreaChecked","event"],"sources":["/home/ernohanninen/simpli-app/src/getMetadata.js"],"sourcesContent":["import React,  { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport { render } from '@testing-library/react';\n//import GetSettings from \"./getSettings.js\"\n\n\nconst GetMetadata = forwardRef((props, ref)=>{\n\n    const [renderArea, setRenderArea] = useState(false)\n    const [allMarkers, setAllMarkes]  = useState(false)\n    print(\"RENDAAAAA\")\n    if(allMarkers == true){\n        console.log(\"NYT VITTU NUKKUMAAN\")  \n    }\n    \n    //const [samplesDict, setSamplesDict] = useState({})\n    var samplesDict = {}\n    useImperativeHandle(ref, ()=>({\n        getProcesses(){\n            axios.get(\"/submitSettings\")\n            .then(function(response){\n                console.log(response)\n                console.log(response.data[0])\n                console.log(response.data[1])\n                samplesDict = response.data[1]\n\n\n                //setSamples(JSON.parse(response.data[1]))\n                //console.log(samples)\n                //console.log(typeof(samples))\n                //Parse values from response data to boolean format\n                for (let prop in response.data[0]) {\n                    if (response.data[0].hasOwnProperty(prop)) {\n                        response.data[0][prop] = (response.data[0][prop] == 'true' || response.data[0][prop] == 'false')? response.data[0][prop] === 'true': response.data[0][prop] ;\n                    }\n                } \n                //Checkbox to Compute marker positive areas to all markers\n                //+ input fields to custom markers\n                if(response.data[0].execute_area == true){\n\n                    console.log(\"RENDER SOMETHING\")\n                    console.log(allMarkers)\n                    setRenderArea(true)\n                    //console.log(\"Render area \", renderArea)\n\n                }\n                else if(response.data[0].execute_area == false)setRenderArea(false)\n                \n                if(response.data[0].execute_sd_segmentation == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_type_identification == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_clustering == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_cell_thresholding == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_homotypic_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_heterotypic_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                if(response.data[0].execute_permuted_interactions == true){\n                    console.log(\"RENDER SOMETHING\")\n                }\n                \n                //console.log(skip_area)\n                //console.log(response.data.skip_area)\n            })\n        },\n        submitMetadata(){\n\n            console.log(\"metadata\")\n            console.log(allMarkers)\n\n            console.log(\"getMETADATA\")\n        }\n       \n\n        \n\n    }))\n\n   \n\n    const cbAreaChecked =  event => {\n        console.log(allMarkers)\n        \n\n        if(allMarkers === true){\n            console.log(\"checked\")\n        \n            console.log(samplesDict)\n        }\n       \n\n\n    }\n \n    return(\n        <div>\n            <form class=\"metadataForm\">\n                <b>Submit metadata:</b>\n                {renderArea ? (\n                    <div>\n                        <p>Area</p>\n                            <div class = \"checkbox\" >\n\n                            <p>Select all markers: </p>\n                                <input type = \"checkbox\" name=\"cbAreas\" onChange={()=>setAllMarkes(!allMarkers)}/>\n                        </div>\n                        {allMarkers ? (\n                        <div>\n                            <p>ALL markers</p>\n                        </div>\n                         ):(<></>)}\n                    </div>\n                   \n\n                ):(<></>)}\n\n\n          \n            </form>\n        </div>\n    \n        )\n   \n})\nexport default GetMetadata;\n//<div>{allMarkers && <p>Loading...</p>}</div>#setAllMarkes(!allMarkers);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}