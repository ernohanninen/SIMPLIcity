{"ast":null,"code":"import _toConsumableArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli-app/src/getResults.js\";\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport Table from \"./sample_table.js\";\n\nvar GetResults = function GetResults() {\n  //Variables\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      plotPaths = _useState2[0],\n      setPlotPaths = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      areaPlots = _useState4[0],\n      setAreaPlots = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sampleImages = _useState6[0],\n      setSampleImages = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dropDown = _useState8[0],\n      setDropDown = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      checkbox = _useState10[0],\n      setCheckbox = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      displaySegmentationCb = _useState12[0],\n      setDisplaySegmentationCb = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      preprocessedCb = _useState14[0],\n      setPreprocessedCb = _useState14[1];\n\n  var _useState15 = useState(true),\n      _useState16 = _slicedToArray(_useState15, 2),\n      firstCall = _useState16[0],\n      setFirstCall = _useState16[1]; //const [displaySegmented, setDisplaySegmented] = useState(true)\n\n\n  var sample = \"\"; //Function which get the images from backend\n\n  var displayResults = function displayResults() {\n    document.getElementById(\"resultsButton\").style.display = \"none\";\n    axios.get(\"/fetchResults\").then(function (response) {\n      var data = response.data; //Response value is a dictionary\n      //Extracting values from dictionary\n\n      var samples = data[\"samples\"];\n      var area = data[\"area\"];\n      console.log(area);\n      console.log(samples);\n      setPlotPaths(area);\n      displayImages(area, samples); //Calling function which displays the images         \n    });\n  }; //Function which displays the images to the user\n\n\n  var displayImages = function displayImages(area, samples) {\n    //Get the values for drop-down list\n    var optionItems = Object.entries(samples).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: key,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }\n      }, key);\n    }); //Create the dropdown list\n\n    setDropDown( /*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, \"Quality control: \"), /*#__PURE__*/React.createElement(\"select\", {\n      name: \"sampleSelector\",\n      id: \"sampleSelector\",\n      onChange: function onChange(event) {\n        return handleChangeSelect(event);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      id: \"optionNone\",\n      value: \"None\",\n      selected: \"true\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 18\n      }\n    }, \"None\"), optionItems)));\n    var segmentation = false;\n    console.log(samples);\n    console.log(Object.keys(samples));\n    console.log(samples[Object.keys(samples)[0]].length);\n\n    if (samples[Object.keys(samples)[0]].length === 4) {\n      segmentation = true;\n    }\n\n    segmentation = true;\n    setDisplaySegmentationCb(segmentation); //Map samples and set the images to variable\n\n    setSampleImages(Object.entries(samples).map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          key = _ref4[0],\n          value = _ref4[1];\n\n      var idPreprocessed = \"idPre\" + key;\n      var idThresholded = \"idThres\" + key;\n      var idSegmented = \"idSeg\" + key;\n      var idPreprocessedDiv = \"preDiv\" + key;\n      var idThresholdedDiv = \"thresDiv\" + key;\n      var idSegmentedDiv = \"segDiv\" + key;\n      console.log(\"__________\");\n      console.log(key);\n      return [].concat(_toConsumableArray(sampleImages), [/*#__PURE__*/React.createElement(\"div\", {\n        id: key,\n        hidden: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: idPreprocessedDiv,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }\n      }, \"Preprocessed \", key), /*#__PURE__*/React.createElement(\"img\", {\n        class: \"contain\",\n        id: idPreprocessed,\n        src: require(\"../src/images/\" + value[0][\"preprocessed\"]),\n        onClick: function onClick(event) {\n          return displayFullScreen(idPreprocessed);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        id: idThresholdedDiv,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }\n      }, \"Thresholded \", key), /*#__PURE__*/React.createElement(\"img\", {\n        class: \"contain\",\n        id: idThresholded,\n        src: require(\"../src/images/\" + value[1][\"thresholded\"]),\n        onClick: function onClick(event) {\n          return displayFullScreen(idThresholded);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }\n      })), segmentation ? /*#__PURE__*/React.createElement(\"div\", {\n        id: idSegmentedDiv,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }\n      }, \"Segmented \", key), /*#__PURE__*/React.createElement(\"img\", {\n        class: \"contain\",\n        id: idSegmented,\n        src: require(\"../src/images/\" + value[2][\"overlays\"]),\n        onClick: function onClick(event) {\n          return displayFullScreen(idSegmented);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }\n      })) : /*#__PURE__*/React.createElement(React.Fragment, null))]);\n    })); //Set marker area plot\n\n    if (area != \"\") {\n      setAreaPlots( /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }\n      }, \"Measurement of marker positive area\"), /*#__PURE__*/React.createElement(\"img\", {\n        id: \"areaPlot\",\n        src: require(\"../src/images/Area/\" + area),\n        onClick: function onClick(event) {\n          return displayFullScreen(\"areaPlot\");\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }\n      })));\n    }\n  };\n\n  var displayFullScreen = function displayFullScreen(id) {\n    var elem = document.getElementById(id);\n\n    if (document.fullscreenElement) {\n      document.exitFullscreen();\n    } else {\n      if (elem.requestFullscreen) {\n        elem.requestFullscreen();\n      } else if (elem.webkitRequestFullscreen) {\n        /* Safari */\n        elem.webkitRequestFullscreen();\n      } else if (elem.msRequestFullscreen) {\n        /* IE11 */\n        elem.msRequestFullscreen();\n      }\n    }\n  }; //Handles changes in the sample drop-down list\n\n\n  var handleChangeSelect = function handleChangeSelect(event) {\n    //displays images/nothing depending of the selected drop-down value\n    var idPreprocessedDiv = \"preDiv\" + event.target.value;\n    var idThresholdedDiv = \"thresDiv\" + event.target.value;\n    var idSegmentedDiv = \"segDiv\" + event.target.value;\n    console.log(\"Segmentation : \", displaySegmentationCb);\n\n    if (event.target.value == \"None\") {\n      setCheckbox(\"\");\n    } else {\n      //IF the checkbox exists it is checked by default\n      if (document.getElementById(\"preprocessedImgCheck\") != null) {\n        document.getElementById(\"preprocessedImgCheck\").checked = true;\n      }\n\n      if (document.getElementById(\"thresholdImgCheck\") != null) {\n        document.getElementById(\"thresholdImgCheck\").checked = true;\n      }\n\n      if (document.getElementById(\"segmentedImgCheck\") != null) {\n        document.getElementById(\"segmentedImgCheck\").checked = true;\n      } //If the image is hidden make them visible\n\n\n      document.getElementById(idPreprocessedDiv).style.display = \"block\";\n      document.getElementById(idThresholdedDiv).style.display = \"block\";\n\n      if (displaySegmentationCb == true) {\n        document.getElementById(idSegmentedDiv).style.display = \"block\";\n      }\n\n      document.getElementById(idSegmentedDiv).style.display = \"block\";\n      setCheckbox( /*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"checkbox\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }\n      }, \"Preprocessed image: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"preprocessedImgCheck\",\n        onClick: function onClick() {\n          return handleCheckbox(idPreprocessedDiv, \"preprocessedImgCheck\");\n        },\n        defaultChecked: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"checkbox\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }\n      }, \"Thresholded image: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"thresholdImgCheck\",\n        onClick: function onClick() {\n          return handleCheckbox(idThresholdedDiv, \"thresholdImgCheck\");\n        },\n        defaultChecked: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }\n      })), displaySegmentationCb ? /*#__PURE__*/React.createElement(\"div\", {\n        class: \"checkbox\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 22\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 22\n        }\n      }, \"Segmented image: \"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        id: \"segmentedImgCheck\",\n        onClick: function onClick() {\n          return handleCheckbox(idSegmentedDiv, \"segmentedImgCheck\");\n        },\n        defaultChecked: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 22\n        }\n      })) : /*#__PURE__*/React.createElement(React.Fragment, null)));\n    }\n\n    if (event.target.value != \"None\") {\n      document.getElementById(event.target.value).style.display = \"block\";\n    } //Hides images depending of the value\n\n\n    if (sample != \"\" && sample != \"None\") {\n      document.getElementById(sample).style.display = \"none\";\n    }\n\n    sample = event.target.value;\n  };\n\n  var handleCheckbox = function handleCheckbox(idDiv, idCb) {\n    var elem = document.getElementById(idDiv); //Hide element\n\n    if (window.getComputedStyle(elem).display == \"block\") {\n      elem.style.display = \"none\";\n      document.getElementById(idCb).defaultChecked = false;\n    } //Display element\n    else if (window.getComputedStyle(elem).display == \"none\") {\n      elem.style.display = \"block\";\n      document.getElementById(idCb).defaultChecked = true;\n    }\n  }; //Display HTML to the user\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    class: \"resultsForm\",\n    id: \"resultsForm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"load\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 21\n    }\n  }, \"Running SIMPLI\")), /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"results\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 21\n    }\n  }, \"SIMPLI results\"), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"resultsButton\",\n    type: \"button\",\n    onClick: function onClick(event) {\n      return displayResults();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 21\n    }\n  }, \"Display results\"), dropDown, checkbox, sampleImages, areaPlots)));\n};\n\nexport default GetResults;","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","axios","Table","GetResults","plotPaths","setPlotPaths","areaPlots","setAreaPlots","sampleImages","setSampleImages","dropDown","setDropDown","checkbox","setCheckbox","displaySegmentationCb","setDisplaySegmentationCb","preprocessedCb","setPreprocessedCb","firstCall","setFirstCall","sample","displayResults","document","getElementById","style","display","get","then","response","data","samples","area","console","log","displayImages","optionItems","Object","entries","map","key","value","event","handleChangeSelect","segmentation","keys","length","idPreprocessed","idThresholded","idSegmented","idPreprocessedDiv","idThresholdedDiv","idSegmentedDiv","require","displayFullScreen","id","elem","fullscreenElement","exitFullscreen","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","target","checked","handleCheckbox","idDiv","idCb","window","getComputedStyle","defaultChecked"],"sources":["/home/ernohanninen/simpli-app/src/getResults.js"],"sourcesContent":["import React,  { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport Table from \"./sample_table.js\";\n\n\n\nconst GetResults = () => { \n    \n    //Variables\n    const [plotPaths, setPlotPaths] = useState(\"\")\n    const [areaPlots, setAreaPlots] = useState(\"\")\n    const [sampleImages, setSampleImages] = useState(\"\")\n    const [dropDown, setDropDown] = useState(\"\")\n    const [checkbox, setCheckbox] = useState(\"\")\n    const [displaySegmentationCb, setDisplaySegmentationCb] = useState(false)\n    const [preprocessedCb, setPreprocessedCb] = useState(false)\n    const [firstCall,setFirstCall] = useState(true)\n    \n\n    //const [displaySegmented, setDisplaySegmented] = useState(true)\n\n    var sample = \"\"\n\n    //Function which get the images from backend\n    const displayResults = () => {\n        document.getElementById(\"resultsButton\").style.display = \"none\"\n        axios.get(\"/fetchResults\")\n        .then(function(response){\n           let data = response.data //Response value is a dictionary\n           //Extracting values from dictionary\n           let samples = data[\"samples\"]\n           let area = data[\"area\"]\n           console.log(area)\n           console.log(samples)\n        \n           setPlotPaths(area)    \n           displayImages(area, samples) //Calling function which displays the images         \n        })\n    }\n    //Function which displays the images to the user\n    const displayImages = (area, samples) => { \n        //Get the values for drop-down list\n        let optionItems = Object.entries(samples).map(([key,value]) => \n            <option value={key}>{key}</option>\n        )\n        \n\n        //Create the dropdown list\n        setDropDown(\n        <div class=\"row\">\n            <p>Quality control: </p>\n            <select name=\"sampleSelector\" id=\"sampleSelector\" onChange={event => handleChangeSelect(event)}>\n                 <option id=\"optionNone\" value=\"None\" selected=\"true\">None</option>  \n                 {optionItems}\n                  \n            </select>\n            \n            \n        </div>\n        )\n        let segmentation = false\n        console.log(samples)\n        console.log(Object.keys(samples))\n        console.log(samples[Object.keys(samples)[0]].length)\n        if(samples[Object.keys(samples)[0]].length === 4){\n            segmentation = true\n        }\n        segmentation = true\n        \n        setDisplaySegmentationCb(segmentation)\n        \n        \n\n  \n        //Map samples and set the images to variable\n        setSampleImages(Object.entries(samples).map(([key,value]) => {\n            let idPreprocessed = \"idPre\" + key\n            let idThresholded = \"idThres\" + key\n            let idSegmented = \"idSeg\" + key\n\n            let idPreprocessedDiv = \"preDiv\" + key\n            let idThresholdedDiv = \"thresDiv\" + key\n            let idSegmentedDiv = \"segDiv\" + key\n\n\n\n            console.log(\"__________\")\n            console.log(key)\n            return([...sampleImages, \n            <div id = {key} hidden>\n                 \n                <div id = {idPreprocessedDiv}>\n                    <p>Preprocessed {key}</p>    \n                    <img class=\"contain\" id ={idPreprocessed} src={require(\"../src/images/\" + value[0][\"preprocessed\"])} onClick= {event => displayFullScreen(idPreprocessed)}></img>\n                </div>\n                <div id = {idThresholdedDiv}>\n                    <p>Thresholded {key}</p>\n                    <img class=\"contain\" id ={idThresholded} src={require(\"../src/images/\" + value[1][\"thresholded\"])}  onClick= {event => displayFullScreen(idThresholded)}></img>\n                </div>\n                {segmentation ? (\n                    <div id = {idSegmentedDiv}>\n                        <p>Segmented {key}</p>\n                        <img class=\"contain\" id ={idSegmented} src={require(\"../src/images/\" + value[2][\"overlays\"])}  onClick= {event => displayFullScreen(idSegmented)}></img>         \n                    </div>                  \n                ):(<></>)         \n                }   \n            </div>])\n        }))\n\n        //Set marker area plot\n        if(area != \"\"){\n            setAreaPlots(\n                <div>\n                    <p>Measurement of marker positive area</p>\n                    <img id =\"areaPlot\" src={require(\"../src/images/Area/\" + area)} onClick= {event => displayFullScreen(\"areaPlot\")}></img>\n                </div>\n            )\n        }\n        \n    } \n\n\n    const displayFullScreen = (id) => { \n        let elem = document.getElementById(id)\n        if(document.fullscreenElement){\n            document.exitFullscreen()\n        }\n        else{\n            if (elem.requestFullscreen) {\n                elem.requestFullscreen();\n              } else if (elem.webkitRequestFullscreen) { /* Safari */\n                elem.webkitRequestFullscreen();\n              } else if (elem.msRequestFullscreen) { /* IE11 */\n                elem.msRequestFullscreen();\n              }\n        }\n        \n    }\n\n    //Handles changes in the sample drop-down list\n    const handleChangeSelect = (event) => { \n        //displays images/nothing depending of the selected drop-down value\n        let idPreprocessedDiv = \"preDiv\" + event.target.value\n        let idThresholdedDiv = \"thresDiv\" + event.target.value\n        let idSegmentedDiv = \"segDiv\" + event.target.value\n\n        console.log(\"Segmentation : \", displaySegmentationCb)\n        \n        if(event.target.value == \"None\"){     \n            setCheckbox(\"\")  \n        }\n        else{\n            //IF the checkbox exists it is checked by default\n            if(document.getElementById(\"preprocessedImgCheck\") != null){\n                document.getElementById(\"preprocessedImgCheck\").checked = true;    \n            }\n            if(document.getElementById(\"thresholdImgCheck\") != null){\n                document.getElementById(\"thresholdImgCheck\").checked = true; \n            }\n            if(document.getElementById(\"segmentedImgCheck\") != null){\n                document.getElementById(\"segmentedImgCheck\").checked = true;    \n            }        \n\n            //If the image is hidden make them visible\n            document.getElementById(idPreprocessedDiv).style.display = \"block\"\n            document.getElementById(idThresholdedDiv).style.display = \"block\"\n            if(displaySegmentationCb == true){\n                document.getElementById(idSegmentedDiv).style.display = \"block\"\n            }\n            document.getElementById(idSegmentedDiv).style.display = \"block\"\n\n\n            setCheckbox(\n            <div class=\"row\">\n                <div class=\"checkbox\">    \n                    <p>Preprocessed image: </p>\n                    <input type = \"checkbox\" id=\"preprocessedImgCheck\" onClick={()=>handleCheckbox(idPreprocessedDiv, \"preprocessedImgCheck\")} defaultChecked/>                \n                </div>\n                <div class=\"checkbox\">    \n                    <p>Thresholded image: </p>\n                    <input type = \"checkbox\" id=\"thresholdImgCheck\" onClick={()=>handleCheckbox(idThresholdedDiv, \"thresholdImgCheck\")} defaultChecked/>                \n                </div>\n                {displaySegmentationCb ? (\n                     <div class=\"checkbox\">    \n                     <p>Segmented image: </p>\n                     <input type = \"checkbox\" id=\"segmentedImgCheck\" onClick={()=>handleCheckbox(idSegmentedDiv, \"segmentedImgCheck\")} defaultChecked/>                \n                 </div>               \n                ):(<></>)         \n                }         \n            </div>    \n            )    \n\n            \n        } \n\n        if(event.target.value != \"None\"){\n            document.getElementById(event.target.value).style.display = \"block\"\n        }\n        //Hides images depending of the value\n        if(sample != \"\" && sample != \"None\"){\n            document.getElementById(sample).style.display = \"none\"\n        }\n        sample = event.target.value    \n        \n    }\n\n    const handleCheckbox = (idDiv, idCb) => {\n\n        var elem = document.getElementById(idDiv)\n        //Hide element\n        if(window.getComputedStyle(elem).display == \"block\"){\n            elem.style.display = \"none\"\n            document.getElementById(idCb).defaultChecked = false;\n        }\n        //Display element\n        else if(window.getComputedStyle(elem).display == \"none\"){\n            elem.style.display =\"block\"\n            document.getElementById(idCb).defaultChecked = true;\n\n        }\n\n    }\n \n    //Display HTML to the user\n    return(\n        <div>\n            <form class=\"resultsForm\" id=\"resultsForm\">\n                <div hidden id=\"load\">\n                    <p>Running SIMPLI</p>         \n                </div>\n                \n                <div hidden id=\"results\">  \n                    <header>SIMPLI results</header>  \n                    <button id=\"resultsButton\" type=\"button\" onClick={event => displayResults()}>Display results</button>\n                        {dropDown}     \n                        {checkbox}          \n                        \n                    \n                    {sampleImages}\n                    {areaPlots}\n                </div>\n            </form>\n        </div>\n    )\n}\nexport default GetResults;"],"mappings":"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"},"metadata":{},"sourceType":"module"}