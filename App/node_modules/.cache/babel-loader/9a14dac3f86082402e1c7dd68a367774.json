{"ast":null,"code":"import _defineProperty from \"/home/ernohanninen/simpli_project/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/ernohanninen/simpli_project/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/home/ernohanninen/simpli_project/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/home/ernohanninen/simpli_project/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/ernohanninen/simpli_project/App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli_project/App/src/getMetadata.js\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nimport React, { useState, forwardRef, useImperativeHandle, useRef } from 'react';\nimport axios from \"axios\";\nimport './App.css'; //If no markers prevent user to go forward add new textbox\n//able user input non unique markers\n//adding custom markers doesn't work\n//Add random color generator for mask input\n//Using boolean it should be possible to check wether the input is filled before adding more mask metadata\n//If there is no marker the axios posts still sends data\n//Even if the area is unchecked the axios posts the data that is submitted on the main page (CHECK THAT THIS IS FIXED)\n//Delete existing marker from marker list\n//Check that the colors for cell_masking_metadata are okay\n\nvar options = [];\nvar maskTemp = {\n  cellType: \"\",\n  thresholdMarker: \"\",\n  thresholdValue: NA,\n  color: \"\"\n};\nvar GetMetadata = forwardRef(function (props, ref) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      renderArea = _useState2[0],\n      setRenderArea = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      renderSegmentation = _useState4[0],\n      setRenderSegmentation = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      renderMasking = _useState6[0],\n      setRenderMasking = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      renderIntensity = _useState8[0],\n      setRenderIntensity = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      renderCellArea = _useState10[0],\n      setRenderCellArea = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      intensityTb = _useState12[0],\n      setIntensityTb = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      allMarkers = _useState14[0],\n      setAllMarkes = _useState14[1];\n\n  var _useState15 = useState([{}]),\n      _useState16 = _slicedToArray(_useState15, 2),\n      markersDict = _useState16[0],\n      setMarkersDict = _useState16[1];\n\n  var _useState17 = useState(0),\n      _useState18 = _slicedToArray(_useState17, 2),\n      counter = _useState18[0],\n      setCounter = _useState18[1];\n\n  var _useState19 = useState(0),\n      _useState20 = _slicedToArray(_useState19, 2),\n      markerKeyCounter = _useState20[0],\n      setMarkerKeyCounter = _useState20[1];\n\n  var markerTemp = {\n    marker: \"\",\n    mainMarker: \"\"\n  };\n\n  var _useState21 = useState(0),\n      _useState22 = _slicedToArray(_useState21, 2),\n      maskCounter = _useState22[0],\n      setMaskCounter = _useState22[1];\n\n  var _useState23 = useState(0),\n      _useState24 = _slicedToArray(_useState23, 2),\n      maskKeyCounter = _useState24[0],\n      setMaskKeyCounter = _useState24[1];\n\n  var _useState25 = useState(0),\n      _useState26 = _slicedToArray(_useState25, 2),\n      cellAreaCounter = _useState26[0],\n      setCellAreaCounter = _useState26[1];\n\n  var _useState27 = useState(false),\n      _useState28 = _slicedToArray(_useState27, 2),\n      newMask = _useState28[0],\n      setNewMask = _useState28[1];\n\n  var inputFields = [];\n\n  var _useState29 = useState(\"\"),\n      _useState30 = _slicedToArray(_useState29, 2),\n      analysisReady = _useState30[0],\n      setAnalysisReady = _useState30[1];\n\n  var _useState31 = useState(\"\"),\n      _useState32 = _slicedToArray(_useState31, 2),\n      markerOptions = _useState32[0],\n      setMarkerOptions = _useState32[1];\n\n  var _useState33 = useState([]),\n      _useState34 = _slicedToArray(_useState33, 2),\n      originalMarkers = _useState34[0],\n      setOriginalMarkers = _useState34[1]; //This list keeps in track about the markers that the user inputted\n\n\n  var _useState35 = useState(\"\"),\n      _useState36 = _slicedToArray(_useState35, 2),\n      markerTextBox = _useState36[0],\n      setMarkerTextBox = _useState36[1];\n\n  var _useState37 = useState(\"\"),\n      _useState38 = _slicedToArray(_useState37, 2),\n      modelDropDown = _useState38[0],\n      setModelDropDown = _useState38[1];\n\n  var _useState39 = useState(\"\"),\n      _useState40 = _slicedToArray(_useState39, 2),\n      model = _useState40[0],\n      setModel = _useState40[1];\n\n  var _useState41 = useState(\"\"),\n      _useState42 = _slicedToArray(_useState41, 2),\n      segmentationSettings = _useState42[0],\n      setSegmentationSettings = _useState42[1];\n\n  var _useState43 = useState(\"\"),\n      _useState44 = _slicedToArray(_useState43, 2),\n      probTreshold = _useState44[0],\n      setProbThreshold = _useState44[1];\n\n  var _useState45 = useState(\"\"),\n      _useState46 = _slicedToArray(_useState45, 2),\n      overlapThreshold = _useState46[0],\n      setOverlapThreshold = _useState46[1];\n\n  var _useState47 = useState(\"\"),\n      _useState48 = _slicedToArray(_useState47, 2),\n      maskingTextBox = _useState48[0],\n      setMaskingTextBox = _useState48[1];\n\n  var _useState49 = useState([{}]),\n      _useState50 = _slicedToArray(_useState49, 2),\n      maskDict = _useState50[0],\n      setMaskDict = _useState50[1];\n\n  var _useState51 = useState(\"\"),\n      _useState52 = _slicedToArray(_useState51, 2),\n      errorMessageArea = _useState52[0],\n      setErrorMessageArea = _useState52[1];\n\n  var _useState53 = useState(\"\"),\n      _useState54 = _slicedToArray(_useState53, 2),\n      intensityCellType = _useState54[0],\n      setIntensityCellType = _useState54[1];\n\n  var _useState55 = useState([]),\n      _useState56 = _slicedToArray(_useState55, 2),\n      cellAreaTb = _useState56[0],\n      setCellAreaTb = _useState56[1];\n\n  var _useState57 = useState([]),\n      _useState58 = _slicedToArray(_useState57, 2),\n      cellAreaList = _useState58[0],\n      setCellAreaList = _useState58[1];\n\n  useImperativeHandle(ref, function () {\n    return {\n      //THis axios call is used to get the processes to run\n      getProcesses: function getProcesses() {\n        function getData() {\n          return _getData.apply(this, arguments);\n        }\n\n        function _getData() {\n          _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            var response;\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return axios({\n                      url: \"/getSettings\",\n                      method: \"get\"\n                    });\n\n                  case 3:\n                    response = _context.sent;\n                    return _context.abrupt(\"return\", response.data);\n\n                  case 7:\n                    _context.prev = 7;\n                    _context.t0 = _context[\"catch\"](0);\n                    console.log(_context.t0);\n\n                  case 10:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[0, 7]]);\n          }));\n          return _getData.apply(this, arguments);\n        }\n\n        getData() //If no error parse the response\n        .then(function (response) {\n          //Parse values from response data to boolean format\n          for (var prop in response[0]) {\n            if (response[0].hasOwnProperty(prop)) {\n              response[0][prop] = response[0][prop] == 'true' || response[0][prop] == 'false' ? response[0][prop] === 'true' : response[0][prop];\n            }\n          } //Check that all the processes which are dependent on each other is checked\n          //Alert user if some of the required processes is not checked\n\n\n          if (response[0].instrument == \"\") {\n            alert(\"Select source of images\");\n          } else if (response[0].execute_sd_segmentation == false || response[0].execute_cell_type_identification == true && response[0].execute_intensity == true && response[0].execute_measure_cell_areas == true && response[0].execute_cell_clustering == true && response[0].execute_cell_thresholding == true && response[0].execute_homotypic_interactions == true && response[0].execute_heterotypic_interactions == true && response[0].execute_permuted_interactions == true) {\n            alert(\"To run cell-based analysis, check image segmentation\");\n          } else if (response[0].execute_cell_clustering == false && response[0].execute_cell_thresholding == true || response[0].execute_homotypic_interactions == true || response[0].execute_heterotypic_interactions == true || response[0].execute_permuted_interactions == true) {\n            alert(\"To run cell clustering, check cell type identification\");\n          } else if (response[0].execute_cell_thresholding == false && response[0].execute_homotypic_interactions == true || response[0].execute_heterotypic_interactions == true || response[0].execute_permuted_interactions == true) {\n            alert(\"To run cell thresholding, check cell clustering\");\n          } else if (response[0].execute_cell_thresholding == false && response[0].execute_homotypic_interactions == true) {\n            alert(\"To run homotypic interactions, check cell thresholding\");\n          } else if (response[0].execute_cell_thresholding == false && response[0].execute_heterotypic_interactions == true) {\n            alert(\"To run heterotypic interactions, check cell thresholding\");\n          } else if (response[0].execute_cell_thresholding == false && response[0].execute_permuted_interactions == true) {\n            alert(\"To run permuted interactions, check cell thresholding\");\n          } //If the processes were correct display the getMetadata page and hide the getSettings page\n          else {\n            document.getElementById(\"settingsPage\").style.display = \"none\";\n            document.getElementById(\"nextButton2\").style.display = \"none\";\n            document.getElementById(\"returnButton\").style.display = \"none\";\n            document.getElementById(\"returnButton2\").style.display = \"block\";\n            document.getElementById(\"nextButton3\").style.display = \"block\";\n            document.getElementById(\"metadataPage\").style.display = \"block\"; //These if statements contols which input fields are rendered. This depdends of the processes to run\n\n            if (response[0].execute_area == true) {\n              console.log(\"EXECUTE AREA\");\n              setRenderArea(true);\n              setMarkerTextBox(\"\");\n              var markers = response[1]; //dictionary of markers\n\n              allMarkersChecked(markers);\n              setOriginalMarkers(response[2]);\n            } else if (response[0].execute_area == false) setRenderArea(false);\n\n            if (response[0].execute_sd_segmentation == true) {\n              console.log(\"Execute segmentation\");\n              setRenderSegmentation(true);\n              segmentationInput();\n            } else if (response[0].execute_sd_segmentation == false) setRenderSegmentation(false);\n\n            if (response[0].execute_cell_type_identification == true) {\n              var _markers = response[1];\n              setRenderMasking(true);\n              maskingInput(_markers);\n              console.log(\"RENDER SOMETHING\");\n            } else if (response[0].execute_cell_type_identification == false) {\n              setRenderMasking(false);\n              setMaskingTextBox(\"\");\n            }\n\n            if (response[0].execute_intensity == true) {\n              setRenderIntensity(true);\n              intensityInput();\n            } else if (response[0].execute_intensity == false) setRenderIntensity(false);\n\n            if (response[0].execute_measure_cell_areas == true) {\n              setRenderCellArea(true);\n              cellAreaInput();\n            } else if (response[0].execute_measure_cell_areas == false) setRenderCellArea(false);\n\n            if (response[0].execute_cell_clustering == true) {\n              console.log(\"RENDER SOMETHING\");\n            }\n\n            if (response[0].execute_cell_thresholding == true) {\n              console.log(\"RENDER SOMETHING\");\n            }\n\n            if (response[0].execute_homotypic_interactions == true) {\n              console.log(\"RENDER SOMETHING\");\n            }\n\n            if (response[0].execute_heterotypic_interactions == true) {\n              console.log(\"RENDER SOMETHING\");\n            }\n\n            if (response[0].execute_permuted_interactions == true) {\n              console.log(\"RENDER SOMETHING\");\n            }\n          }\n        });\n      },\n      //Function which makes a request call to the backend\n      submitMetadata: function submitMetadata() {\n        console.log(\"SUBMIT METADATA\");\n        console.log(maskTemp[\"thresholdValue\"]);\n\n        if (newMask === false) {\n          alert(\"Fill all the fields in cell type identification before proceeding\");\n        } else if (typeof maskTemp[\"thresholdValue\"] == \"string\" && maskTemp[\"thresholdValue\"] != \"NA\" || typeof maskTemp[\"thresholdValue\"] != \"string\" && maskTemp[\"thresholdValue\"] < 0 || maskTemp[\"thresholdValue\"] > 1) {\n          alert(\"Only values between 0-1 or NA are accepted in threshold value textbox\");\n        } else {\n          //store the parameters for segmentation to dictionary\n          var segmentingDict = {\n            \"model\": model,\n            \"probThreshold\": probTreshold,\n            \"overlapThreshold\": overlapThreshold\n          };\n          var url = '/submitMetadata'; //url for the request\n          //send data to backend\n\n          axios.post(url, {\n            \"markers\": markersDict,\n            \"segmentingSettings\": segmentingDict,\n            \"masks\": maskDict,\n            \"intensityCellType\": intensityCellType,\n            \"cellAreaList\": cellAreaList\n          }) //Handle the response\n          .then(function (response) {\n            if (response.data == \"error\") {\n              //If error\n              console.log(\"########ERROR########\");\n            } else {\n              //IF everyting okay\n              console.log(\"READY\");\n            }\n          });\n          document.getElementById(\"metadataPage\").style.display = \"none\";\n          document.getElementById(\"resultsPage\").style.display = \"block\";\n          document.getElementById(\"returnButton2\").style.display = \"none\";\n          document.getElementById(\"nextButton3\").style.display = \"none\"; //Display load element\n\n          document.getElementById('load').style.display = 'block'; //This axios request sends request to /run url, from where the image analysis pipeline is executed\n\n          var url2 = '/run';\n          axios.post(url2, \"RUN\").then(function (response) {\n            if (response.data == \"error\") {\n              //If error\n              console.log(\"########ERROR########\");\n              console.log(\"ERROR IN AXIOS CALL\"); //alert(\"Error when performing the analysis, please check your input files and try again.\")\n\n              document.getElementById('load').style.display = 'none';\n            } else {\n              //IF everyting okay\n              console.log(\"Analysis ready\"); //Display results page for user\n\n              document.getElementById('load').style.display = 'none';\n              document.getElementById('results').style.display = 'block';\n            }\n          });\n        }\n      }\n    };\n  }); // ################################################## Metadata for positive marker area measurements #################################################################################\n\n  var allMarkersChecked = function allMarkersChecked(markers) {\n    console.log(\"ORIGINAL MARKERS\", markers);\n    setMarkersDict(markers);\n    var count = -1; //let markers = originalMarkers //Using a temp list because the state variable doesn't update immediately \n\n    console.log(markers);\n    console.log(\"MARKERS LENGTH : \", Object.keys(markers).length);\n    setMarkerKeyCounter(Object.keys(markers).length);\n    setMarkerTextBox(Object.entries(markers).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          index = _ref2[1];\n\n      var obj = markers[key];\n      console.log(obj);\n      var marker = Object.keys(obj)[0];\n      console.log(marker); //if(marker in originalMarkers){//THis doesn't work because the marker is located in 0:{marker:mainMarker}\n\n      console.log(\"INCLUDES\");\n      count = count + 1;\n      var id = \"marker\" + count;\n      setCounter(count);\n      console.log(count);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        id: id,\n        value: marker,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 28\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-1\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: id,\n        value: marker,\n        disabled: true,\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-2\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        name: id,\n        value: marker,\n        disabled: true,\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-3\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return removeMarker(count);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 29\n        }\n      }, \"Remove\")));\n    }));\n  };\n\n  var addMarkers = function addMarkers(event) {\n    console.log(markersDict);\n    console.log(counter); //Disables element after new one is added\n\n    if (Object.keys(markersDict).includes(counter.toString())) {\n      var name = \"marker\" + counter;\n      console.log(name);\n      document.getElementsByName(name).forEach(function (e) {\n        e.disabled = true;\n      });\n    }\n\n    var count = counter + 1;\n    var id = \"marker\" + count;\n    setMarkerTextBox([].concat(_toConsumableArray(markerTextBox), [/*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      id: id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: id,\n      onBlur: function onBlur(event) {\n        return handleChangeMarker(id, event, \"marker\");\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      name: id,\n      onBlur: function onBlur(event) {\n        return handleChangeMarker(id, event, \"mainMarker\");\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: markerTextBox.length === 0,\n      onClick: function onClick() {\n        return removeMarker(id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 17\n      }\n    }, \"Remove\")))]));\n    setCounter(count);\n  };\n\n  var removeMarker = function removeMarker(id) {\n    var key = document.getElementById(id).getAttribute(\"value\");\n    delete markersDict[key];\n    document.getElementById(id).remove();\n  };\n\n  var handleChangeMarker = function handleChangeMarker(id, event, input) {\n    setMarkerKeyCounter(markerKeyCounter + 1); //Update the counter\n    //Checks what is the input of the function and stores the input to a dictionary \n\n    if (input === \"marker\") {\n      var inputError = validateMarker(event.target.value);\n      console.log(inputError);\n\n      if (inputError === true) {\n        alert(\"Error in marker input: There is no marker \" + event.target.value + \" in the data\");\n      } else {\n        markerTemp = _objectSpread({}, markerTemp, {\n          marker: event.target.value\n        });\n      }\n    } else if (input === \"mainMarker\") {\n      var _inputError = validateMarker(event.target.value);\n\n      if (_inputError === false) {\n        markerTemp = _objectSpread({}, markerTemp, {\n          mainMarker: event.target.value\n        });\n      } else {\n        alert(\"Error in main marker input: There is no marker \" + event.target.value + \" in the data\");\n      }\n    }\n\n    var exists = false; //After the temp dictionary is filled store the properties to the main dictionary\n\n    if (Object.values(markerTemp).filter(function (x) {\n      return x === \"\";\n    }).length === 0) {\n      console.log(\"OBJECT ENTRIES\");\n      Object.entries(markersDict).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            key = _ref4[0],\n            value = _ref4[1];\n\n        if (Object.keys(value)[0] === markerTemp[\"marker\"] && Object.values(value)[0] === markerTemp[\"mainMarker\"]) {\n          exists = true;\n        }\n      });\n\n      if (exists === true) {\n        alert([markerTemp[\"marker\"]] + \" : \" + markerTemp[\"mainMarker\"] + \" already exists, please change the input\");\n      } else {\n        setMarkersDict(_objectSpread({}, markersDict, _defineProperty({}, markerKeyCounter, _defineProperty({}, markerTemp[\"marker\"], markerTemp[\"mainMarker\"]))));\n      }\n    }\n  };\n\n  function validateMarker(marker) {\n    var inputMarkers = [];\n    console.log(\"INPUMarker\", marker);\n    var regex = /^[a-zA-Z0-9!&|]+$/;\n    var inputError = false;\n\n    if (!marker.match(regex)) {\n      alert(\"Error in input: Only letters, numbers and logical operators (!&|) are accepted.\");\n    } else {\n      console.log(\"VALIDATE\"); //Checks the logical operators the user inputted\n\n      if (marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")) {\n        inputMarkers = marker.split(/[&!|]+/); //Makes a list of the markers\n      } else {\n        //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n        inputMarkers.push(marker);\n      } //Loop that checks the user inputted a marker that that the tiff-images have\n\n\n      for (var elem in inputMarkers) {\n        console.log(elem); //If the marker is in the data returns false otherwise returns inputError true\n\n        if (originalMarkers.includes(inputMarkers[elem])) {\n          inputError = false;\n        } else {\n          inputError = true;\n          break;\n        }\n      }\n    }\n\n    return inputError;\n  } // #################################################################### Settings for segmentation ################################################################################\n\n\n  var segmentationInput = function segmentationInput() {\n    console.log(\"SEGMENTATION\");\n    setModelDropDown( /*#__PURE__*/React.createElement(\"div\", {\n      class: \"dropbox\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: \"model\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 13\n      }\n    }, \"Choose stardist model: \"), /*#__PURE__*/React.createElement(\"select\", {\n      name: \"model\",\n      id: \"model\",\n      onChange: function onChange(event) {\n        return handleChangeSelectModel(event);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      selected: \"true\",\n      disabled: \"disabled\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 17\n      }\n    }, \"Select\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"HuNu\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 17\n      }\n    }, \"HuNu_model\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"TH\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 17\n      }\n    }, \"TH_model\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"ChAT\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 17\n      }\n    }, \"ChAT_model\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"LMX\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 17\n      }\n    }, \"LMX_model\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"2D_versatile_fluo\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 17\n      }\n    }, \"2D_versatile_fluo\"))));\n  };\n\n  var handleChangeSelectModel = function handleChangeSelectModel(event) {\n    var selectedModel = event.target.value;\n    setModel(selectedModel);\n\n    if (selectedModel === \"HuNu\") {\n      setProbThreshold(\"0.6\");\n      setOverlapThreshold(\"0.3\");\n    } else if (selectedModel === \"TH\") {\n      setProbThreshold(\"0.5\");\n      setOverlapThreshold(\"0.5\");\n    } else if (selectedModel === \"ChAT\") {\n      setProbThreshold(\"0.4\");\n      setOverlapThreshold(\"0.4\");\n    } else if (selectedModel === \"LMX\") {\n      setProbThreshold(\"0.6\");\n      setOverlapThreshold(\"0.15\");\n    } else if (selectedModel === \"2D_versatile_fluo\") {\n      setProbThreshold(\"0.6\");\n      setOverlapThreshold(\"0.4\");\n    }\n\n    console.log(\"MODEL :\", selectedModel);\n  }; // ################################################################### Metadata for cell identification #####################################################################################\n\n\n  var maskingInput = function maskingInput(markers) {\n    if (maskingTextBox == 0) {\n      var mask_id = \"maskInput_\" + maskCounter;\n      var value_id = \"value_\" + maskCounter;\n      console.log(mask_id);\n      options = [/*#__PURE__*/React.createElement(\"option\", {\n        value: \"Select\",\n        selected: \"true\",\n        disabled: \"disabled\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 24\n        }\n      }, \"Select\")];\n      Object.entries(markers).map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            key = _ref6[0],\n            index = _ref6[1];\n\n        console.log(Object.keys(markers[key])[0]);\n        options.push( /*#__PURE__*/React.createElement(\"option\", {\n          value: Object.keys(markers[key])[0],\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 30\n          }\n        }, Object.keys(markers[key])[0]));\n      });\n      console.log(\"OPTIONS : \", options);\n      setMarkerOptions(options);\n      setMaskingTextBox(Object.entries(maskingTextBox + 1).map(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            key = _ref8[0],\n            index = _ref8[1];\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          class: \"row\",\n          id: mask_id,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-1\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 29\n          }\n        }, \"Cell type\"), /*#__PURE__*/React.createElement(\"input\", {\n          name: mask_id,\n          onChange: function onChange(event) {\n            return handleChangeMask(mask_id, event, \"cellType\", \"add\");\n          },\n          size: \"10\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-2\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 29\n          }\n        }, \"Marker\"), /*#__PURE__*/React.createElement(\"select\", {\n          name: mask_id,\n          id: \"colorSelector\",\n          onChange: function onChange(event) {\n            return handleChangeMask(mask_id, event, \"thresholdMarker\", \"add\");\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 29\n          }\n        }, options)), /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-3\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 29\n          }\n        }, \"Threshold value\"), /*#__PURE__*/React.createElement(\"input\", {\n          id: value_id,\n          name: mask_id,\n          onChange: function onChange(event) {\n            return handleChangeMask(mask_id, event, \"thresholdValue\", \"add\");\n          },\n          size: \"10\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          class: \"col-4\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 29\n          }\n        }, \"Color\"), /*#__PURE__*/React.createElement(\"select\", {\n          name: mask_id,\n          id: \"colorSelector\",\n          onChange: function onChange(event) {\n            return handleChangeMask(mask_id, event, \"color\", \"add\");\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"option\", {\n          value: \"Select\",\n          selected: \"true\",\n          disabled: \"disabled\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 33\n          }\n        }, \"Select\"), /*#__PURE__*/React.createElement(\"option\", {\n          value: \"red\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 33\n          }\n        }, \"Red\"), /*#__PURE__*/React.createElement(\"option\", {\n          value: \"blue\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 33\n          }\n        }, \"Blue\"), /*#__PURE__*/React.createElement(\"option\", {\n          value: \"yellow\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 33\n          }\n        }, \"Yellow\"), /*#__PURE__*/React.createElement(\"option\", {\n          value: \"green\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 33\n          }\n        }, \"Green\"), /*#__PURE__*/React.createElement(\"option\", {\n          value: \"purple\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 33\n          }\n        }, \"Purple\"), /*#__PURE__*/React.createElement(\"option\", {\n          value: \"orange\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 33\n          }\n        }, \"Orange\"))));\n      }));\n    }\n  };\n\n  var addMasks = function addMasks(event) {\n    console.log(maskTemp[\"thresholdValue\"]);\n    console.log(typeof maskTemp[\"thresholdValue\"]);\n    console.log(maskTemp);\n    console.log(newMask);\n\n    if (newMask === false) {\n      alert(\"Fill all the fields before adding new cell type\");\n    } else if (maskTemp[\"thresholdValue\"] != \"NA\" || maskTemp[\"thresholdValue\"] < 0 || maskTemp[\"thresholdValue\"] > 1) {\n      alert(\"Only values between 0-1 or NA are accepted in threshold value textbox\");\n    } else {\n      setNewMask(false);\n      console.log(maskCounter);\n      console.log(\"maskInput_\" + maskCounter); //document.getElementById(\"maskInput_\"+maskCounter).setAttribute(\"disabled\",\"\")\n      // document.getElementsByName(\"mask0\").setAttribute(\"disabled\", \"disabled\")\n      //This is a bit in a wrong place, the last row is never disabled\n      //Disables element after new one is added\n\n      /*if(Object.keys(maskDict).includes(maskCounter.toString())){\n          let name = \"mask\" + maskCounter\n          document.getElementsByName(name).forEach(e => {\n              e.disabled = true\n          })        \n      }*/\n      //if(Object.keys(maskDict).includes(maskCounter.toString())){\n\n      var name = \"maskInput_\" + maskCounter;\n      document.getElementsByName(name).forEach(function (e) {\n        e.disabled = true;\n      }); //}\n      //let mask_id = \"maskInput_\" + maskCounter\n\n      var count = maskCounter + 1;\n      var mask_id = \"maskInput_\" + count;\n      var value_id = \"value_\" + count;\n      setMaskCounter(count);\n      setMaskingTextBox([].concat(_toConsumableArray(maskingTextBox), [/*#__PURE__*/React.createElement(\"div\", {\n        class: \"row\",\n        id: mask_id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-1\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 21\n        }\n      }, \"Cell type\"), /*#__PURE__*/React.createElement(\"input\", {\n        name: mask_id,\n        onChange: function onChange(event) {\n          return handleChangeMask(mask_id, event, \"cellType\", \"add\");\n        },\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-2\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 17\n        }\n      }, \"Marker\"), /*#__PURE__*/React.createElement(\"select\", {\n        name: mask_id,\n        id: \"colorSelector\",\n        onChange: function onChange(event) {\n          return handleChangeMask(mask_id, event, \"thresholdMarker\", \"add\");\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 21\n        }\n      }, markerOptions)), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-3\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 21\n        }\n      }, \"Threshold value\"), /*#__PURE__*/React.createElement(\"input\", {\n        id: value_id,\n        name: mask_id,\n        disabled: Object.keys(maskDict).includes(maskKeyCounter - 1),\n        onBlur: function onBlur(event) {\n          return handleChangeMask(mask_id, event, \"thresholdValue\", \"add\");\n        },\n        size: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        class: \"col-4\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 21\n        }\n      }, \"Color\"), /*#__PURE__*/React.createElement(\"select\", {\n        name: mask_id,\n        disabled: Object.keys(maskDict).includes(maskKeyCounter - 1),\n        id: \"colorSelector\",\n        onChange: function onChange(event) {\n          return handleChangeMask(mask_id, event, \"color\", \"add\");\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"Select\",\n        selected: \"true\",\n        disabled: \"disabled\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 37\n        }\n      }, \"Select\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"red\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 37\n        }\n      }, \"Red\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"blue\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 37\n        }\n      }, \"Blue\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"yellow\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 37\n        }\n      }, \"Yellow\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"green\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 37\n        }\n      }, \"Green\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"purple\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 37\n        }\n      }, \"Purple\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"orange\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 37\n        }\n      }, \"Orange\"))))]));\n    }\n  };\n\n  var handleChangeMask = function handleChangeMask(id, event, input, call) {\n    console.log(\"MASK LENGTH : \", Object.values(maskTemp).filter(function (x) {\n      return x === \"\";\n    }).length);\n    setMaskKeyCounter(maskKeyCounter + 1); //console.log(\"MaskKeyCounter,\" , maskKeyCounter)\n    //Makes sure that all the fields are filled before adding new cell type\n\n    if (Object.values(maskTemp).filter(function (x) {\n      return x === \"\";\n    }).length === 0) {\n      //counts the number of empty values\n      setNewMask(true);\n    } //Checks what is the input of the function and stores the input to dictionary to right location\n\n\n    if (input === \"cellType\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        cellType: event.target.value\n      });\n    } else if (input === \"thresholdMarker\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        thresholdMarker: event.target.value\n      });\n    } else if (input === \"thresholdValue\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        thresholdValue: event.target.value\n      });\n    } else if (input === \"color\") {\n      maskTemp = _objectSpread({}, maskTemp, {\n        color: event.target.value\n      });\n    }\n\n    console.log(maskTemp);\n    console.log(maskDict); //After the temp dictionary is filled store the properties to the main dictionary\n\n    if (call == \"add\") {\n      if (Object.values(maskTemp).filter(function (x) {\n        return x === \"\";\n      }).length === 0) {\n        setMaskDict(_objectSpread({}, maskDict, _defineProperty({}, maskKeyCounter, [{\n          cell_type: maskTemp[\"cellType\"]\n        }, {\n          threshold_marker: maskTemp[\"thresholdMarker\"]\n        }, {\n          threshold_value: maskTemp[\"thresholdValue\"]\n        }, {\n          color: maskTemp[\"color\"]\n        }])));\n      }\n    } else if (call == \"reset\") {\n      if (Object.values(maskTemp).filter(function (x) {\n        return x === \"\";\n      }).length === 0) {\n        setMaskDict(_defineProperty({}, maskKeyCounter, [{\n          cell_type: maskTemp[\"cellType\"]\n        }, {\n          threshold_marker: maskTemp[\"thresholdMarker\"]\n        }, {\n          threshold_value: maskTemp[\"thresholdValue\"]\n        }, {\n          color: maskTemp[\"color\"]\n        }]));\n      }\n    }\n  }; //Removes the mask metadata input field and the corresponding property from the dictionary\n\n\n  var resetMask = function resetMask() {\n    //document.getElementsByName(\"mask0\").value = \"\"\n    //document.getElementsByName(\"mask0\").removeAttribute(\"disabled\")\n    //document.getElementById(\"maskInput_0\").disabled = false\n    //if(Object.keys(maskDict).includes(maskCounter.toString())){\n    var name = \"maskInput_\" + 0;\n    document.getElementsByName(name).forEach(function (e) {\n      console.log(e);\n      e.disabled = false;\n      e.value = \"\";\n    }); //}\n\n    setMaskDict([{}]);\n    setMaskCounter(0);\n    var mask_id = \"maskInput_0\";\n    var value_id = \"value_0\"; //setMaskngTextBox(Object.entries(maskingTextBox+1).map(([key,index]) => {\n\n    setMaskingTextBox([/*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      id: mask_id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-1\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 25\n      }\n    }, \"Cell type\"), /*#__PURE__*/React.createElement(\"input\", {\n      name: mask_id,\n      onChange: function onChange(event) {\n        return handleChangeMask(mask_id, event, \"cellType\", \"reset\");\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 25\n      }\n    }, \"Marker\"), /*#__PURE__*/React.createElement(\"select\", {\n      name: mask_id,\n      id: \"colorSelector\",\n      onChange: function onChange(event) {\n        return handleChangeMask(mask_id, event, \"thresholdMarker\", \"reset\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 25\n      }\n    }, options)), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 25\n      }\n    }, \"Threshold value\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: value_id,\n      name: mask_id,\n      onChange: function onChange(event) {\n        return handleChangeMask(mask_id, event, \"thresholdValue\", \"reset\");\n      },\n      size: \"10\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"col-4\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 25\n      }\n    }, \"Color\"), /*#__PURE__*/React.createElement(\"select\", {\n      name: mask_id,\n      id: \"colorSelector\",\n      onChange: function onChange(event) {\n        return handleChangeMask(mask_id, event, \"color\", \"reset\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"Select\",\n      selected: \"true\",\n      disabled: \"disabled\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 29\n      }\n    }, \"Select\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"red\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 29\n      }\n    }, \"Red\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"blue\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 29\n      }\n    }, \"Blue\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"yellow\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 29\n      }\n    }, \"Yellow\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"green\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 29\n      }\n    }, \"Green\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"purple\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 29\n      }\n    }, \"Purple\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"orange\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 29\n      }\n    }, \"Orange\"))))]);\n  };\n\n  console.log(analysisReady); //#################################################################### Input for cell intensity measurements ######################################################################################\n\n  var intensityInput = function intensityInput() {\n    setIntensityTb( /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      for: \"intensity\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702,\n        columnNumber: 13\n      }\n    }, \"Cell type: \"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"intensity\",\n      size: \"10\",\n      onChange: function onChange(event) {\n        return handleChangeIntensity(event);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 13\n      }\n    })));\n  };\n\n  var handleChangeIntensity = function handleChangeIntensity(event) {\n    setIntensityCellType(event.target.value);\n    console.log(event.target.value);\n  };\n\n  var cellAreaInput = function cellAreaInput() {\n    //let counter = cellAreaCounter + 1\n    var area_id = \"cellAreaInput_\" + cellAreaCounter; //setCellAreaCounter(counter)\n\n    if (Object.keys(cellAreaTb).length === 0) {\n      setCellAreaTb([].concat(_toConsumableArray(cellAreaTb), [/*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 42\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        for: area_id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 17\n        }\n      }, \"Cell type(s) to measure: \"), /*#__PURE__*/React.createElement(\"input\", {\n        id: area_id,\n        size: \"10\",\n        onChange: function onChange(event) {\n          return handleChangeCellArea(event, \"add\");\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 17\n        }\n      }))]));\n    }\n  }; //######################################################################## Input for cell area measurements ###########################################################################\n\n\n  var handleChangeCellArea = function handleChangeCellArea(event, call) {\n    if (!cellAreaList.includes(event.target.value) & call != \"reset\") {\n      setCellAreaList([].concat(_toConsumableArray(cellAreaList), [event.target.value]));\n    } else if (call == \"reset\") {\n      setCellAreaList([event.target.value]);\n    }\n  };\n\n  var resetCellArea = function resetCellArea() {\n    document.getElementById(\"cellAreaInput_0\").value = \"\";\n    document.getElementById(\"cellAreaInput_0\").removeAttribute(\"disabled\");\n    setCellAreaList([]);\n    setCellAreaCounter(0);\n    setCellAreaTb([/*#__PURE__*/React.createElement(\"div\", {\n      id: \"firstArea\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      for: \"cellAreaInput_0\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749,\n        columnNumber: 13\n      }\n    }, \"Cell type(s) to measure: \"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"cellAreaInput_0\",\n      size: \"10\",\n      onChange: function onChange(event) {\n        return handleChangeCellArea(event, \"reset\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 13\n      }\n    }))]);\n  };\n\n  var addCells = function addCells(event) {\n    //setCellAreaTb()\n    console.log(cellAreaList);\n    document.getElementById(\"cellAreaInput_\" + cellAreaCounter).setAttribute(\"disabled\", \"disabled\");\n    var counter = cellAreaCounter + 1;\n    var area_id = \"cellAreaInput_\" + counter;\n    setCellAreaCounter(counter);\n    setCellAreaTb([].concat(_toConsumableArray(cellAreaTb), [/*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 768,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      for: \"cellArea\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 770,\n        columnNumber: 21\n      }\n    }, \"Cell type(s) to measure: \"), /*#__PURE__*/React.createElement(\"input\", {\n      id: area_id,\n      size: \"10\",\n      onChange: function onChange(event) {\n        return handleChangeCellArea(event, \"add\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771,\n        columnNumber: 21\n      }\n    }))]));\n  };\n\n  var showInstructions = function showInstructions(arg1, arg2, arg3) {\n    //setInfo()\n    console.log(arg1, arg2, arg3);\n    document.getElementById(arg1).style.display = \"block\";\n    document.getElementById(arg2).style.display = \"none\";\n    document.getElementById(arg3).style.display = \"block\";\n  };\n\n  var hideInstructions = function hideInstructions(arg1, arg2, arg3) {\n    document.getElementById(arg1).style.display = \"none\";\n    document.getElementById(arg2).style.display = \"block\";\n    document.getElementById(arg3).style.display = \"none\";\n  }; //############################################################################# HTML form to be rendered ###############################################################################################\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 800,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    class: \"metadataForm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 801,\n      columnNumber: 13\n    }\n  }, renderArea ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 804,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 805,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 806,\n      columnNumber: 25\n    }\n  }, \"Measurement of positive-marker areas\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 807,\n      columnNumber: 26\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 809,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 810,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 811,\n      columnNumber: 37\n    }\n  }, \"Marker\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 813,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 814,\n      columnNumber: 37\n    }\n  }, \"Main marker\"))), markerTextBox, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addMarkers,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 818,\n      columnNumber: 25\n    }\n  }, \"Add markers\"))) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 823,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 824,\n      columnNumber: 17\n    }\n  }), renderSegmentation ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 827,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 828,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 829,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 830,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 831,\n      columnNumber: 33\n    }\n  }, \"Cell segmentation\")), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 833,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"infoBtnSegment\",\n    class: \"btn-instructions2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 834,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return showInstructions(\"instructionsSegment\", \"infoBtnSegment\", \"hideInfoBtnSegment\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 835,\n      columnNumber: 37\n    }\n  }, \"Info\")), /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"hideInfoBtnSegment\",\n    class: \"btn-instructions2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 837,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return hideInstructions(\"instructionsSegment\", \"infoBtnSegment\", \"hideInfoBtnSegment\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 838,\n      columnNumber: 37\n    }\n  }, \"Hide info\")))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 842,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 844,\n      columnNumber: 21\n    }\n  }, modelDropDown), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 847,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 848,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 849,\n      columnNumber: 29\n    }\n  }, \"Probability threshold\"), /*#__PURE__*/React.createElement(\"input\", {\n    value: probTreshold,\n    onChange: function onChange(e) {\n      return setProbThreshold(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 850,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"col-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 852,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 853,\n      columnNumber: 29\n    }\n  }, \"Overlap threshold\"), /*#__PURE__*/React.createElement(\"input\", {\n    value: overlapThreshold,\n    onChange: function onChange(e) {\n      return setOverlapThreshold(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 854,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"instructionsSegment\",\n    class: \"textarea-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 857,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    disabled: true,\n    readonly: true,\n    rows: \"20\",\n    cols: \"50\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 858,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 859,\n      columnNumber: 29\n    }\n  }, \"Instructions:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 859,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 859,\n      columnNumber: 54\n    }\n  })), /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 860,\n      columnNumber: 29\n    }\n  }, \"Choose StarDist model: \"), \"Model to be used in cell segmentation.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 860,\n      columnNumber: 97\n    }\n  }), /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 861,\n      columnNumber: 29\n    }\n  }, \"Probability threshold: \"), \"Higher values leads to fewer segmented objects, but will likely avoid false positives.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 861,\n      columnNumber: 145\n    }\n  }), /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 862,\n      columnNumber: 29\n    }\n  }, \"Overlap threshold: \"), \"Higher values allow segmented objects to overlap substantially.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 862,\n      columnNumber: 118\n    }\n  }))))) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 872,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 873,\n      columnNumber: 17\n    }\n  }), renderMasking ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 876,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 877,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 878,\n      columnNumber: 25\n    }\n  }, \"Cell type identification\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 879,\n      columnNumber: 25\n    }\n  }), maskingTextBox, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addMasks,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 882,\n      columnNumber: 25\n    }\n  }, \"New cell type\"), \"\\xA0\\xA0\\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return resetMask();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 883,\n      columnNumber: 25\n    }\n  }, \"Reset\"))) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 891,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 892,\n      columnNumber: 17\n    }\n  }), renderIntensity ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 895,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 896,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 897,\n      columnNumber: 25\n    }\n  }, \"Pixel intensity measurement between groups\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 898,\n      columnNumber: 25\n    }\n  }), intensityTb)) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 907,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 908,\n      columnNumber: 17\n    }\n  }), renderCellArea ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 911,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 912,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 913,\n      columnNumber: 25\n    }\n  }, \"Cell area measurements\"), cellAreaTb, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addCells,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 916,\n      columnNumber: 25\n    }\n  }, \"Add new\"), \"\\xA0\\xA0\\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: function onClick() {\n      return resetCellArea();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 917,\n      columnNumber: 25\n    }\n  }, \"Reset\"))) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 926,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 927,\n      columnNumber: 13\n    }\n  })));\n});\nexport default GetMetadata; //<div>{allMarkers && <p>Loading...</p>}</div>#setAllMarkes(!allMarkers);","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","useRef","axios","options","maskTemp","cellType","thresholdMarker","thresholdValue","NA","color","GetMetadata","props","ref","renderArea","setRenderArea","renderSegmentation","setRenderSegmentation","renderMasking","setRenderMasking","renderIntensity","setRenderIntensity","renderCellArea","setRenderCellArea","intensityTb","setIntensityTb","allMarkers","setAllMarkes","markersDict","setMarkersDict","counter","setCounter","markerKeyCounter","setMarkerKeyCounter","markerTemp","marker","mainMarker","maskCounter","setMaskCounter","maskKeyCounter","setMaskKeyCounter","cellAreaCounter","setCellAreaCounter","newMask","setNewMask","inputFields","analysisReady","setAnalysisReady","markerOptions","setMarkerOptions","originalMarkers","setOriginalMarkers","markerTextBox","setMarkerTextBox","modelDropDown","setModelDropDown","model","setModel","segmentationSettings","setSegmentationSettings","probTreshold","setProbThreshold","overlapThreshold","setOverlapThreshold","maskingTextBox","setMaskingTextBox","maskDict","setMaskDict","errorMessageArea","setErrorMessageArea","intensityCellType","setIntensityCellType","cellAreaTb","setCellAreaTb","cellAreaList","setCellAreaList","getProcesses","getData","url","method","response","data","console","log","then","prop","hasOwnProperty","instrument","alert","execute_sd_segmentation","execute_cell_type_identification","execute_intensity","execute_measure_cell_areas","execute_cell_clustering","execute_cell_thresholding","execute_homotypic_interactions","execute_heterotypic_interactions","execute_permuted_interactions","document","getElementById","style","display","execute_area","markers","allMarkersChecked","segmentationInput","maskingInput","intensityInput","cellAreaInput","submitMetadata","segmentingDict","post","url2","count","Object","keys","length","entries","map","key","index","obj","id","removeMarker","addMarkers","event","includes","toString","name","getElementsByName","forEach","e","disabled","handleChangeMarker","getAttribute","remove","input","inputError","validateMarker","target","value","exists","values","filter","x","inputMarkers","regex","match","split","push","elem","handleChangeSelectModel","selectedModel","mask_id","value_id","handleChangeMask","addMasks","call","cell_type","threshold_marker","threshold_value","resetMask","handleChangeIntensity","area_id","handleChangeCellArea","resetCellArea","removeAttribute","addCells","setAttribute","showInstructions","arg1","arg2","arg3","hideInstructions"],"sources":["/home/ernohanninen/simpli_project/App/src/getMetadata.js"],"sourcesContent":["import React,  { useState, forwardRef, useImperativeHandle, useRef } from 'react';\nimport axios from \"axios\";\nimport './App.css';\n\n\n\n\n\n\n\n//If no markers prevent user to go forward add new textbox\n//able user input non unique markers\n//adding custom markers doesn't work\n//Add random color generator for mask input\n//Using boolean it should be possible to check wether the input is filled before adding more mask metadata\n//If there is no marker the axios posts still sends data\n//Even if the area is unchecked the axios posts the data that is submitted on the main page (CHECK THAT THIS IS FIXED)\n//Delete existing marker from marker list\n\n//Check that the colors for cell_masking_metadata are okay\nvar options = []\nvar maskTemp = ({cellType:\"\", thresholdMarker:\"\", thresholdValue:NA, color:\"\"})\n\n\nconst GetMetadata = forwardRef((props, ref)=>{\n\n    const [renderArea, setRenderArea] = useState(false)\n    const [renderSegmentation, setRenderSegmentation] = useState(false)\n    const [renderMasking, setRenderMasking] = useState(false)\n    const [renderIntensity, setRenderIntensity] = useState(false)\n    const [renderCellArea, setRenderCellArea] = useState(false)\n    const [intensityTb, setIntensityTb] = useState(\"\")\n    const [allMarkers, setAllMarkes]  = useState(false)\n    const [markersDict, setMarkersDict] = useState([{}])\n    const [counter, setCounter] = useState(0)\n    const [markerKeyCounter, setMarkerKeyCounter] = useState(0)\n    let markerTemp = ({marker:\"\", mainMarker:\"\"})\n    const [maskCounter, setMaskCounter] = useState(0)\n    const [maskKeyCounter, setMaskKeyCounter] = useState(0)\n    const [cellAreaCounter, setCellAreaCounter] = useState(0)\n    \n    const [newMask, setNewMask] = useState(false)\n    let inputFields = []\n    const [analysisReady, setAnalysisReady] = useState(\"\")\n\n    const[markerOptions, setMarkerOptions] = useState(\"\")\n    const [originalMarkers, setOriginalMarkers] = useState([]) //This list keeps in track about the markers that the user inputted\n    const [markerTextBox, setMarkerTextBox] = useState(\"\")\n    const [modelDropDown, setModelDropDown] = useState(\"\")\n    const [model, setModel] = useState(\"\")\n    const [segmentationSettings, setSegmentationSettings] = useState(\"\")\n    const [probTreshold, setProbThreshold] = useState(\"\")\n    const [overlapThreshold, setOverlapThreshold] = useState(\"\")\n    const [maskingTextBox, setMaskingTextBox] = useState(\"\")\n    const [maskDict, setMaskDict] = useState([{}])\n    const [errorMessageArea, setErrorMessageArea] = useState(\"\")\n    const [intensityCellType, setIntensityCellType] = useState(\"\")\n    const [cellAreaTb, setCellAreaTb] = useState([])\n    const [cellAreaList, setCellAreaList] = useState([])\n\n    useImperativeHandle(ref, ()=>({\n        //THis axios call is used to get the processes to run\n        getProcesses(){\n            async function getData(){\n                try {\n                    let response = await axios({\n                        url: \"/getSettings\",\n                        method: \"get\"\n                    })\n\n                    return response.data\n                }\n                catch(err){\n                    console.log(err)\n                }\n            }\n           \n            getData()\n            //If no error parse the response\n            .then(function(response){\n                //Parse values from response data to boolean format\n                for (let prop in response[0]) {\n                    if (response[0].hasOwnProperty(prop)) {\n                        response[0][prop] = (response[0][prop] == 'true' || response[0][prop] == 'false')? response[0][prop] === 'true': response[0][prop] ;\n                    }\n                } \n                //Check that all the processes which are dependent on each other is checked\n                //Alert user if some of the required processes is not checked\n                if(response[0].instrument == \"\"){\n                    alert(\"Select source of images\")\n                }\n                else if(response[0].execute_sd_segmentation == false || response[0].execute_cell_type_identification == true && response[0].execute_intensity == true && response[0].execute_measure_cell_areas == true && response[0].execute_cell_clustering == true && response[0].execute_cell_thresholding == true && response[0].execute_homotypic_interactions == true && response[0].execute_heterotypic_interactions == true && response[0].execute_permuted_interactions == true){\n                    alert(\"To run cell-based analysis, check image segmentation\")\n                }\n                else if(response[0].execute_cell_clustering == false && response[0].execute_cell_thresholding == true || response[0].execute_homotypic_interactions == true || response[0].execute_heterotypic_interactions == true || response[0].execute_permuted_interactions == true){\n                    alert(\"To run cell clustering, check cell type identification\")\n                }\n                else if(response[0].execute_cell_thresholding == false && response[0].execute_homotypic_interactions == true || response[0].execute_heterotypic_interactions == true || response[0].execute_permuted_interactions == true){\n                    alert(\"To run cell thresholding, check cell clustering\")\n                }\n                else if(response[0].execute_cell_thresholding == false && response[0].execute_homotypic_interactions == true){\n                    alert(\"To run homotypic interactions, check cell thresholding\")\n                }\n                else if(response[0].execute_cell_thresholding == false && response[0].execute_heterotypic_interactions == true){\n                    alert(\"To run heterotypic interactions, check cell thresholding\")\n                }\n                else if(response[0].execute_cell_thresholding == false && response[0].execute_permuted_interactions == true){\n                    alert(\"To run permuted interactions, check cell thresholding\")\n                }\n                //If the processes were correct display the getMetadata page and hide the getSettings page\n                else{\n                    document.getElementById(\"settingsPage\").style.display= \"none\";\n                    document.getElementById(\"nextButton2\").style.display = \"none\";\n                    document.getElementById(\"returnButton\").style.display = \"none\"\n                    document.getElementById(\"returnButton2\").style.display = \"block\"\n                    document.getElementById(\"nextButton3\").style.display = \"block\"\n                    document.getElementById(\"metadataPage\").style.display = \"block\"\n\n                    //These if statements contols which input fields are rendered. This depdends of the processes to run\n                    if(response[0].execute_area == true){\n                        console.log(\"EXECUTE AREA\")                   \n                        setRenderArea(true)\n                        setMarkerTextBox(\"\")\n                        let markers = response[1] //dictionary of markers\n                        allMarkersChecked(markers)\n                        setOriginalMarkers(response[2])\n                        \n                    }\n                    else if(response[0].execute_area == false)setRenderArea(false)\n                    \n                    if(response[0].execute_sd_segmentation == true){\n                        console.log(\"Execute segmentation\")\n                        setRenderSegmentation(true)\n                        segmentationInput()\n                    }\n                    else if(response[0].execute_sd_segmentation == false)setRenderSegmentation(false)\n                    if(response[0].execute_cell_type_identification == true){\n                        let markers = response[1]\n                        setRenderMasking(true)\n                        maskingInput(markers)\n                        console.log(\"RENDER SOMETHING\")\n                    }\n                    else if(response[0].execute_cell_type_identification == false){\n                        setRenderMasking(false)\n                        setMaskingTextBox(\"\")\n    \n                    }\n\n                    if(response[0].execute_intensity == true){\n                        setRenderIntensity(true)\n                        intensityInput()\n                    }\n                    else if(response[0].execute_intensity == false)setRenderIntensity(false)\n\n                    if(response[0].execute_measure_cell_areas == true){\n                        setRenderCellArea(true)\n                        cellAreaInput()\n                    }\n                    else if(response[0].execute_measure_cell_areas == false)setRenderCellArea(false)\n\n                    if(response[0].execute_cell_clustering == true){\n                        console.log(\"RENDER SOMETHING\")\n                    }\n                    if(response[0].execute_cell_thresholding == true){\n                        console.log(\"RENDER SOMETHING\")\n                    }\n                    if(response[0].execute_homotypic_interactions == true){\n                        console.log(\"RENDER SOMETHING\")\n                    }\n                    if(response[0].execute_heterotypic_interactions == true){\n                        console.log(\"RENDER SOMETHING\")\n                    }\n                    if(response[0].execute_permuted_interactions == true){\n                        console.log(\"RENDER SOMETHING\")\n                    }\n                }\n\n            })\n        },\n\n        //Function which makes a request call to the backend\n        submitMetadata(){\n            console.log(\"SUBMIT METADATA\")\n            console.log(maskTemp[\"thresholdValue\"])\n            if(newMask === false){\n                alert(\"Fill all the fields in cell type identification before proceeding\")\n            }\n            else if((typeof maskTemp[\"thresholdValue\"] == \"string\" && maskTemp[\"thresholdValue\"] != \"NA\") || (typeof maskTemp[\"thresholdValue\"] != \"string\" && maskTemp[\"thresholdValue\"] < 0 || maskTemp[\"thresholdValue\"] > 1)){\n                alert(\"Only values between 0-1 or NA are accepted in threshold value textbox\")\n            }\n            \n            else {\n                 //store the parameters for segmentation to dictionary\n                let segmentingDict = {\"model\" : model, \"probThreshold\": probTreshold, \"overlapThreshold\": overlapThreshold}\n\n                const url = '/submitMetadata'; //url for the request\n                //send data to backend\n                axios.post(url, { \n                    \"markers\": markersDict,\n                    \"segmentingSettings\" : segmentingDict,\n                    \"masks\": maskDict,\n                    \"intensityCellType\" : intensityCellType,\n                    \"cellAreaList\" : cellAreaList\n                    })\n                    //Handle the response\n                    .then((response) =>{\n                        if(response.data==\"error\"){ //If error\n                            console.log(\"########ERROR########\")\n                        }\n                        else{ //IF everyting okay\n                            console.log(\"READY\")\n                        }\n                });   \n                document.getElementById(\"metadataPage\").style.display = \"none\"\n                document.getElementById(\"resultsPage\").style.display = \"block\";  \n                document.getElementById(\"returnButton2\").style.display = \"none\"\n                document.getElementById(\"nextButton3\").style.display = \"none\"\n                //Display load element\n                document.getElementById('load').style.display = 'block';\n\n                //This axios request sends request to /run url, from where the image analysis pipeline is executed\n                const url2 = '/run';\n                axios.post(url2, \"RUN\")\n                    .then((response) =>{\n                        if(response.data==\"error\"){ //If error\n                            console.log(\"########ERROR########\")\n                            console.log(\"ERROR IN AXIOS CALL\")\n                            //alert(\"Error when performing the analysis, please check your input files and try again.\")\n                            document.getElementById('load').style.display = 'none';\n\n                        }\n                        else{ //IF everyting okay\n                            console.log(\"Analysis ready\")\n                            //Display results page for user\n                            document.getElementById('load').style.display = 'none';\n                            document.getElementById('results').style.display = 'block';                   \n                        }\n                });   \n                \n\n            }\n\n              \n        }\n    }))\n\n    // ################################################## Metadata for positive marker area measurements #################################################################################\n\n    const allMarkersChecked = (markers) => {    \n            console.log(\"ORIGINAL MARKERS\", markers)\n            setMarkersDict(markers)\n            let count = -1;\n\n            //let markers = originalMarkers //Using a temp list because the state variable doesn't update immediately \n            console.log(markers)\n            console.log(\"MARKERS LENGTH : \", Object.keys(markers).length)\n            setMarkerKeyCounter(Object.keys(markers).length) \n\n            setMarkerTextBox(Object.entries(markers).map(([key,index]) => {\n                let obj = markers[key]\n                console.log(obj)\n                let marker = Object.keys(obj)[0]\n                console.log(marker)\n                //if(marker in originalMarkers){//THis doesn't work because the marker is located in 0:{marker:mainMarker}\n                    console.log(\"INCLUDES\")\n                    count = count + 1\n                    let id = \"marker\" + count\n                    setCounter(count)  \n\n                    console.log(count)\n                    return(<div class=\"row\" id={id} value={marker}>\n                        <div class=\"col-1\">    \n                            <input name={id} value={marker} disabled size=\"10\"/>                \n                        </div>\n                        <div class=\"col-2\">    \n                            <input name={id} value={marker} disabled size=\"10\"/>                \n                        </div>\n                        <div class=\"col-3\">\n                            <button  onClick={() => removeMarker(count)}>Remove</button>                  \n                        </div>  \n                    </div>)        \n            }\n        ))             \n    }\n\n    const addMarkers = event =>{\n        console.log(markersDict)\n        console.log(counter)\n        //Disables element after new one is added\n        if(Object.keys(markersDict).includes(counter.toString())){\n            let name = \"marker\" + counter\n            console.log(name)\n            document.getElementsByName(name).forEach(e => {\n                e.disabled = true\n            })        \n        }\n\n        let count = counter + 1\n        let id = \"marker\" + count\n        setMarkerTextBox([...markerTextBox,\n        <div class=\"row\" id={id}>\n            <div class=\"col-1\">    \n                <input name={id}  onBlur={event => handleChangeMarker(id,event, \"marker\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-2\">    \n                <input name={id} onBlur={event => handleChangeMarker(id,event, \"mainMarker\")} size=\"10\"/>                \n            </div>\n            <div class=\"col-3\">\n                <button disabled={markerTextBox.length === 0} onClick={() => removeMarker(id)}>Remove</button>        \n            </div> \n\n        </div>\n        ])  \n        setCounter(count)       \n    }\n\n    \n    const removeMarker = (id) => {\n        let key = document.getElementById(id).getAttribute(\"value\")\n        delete markersDict[key]\n        document.getElementById(id).remove()\n    }\n\n    const handleChangeMarker = (id, event, input) => {\n        setMarkerKeyCounter(markerKeyCounter + 1) //Update the counter\n        //Checks what is the input of the function and stores the input to a dictionary \n        if(input===\"marker\"){\n            let inputError = validateMarker(event.target.value)\n            console.log(inputError)\n            if(inputError === true){\n                alert(\"Error in marker input: There is no marker \"+ event.target.value + \" in the data\")\n            }\n            else{\n                markerTemp = {...markerTemp, marker:event.target.value}\n\n            }\n        }\n        else if(input === \"mainMarker\"){\n            let inputError = validateMarker(event.target.value)\n            if(inputError === false){\n                markerTemp = {...markerTemp, mainMarker:event.target.value}   \n            }\n            else{\n                alert(\"Error in main marker input: There is no marker \"+ event.target.value + \" in the data\")\n            }\n        }\n        let exists = false\n        //After the temp dictionary is filled store the properties to the main dictionary\n        if(Object.values(markerTemp).filter(x => x === \"\").length === 0){\n            console.log(\"OBJECT ENTRIES\")\n            Object.entries(markersDict).map(([key,value]) => {\n\n                if(Object.keys(value)[0] === markerTemp[\"marker\"] && Object.values(value)[0] === markerTemp[\"mainMarker\"]){\n                    exists = true\n                }\n\n            })\n            if(exists === true){\n                alert([markerTemp[\"marker\"]]+\" : \"+markerTemp[\"mainMarker\"] + \" already exists, please change the input\")\n            }\n            else{\n                setMarkersDict({...markersDict,[markerKeyCounter]:{[markerTemp[\"marker\"]]:markerTemp[\"mainMarker\"]}})\n            }\n        }\n\n    }\n\n    function validateMarker(marker){\n        let inputMarkers = []\n        console.log(\"INPUMarker\", marker)\n        var regex = /^[a-zA-Z0-9!&|]+$/;\n        let inputError = false\n\n        if(!marker.match(regex)){\n            alert(\"Error in input: Only letters, numbers and logical operators (!&|) are accepted.\")\n        }\n        else{\n            console.log(\"VALIDATE\")\n            //Checks the logical operators the user inputted\n            if(marker.includes(\"&\") || marker.includes(\"|\") || marker.includes(\"!\")){\n                inputMarkers = marker.split(/[&!|]+/) //Makes a list of the markers\n            }\n            else{\n                //If the input didn't contain logical operators -> there was only one marker, hence we can put it directly to a list\n                inputMarkers.push(marker)\n            }\n            //Loop that checks the user inputted a marker that that the tiff-images have\n            for(let elem in inputMarkers){\n                console.log(elem)\n                //If the marker is in the data returns false otherwise returns inputError true\n                if(originalMarkers.includes(inputMarkers[elem])){ \n                    inputError = false\n                }\n                else{\n                    inputError = true\n                    break;\n                }\n            }\n        }\n        return inputError\n    }\n\n    // #################################################################### Settings for segmentation ################################################################################\n    const segmentationInput = () => {\n        console.log(\"SEGMENTATION\")\n\n        setModelDropDown(\n        <div class=\"dropbox\">  \n            <label for=\"model\">Choose stardist model: </label>\n            <select  name=\"model\" id=\"model\" onChange={event => handleChangeSelectModel(event)}>\n                <option selected=\"true\" disabled=\"disabled\">Select</option>    \n                <option value=\"HuNu\">HuNu_model</option>\n                <option value=\"TH\">TH_model</option>\n                <option value=\"ChAT\">ChAT_model</option>\n                <option value=\"LMX\">LMX_model</option>\n                <option value=\"2D_versatile_fluo\">2D_versatile_fluo</option>\n            </select> \n        </div>)\n     \n    }\n\n    const handleChangeSelectModel = (event) => {\n         \n        let selectedModel = event.target.value\n        setModel(selectedModel)\n        if(selectedModel === \"HuNu\"){\n            setProbThreshold(\"0.6\")\n            setOverlapThreshold(\"0.3\")\n        }\n        else if(selectedModel === \"TH\"){\n            setProbThreshold(\"0.5\")\n            setOverlapThreshold(\"0.5\")\n        }\n        else if(selectedModel === \"ChAT\"){\n            setProbThreshold(\"0.4\")\n            setOverlapThreshold(\"0.4\")\n        }\n        else if(selectedModel === \"LMX\"){\n            setProbThreshold(\"0.6\")\n            setOverlapThreshold(\"0.15\")\n        }\n        else if(selectedModel === \"2D_versatile_fluo\"){\n            setProbThreshold(\"0.6\")\n            setOverlapThreshold(\"0.4\")\n        }\n\n        console.log(\"MODEL :\" , selectedModel)\n    }\n\n\n    // ################################################################### Metadata for cell identification #####################################################################################\n\n    const maskingInput = (markers) => {    \n        \n        if(maskingTextBox == 0){\n            let mask_id = \"maskInput_\" + maskCounter\n            let value_id = \"value_\" + maskCounter\n            console.log(mask_id)\n            options = [<option value = \"Select\" selected=\"true\" disabled=\"disabled\">Select</option>]\n\n            Object.entries(markers).map(([key,index]) => {\n                console.log(Object.keys(markers[key])[0])\n                options.push(<option value={Object.keys(markers[key])[0]}>{Object.keys(markers[key])[0]}</option>)       \n            })\n            console.log(\"OPTIONS : \", options)\n            setMarkerOptions(options)\n\n        \n            setMaskingTextBox(Object.entries(maskingTextBox+1).map(([key,index]) => {\n            \n                return(\n                    <div  class=\"row\" id={mask_id} >\n                        <div class=\"col-1\">  \n                            <p>Cell type</p>\n                            <input name = {mask_id} onChange={event => handleChangeMask(mask_id,event, \"cellType\", \"add\")}  size=\"10\"/>  \n                        </div>\n                        <div class=\"col-2\">   \n                            <p>Marker</p>\n                            <select  name = {mask_id} id=\"colorSelector\" onChange={event => handleChangeMask(mask_id,event, \"thresholdMarker\", \"add\")}>\n                                {options}\n                            </select>           \n                        </div>\n                        <div class=\"col-3\">  \n                            <p>Threshold value</p>\n                            <input id = {value_id} name = {mask_id} onChange={event => handleChangeMask(mask_id,event, \"thresholdValue\", \"add\")} size=\"10\"/>                \n                        </div>\n                        <div class=\"col-4\">  \n                            <p>Color</p>\n                            <select name = {mask_id} id=\"colorSelector\" onChange={event => handleChangeMask(mask_id,event, \"color\", \"add\")}>\n                                <option value = \"Select\" selected=\"true\" disabled=\"disabled\">Select</option>    \n                                <option value=\"red\">Red</option>\n                                <option value=\"blue\">Blue</option>\n                                <option value=\"yellow\">Yellow</option>\n                                <option value=\"green\">Green</option>\n                                <option value=\"purple\">Purple</option>\n                                <option value=\"orange\">Orange</option>\n                            </select>               \n                        </div>\n                        \n                    </div>)\n               \n            }))\n        }        \n    }\n\n    const addMasks = event =>{\n        console.log(maskTemp[\"thresholdValue\"])\n        console.log(typeof maskTemp[\"thresholdValue\"])\n        console.log(maskTemp)\n        console.log(newMask)\n        if(newMask === false){\n            alert(\"Fill all the fields before adding new cell type\")\n        }\n        \n        else if((maskTemp[\"thresholdValue\"] != \"NA\") || (maskTemp[\"thresholdValue\"] < 0 || maskTemp[\"thresholdValue\"] > 1)){\n            alert(\"Only values between 0-1 or NA are accepted in threshold value textbox\")\n        }\n        else{\n            setNewMask(false)\n            console.log(maskCounter)\n            console.log(\"maskInput_\"+maskCounter)\n\n            \n            //document.getElementById(\"maskInput_\"+maskCounter).setAttribute(\"disabled\",\"\")\n           // document.getElementsByName(\"mask0\").setAttribute(\"disabled\", \"disabled\")\n\n            //This is a bit in a wrong place, the last row is never disabled\n            //Disables element after new one is added\n            /*if(Object.keys(maskDict).includes(maskCounter.toString())){\n                let name = \"mask\" + maskCounter\n                document.getElementsByName(name).forEach(e => {\n                    e.disabled = true\n                })        \n            }*/\n\n            //if(Object.keys(maskDict).includes(maskCounter.toString())){\n                let name = \"maskInput_\" + maskCounter\n                document.getElementsByName(name).forEach(e => {\n                    e.disabled = true\n                })        \n            //}\n\n            //let mask_id = \"maskInput_\" + maskCounter\n            let count = maskCounter + 1\n            let mask_id = \"maskInput_\" + count\n            let value_id = \"value_\" + count\n            setMaskCounter(count)\n            \n            setMaskingTextBox([...maskingTextBox,\n            <div class=\"row\" id={mask_id} >\n                <div class=\"col-1\">    \n                    <p>Cell type</p>\n                    <input name={mask_id}  onChange={event => handleChangeMask(mask_id,event, \"cellType\", \"add\")} size=\"10\"/>                \n                </div>\n                <div class=\"col-2\">    \n                <p>Marker</p>\n                    <select  name={mask_id} id=\"colorSelector\" onChange={event => handleChangeMask(mask_id,event, \"thresholdMarker\", \"add\")}>\n                        {markerOptions}\n                    </select>     \n                </div>\n                <div class=\"col-3\">    \n                    <p>Threshold value</p>\n\n                    <input id={value_id} name={mask_id}  disabled={Object.keys(maskDict).includes(maskKeyCounter-1)} onBlur={event => handleChangeMask(mask_id,event, \"thresholdValue\", \"add\")} size=\"10\"/>                \n                </div>\n                <div class=\"col-4\">    \n                    <p>Color</p>\n    \n\n                    <select  name={mask_id} disabled={Object.keys(maskDict).includes(maskKeyCounter-1)} id=\"colorSelector\" onChange={event => handleChangeMask(mask_id,event, \"color\", \"add\")}>\n                                    <option value = \"Select\" selected=\"true\" disabled=\"disabled\">Select</option>    \n                                    <option value=\"red\">Red</option>\n                                    <option value=\"blue\">Blue</option>\n                                    <option value=\"yellow\">Yellow</option>\n                                    <option value=\"green\">Green</option>\n                                    <option value=\"purple\">Purple</option>\n                                    <option value=\"orange\">Orange</option>\n\n                    </select>      \n                                \n                </div>\n               \n\n            </div>\n            ])  \n        }\n        \n    }\n\n    const handleChangeMask = (id,event, input, call) => {\n        console.log(\"MASK LENGTH : \", Object.values(maskTemp).filter(x => x === \"\").length)\n        setMaskKeyCounter(maskKeyCounter + 1) \n        //console.log(\"MaskKeyCounter,\" , maskKeyCounter)\n        //Makes sure that all the fields are filled before adding new cell type\n        if(Object.values(maskTemp).filter(x => x === \"\").length === 0){//counts the number of empty values\n            setNewMask(true)\n        }\n        //Checks what is the input of the function and stores the input to dictionary to right location\n        if(input === \"cellType\"){\n            maskTemp = {...maskTemp, cellType:event.target.value}  \n        }\n        else if(input === \"thresholdMarker\"){\n            \n                maskTemp = {...maskTemp, thresholdMarker:event.target.value}\n            \n        }\n        else if(input === \"thresholdValue\"){\n            \n                maskTemp ={...maskTemp, thresholdValue:event.target.value} \n\n            \n        }\n        else if(input === \"color\"){\n            maskTemp ={...maskTemp, color:event.target.value}\n        }\n        console.log(maskTemp)\n        console.log(maskDict)\n        //After the temp dictionary is filled store the properties to the main dictionary\n        if(call == \"add\"){\n            if(Object.values(maskTemp).filter(x => x === \"\").length === 0){\n                setMaskDict({...maskDict,[maskKeyCounter]:[{cell_type:maskTemp[\"cellType\"]},{ threshold_marker:maskTemp[\"thresholdMarker\"]}, {threshold_value:maskTemp[\"thresholdValue\"]}, {color:maskTemp[\"color\"]}]})     \n            }   \n        }\n        else if(call ==\"reset\"){\n            if(Object.values(maskTemp).filter(x => x === \"\").length === 0){\n                setMaskDict({[maskKeyCounter]:[{cell_type:maskTemp[\"cellType\"]},{ threshold_marker:maskTemp[\"thresholdMarker\"]}, {threshold_value:maskTemp[\"thresholdValue\"]}, {color:maskTemp[\"color\"]}]})     \n            }   \n        }\n         \n    }\n\n    //Removes the mask metadata input field and the corresponding property from the dictionary\n\n    const resetMask = () => {\n        //document.getElementsByName(\"mask0\").value = \"\"\n        //document.getElementsByName(\"mask0\").removeAttribute(\"disabled\")\n        //document.getElementById(\"maskInput_0\").disabled = false\n\n\n        //if(Object.keys(maskDict).includes(maskCounter.toString())){\n            let name = \"maskInput_\" + 0\n\n            document.getElementsByName(name).forEach(e => {\n                console.log(e)\n                e.disabled = false\n                e.value = \"\"\n            })        \n        //}\n\n        setMaskDict([{}])\n        setMaskCounter(0)\n        let mask_id = \"maskInput_0\"\n        let value_id = \"value_0\"\n\n        \n\n        //setMaskngTextBox(Object.entries(maskingTextBox+1).map(([key,index]) => {\n            \n            setMaskingTextBox([\n                <div class=\"row\" id={mask_id}>\n                    <div class=\"col-1\">  \n                        <p>Cell type</p>\n                        <input name = {mask_id} onChange={event => handleChangeMask(mask_id,event, \"cellType\", \"reset\")}  size=\"10\"/>  \n                    </div>\n                    <div class=\"col-2\">   \n                        <p>Marker</p>\n                        <select  name = {mask_id} id=\"colorSelector\" onChange={event => handleChangeMask(mask_id,event, \"thresholdMarker\", \"reset\")}>\n                            {options}\n                        </select>           \n                    </div>\n                    <div class=\"col-3\">  \n                        <p>Threshold value</p>\n                        <input id = {value_id} name = {mask_id} onChange={event => handleChangeMask(mask_id,event, \"thresholdValue\", \"reset\")} size=\"10\"/>                \n                    </div>\n                    <div class=\"col-4\">  \n                        <p>Color</p>\n                        <select  name = {mask_id} id=\"colorSelector\" onChange={event => handleChangeMask(mask_id,event, \"color\", \"reset\")}>\n                            <option value = \"Select\" selected=\"true\" disabled=\"disabled\">Select</option>    \n                            <option value=\"red\">Red</option>\n                            <option value=\"blue\">Blue</option>\n                            <option value=\"yellow\">Yellow</option>\n                            <option value=\"green\">Green</option>\n                            <option value=\"purple\">Purple</option>\n                            <option value=\"orange\">Orange</option>\n                        </select>               \n                    </div>\n                    \n                </div>])\n           \n            \n    }\n    console.log(analysisReady)\n    \n\n    //#################################################################### Input for cell intensity measurements ######################################################################################\n\n    const intensityInput = () => {\n\n        setIntensityTb(\n        <div>\n            <br></br>\n            <label for=\"intensity\" >Cell type: </label>\n            <input id = \"intensity\" size=\"10\" onChange={event => handleChangeIntensity(event)}></input>\n        </div>)   \n    }\n\n    const handleChangeIntensity = (event) => {\n        setIntensityCellType(event.target.value)\n        console.log(event.target.value)\n    }\n\n    const cellAreaInput = () => {\n        //let counter = cellAreaCounter + 1\n        let area_id = \"cellAreaInput_\" + cellAreaCounter\n        //setCellAreaCounter(counter)\n        if(Object.keys(cellAreaTb).length === 0){\n            setCellAreaTb([...cellAreaTb,<div>\n                <br></br>\n                <label for={area_id} >Cell type(s) to measure: </label>\n                <input id = {area_id} size=\"10\" onChange={event => handleChangeCellArea(event,\"add\")}></input>\n                </div>\n            ])\n        }\n        \n    }\n\n    //######################################################################## Input for cell area measurements ###########################################################################\n\n    const handleChangeCellArea = (event, call) => {\n        if(!cellAreaList.includes(event.target.value) & call != \"reset\"){\n            setCellAreaList([...cellAreaList, event.target.value])\n        }\n        else if(call == \"reset\"){\n            setCellAreaList([event.target.value])\n        }\n    }\n\n    const resetCellArea = () => {\n    \n        document.getElementById(\"cellAreaInput_0\").value = \"\"\n        document.getElementById(\"cellAreaInput_0\").removeAttribute(\"disabled\")\n\n\n        setCellAreaList([])\n        setCellAreaCounter(0)\n        \n        setCellAreaTb([<div id=\"firstArea\">\n            <br></br>\n            <label for=\"cellAreaInput_0\" >Cell type(s) to measure: </label>\n            <input id = \"cellAreaInput_0\" size=\"10\" onChange={event => handleChangeCellArea(event, \"reset\")}></input>\n            </div>\n          \n        ])       \n    }\n\n    const addCells = (event) => {    \n            //setCellAreaTb()\n            console.log(cellAreaList)\n            document.getElementById(\"cellAreaInput_\"+cellAreaCounter).setAttribute(\"disabled\",\"disabled\")\n\n            let counter = cellAreaCounter + 1\n            let area_id = \"cellAreaInput_\" + counter\n            setCellAreaCounter(counter)\n\n\n            setCellAreaTb([...cellAreaTb,\n                \n                <div> \n                    <br></br>\n                    <label for=\"cellArea\" >Cell type(s) to measure: </label>\n                    <input id={area_id} size=\"10\" onChange={event => handleChangeCellArea(event, \"add\")}></input>\n\n                </div>\n            \n            ])     \n    }\n\n\n    const showInstructions = ( arg1, arg2, arg3) => {\n        //setInfo()\n        console.log(arg1, arg2, arg3)\n        document.getElementById(arg1).style.display=\"block\"\n        document.getElementById(arg2).style.display=\"none\"\n        document.getElementById(arg3).style.display=\"block\"    \n      }\n    \n      const hideInstructions = (arg1, arg2, arg3) =>{\n        document.getElementById(arg1).style.display=\"none\"\n        document.getElementById(arg2).style.display=\"block\"\n        document.getElementById(arg3).style.display=\"none\"\n      }\n\n\n      \n   \n    \n    //############################################################################# HTML form to be rendered ###############################################################################################\n\n    return(\n        <div>\n            <form class=\"metadataForm\">\n\n                {renderArea ? (\n                    <div>\n                    <React.Fragment> \n                        <b>Measurement of positive-marker areas</b>\n                         <br></br>\n\n                        <div class=\"row\">\n                                <div class=\"col-1\">    \n                                    <p>Marker</p>\n                                </div>\n                                <div class=\"col-2\">    \n                                    <p>Main marker</p>\n                            </div>\n                        </div>\n                        {markerTextBox}\n                        <button type=\"button\" onClick={addMarkers}>Add markers</button>\n\n                    </React.Fragment>\n                    </div>                  \n                ):(<></>)} \n                <br></br>\n                <br></br>\n\n                {renderSegmentation ? (\n                    <div>\n                    <React.Fragment> \n                    <div class=\"row\">\n                            <div class=\"col-1\">\n                                <b>Cell segmentation</b>\n                            </div>\n                            <div class=\"col-2\">\n                                <div id = \"infoBtnSegment\" class=\"btn-instructions2\">  \n                                    <button type=\"button\" onClick={() => showInstructions(\"instructionsSegment\", \"infoBtnSegment\", \"hideInfoBtnSegment\")}>Info</button>\n                                </div>  \n                                <div  hidden id = \"hideInfoBtnSegment\" class=\"btn-instructions2\">  \n                                    <button type=\"button\" onClick={() => hideInstructions(\"instructionsSegment\", \"infoBtnSegment\", \"hideInfoBtnSegment\")}>Hide info</button>\n                                </div>  \n                            </div>\n                    </div>\n                    <br></br>\n\n                    <div class=\"row\">\n                        {modelDropDown}\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-1\">    \n                            <p >Probability threshold</p>\n                            <input value = {probTreshold} onChange={(e)=>setProbThreshold(e.target.value)}/>                \n                        </div>\n                        <div class=\"col-2\">    \n                            <p>Overlap threshold</p>\n                            <input value= {overlapThreshold} onChange={(e)=>setOverlapThreshold(e.target.value)}/>\n                        </div>\n                    </div>\n                    <div hidden id=\"instructionsSegment\" class=\"textarea-container\">    \n                        <p disabled readonly rows=\"20\" cols=\"50\">\n                            <b>Instructions:<br></br><br></br></b>\n                            <b>Choose StarDist model: </b>Model to be used in cell segmentation.<br></br>\n                            <b>Probability threshold: </b>Higher values leads to fewer segmented objects, but will likely avoid false positives.<br></br> \n                            <b>Overlap threshold: </b>Higher values allow segmented objects to overlap substantially.<br></br>\n                            \n                        </p>        \n                    </div>\n                                               \n                    </React.Fragment>\n                    </div>                  \n                ):(<></>)\n                \n                }    \n                <br></br>\n                <br></br>\n\n                {renderMasking ? (\n                    <div>\n                    <React.Fragment> \n                        <b>Cell type identification</b>\n                        <br></br>\n\n                        {maskingTextBox}\n                        <button type=\"button\" onClick={addMasks}>New cell type</button>&nbsp;&nbsp;&nbsp;\n                        <button type=\"button\" onClick={() => resetMask()}>Reset</button>\n\n                    </React.Fragment>\n                    </div>                  \n                ):(<></>)\n                \n                }    \n\n                <br></br>\n                <br></br>\n\n                {renderIntensity ? (\n                    <div>\n                    <React.Fragment> \n                        <b>Pixel intensity measurement between groups</b>\n                        <br></br>\n\n                        {intensityTb}\n                    </React.Fragment>\n                    </div>                  \n                ):(<></>)\n                \n                }    \n\n                <br></br>\n                <br></br>\n\n                {renderCellArea ? (\n                    <div>\n                    <React.Fragment> \n                        <b>Cell area measurements</b>\n                        \n                        {cellAreaTb}\n                        <button type=\"button\" onClick={addCells}>Add new</button>&nbsp;&nbsp;&nbsp;\n                        <button type=\"button\" onClick={() => resetCellArea()}>Reset</button>\n\n\n                    </React.Fragment>\n                    </div>                  \n                ):(<></>)\n                \n                }   \n\n            <br></br>\n            <br></br>\n\n             \n            </form>\n            \n        </div>\n        ) \n})\nexport default GetMetadata;\n//<div>{allMarkers && <p>Loading...</p>}</div>#setAllMarkes(!allMarkers);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}