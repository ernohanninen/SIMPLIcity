{"ast":null,"code":"import _toConsumableArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/ernohanninen/simpli-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/ernohanninen/simpli-app/src/getResults.js\";\n\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport Table from \"./sample_table.js\";\n\nvar GetResults = function GetResults() {\n  //Variables\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      plotPaths = _useState2[0],\n      setPlotPaths = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      areaPlots = _useState4[0],\n      setAreaPlots = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sampleImages = _useState6[0],\n      setSampleImages = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      mergedImages = _useState8[0],\n      setMergedImages = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      dropDownSamples = _useState10[0],\n      setDropDownSamples = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      dropDownMarkers = _useState12[0],\n      setDropDownMarkers = _useState12[1];\n\n  var _useState13 = useState(\"\"),\n      _useState14 = _slicedToArray(_useState13, 2),\n      checkbox = _useState14[0],\n      setCheckbox = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      displaySegmentationCb = _useState16[0],\n      setDisplaySegmentationCb = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      preprocessedCb = _useState18[0],\n      setPreprocessedCb = _useState18[1];\n\n  var _useState19 = useState(true),\n      _useState20 = _slicedToArray(_useState19, 2),\n      firstCall = _useState20[0],\n      setFirstCall = _useState20[1];\n\n  var _useState21 = useState({}),\n      _useState22 = _slicedToArray(_useState21, 2),\n      totalCells = _useState22[0],\n      setTotalCells = _useState22[1];\n\n  var _useState23 = useState({}),\n      _useState24 = _slicedToArray(_useState23, 2),\n      resultingCells = _useState24[0],\n      setResultingCells = _useState24[1]; //const [displaySegmented, setDisplaySegmented] = useState(true)\n\n\n  var sample = \"\"; //Function which get the images from backend\n\n  var displayResults = function displayResults() {\n    document.getElementById(\"resultsButton\").style.display = \"none\";\n    axios.get(\"/fetchResults\").then(function (response) {\n      setTotalCells(response.data[1]);\n      setResultingCells(response.data[2]);\n      console.log(\"PALUU ARVO\");\n      console.log(response.data);\n      console.log(response.data[1]);\n      console.log(response.data[2]); //Extracting values from dictionary\n\n      var samples = response.data[0][\"samples\"];\n      var area = response.data[0][\"area\"];\n      console.log(area);\n      console.log(samples);\n      setPlotPaths(area);\n      displayImages(area, samples, response.data[1], response.data[2]); //Calling function which displays the images         \n    });\n  }; //Function which displays the images to the user\n\n\n  var displayImages = function displayImages(area, samples, totalCells, resultingCells) {\n    var segmentation = false;\n    var merged = false;\n    var counter = 0;\n    var i = Object.entries(samples[Object.keys(samples)[0]]).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      console.log(key);\n      console.log(value);\n\n      if (Object.keys(value).includes(\"overlays\")) {\n        console.log(\"SEGMENTATION\");\n        segmentation = true;\n      }\n      /*if(Object.keys(value).includes(\"preprocessed\")){\n          counter += 1\n      }*/\n\n    });\n    Object.entries(samples).map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          key = _ref4[0],\n          value = _ref4[1];\n\n      console.log(key);\n      console.log(value);\n\n      if (\"merged_overlays\" in samples) {\n        var _merged = true;\n      }\n    });\n    var sampleOptions = Object.entries(Object.keys(samples)).map(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n          key = _ref6[0],\n          value = _ref6[1];\n\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: value,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }\n      }, value);\n    });\n    /*var markerOptions = Object.entries(samples).map(([key,value]) => \n    <option value={value}>{value}</option>\n    )*/\n\n    /*if(counter > 1){\n        var sample_markers = []\n        Object.entries(samples[Object.keys(samples)[0]]).map(([key,value]) => {\n            console.log(value)\n            if(Object.keys(value).includes(\"preprocessed\")){\n                let sample_name = value[Object.keys(value)]\n                console.log(sample_name)\n                sample_name = sample_name.split(\"/\")[1]\n                console.log(sample_name)\n                sample_name = sample_name.split(/(.*)-/)[1]\n                console.log(sample_name)\n                if(sample_name != \"ALL\"){\n                    sample_markers.push(sample_name)\n                }\n                \n            }\n            else{return}\n        })\n        samples = sample_markers\n    }*/\n    //Get the values for drop-down list\n\n    /*if(counter == 1){\n        var optionItems = Object.entries(samples).map(([key,value]) => \n        <option value={key}>{key}</option>\n    )}\n    if(counter > 1){\n        var optionItems = Object.entries(samples).map(([key,value]) => \n        <option value={value}>{value}</option>\n    )}*/\n    //Create the dropdown list\n\n    setDropDownSamples( /*#__PURE__*/React.createElement(\"div\", {\n      class: \"row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, \"Samples: \"), /*#__PURE__*/React.createElement(\"select\", {\n      name: \"sampleSelector\",\n      id: \"sampleSelector\",\n      onChange: function onChange(event) {\n        return handleChangeSelect(event, segmentation, merged);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      id: \"optionNoneSample\",\n      value: \"None\",\n      selected: \"true\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 18\n      }\n    }, \"None\"), sampleOptions)));\n\n    if (merged == true) {\n      setMergedImages(Object.entries(Object.keys(samples)).map(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            key1 = _ref8[0],\n            value1 = _ref8[1];\n\n        return Object.entries(samples).map(function (_ref9) {\n          var _ref10 = _slicedToArray(_ref9, 2),\n              key = _ref10[0],\n              value = _ref10[1];\n\n          if (\"merged_tiff\" in key | \"merged_overlays\" in key) {\n            var idMergedTiff = \"idTiff\" + key1;\n            var idMergedOverlay = \"idOverlay\" + key1;\n            var idMergedTiffDiv = \"tiffDiv\" + key1;\n            var idMergedOverlayDiv = \"overlayDiv\" + key1;\n            return [].concat(_toConsumableArray(sampleImages), [/*#__PURE__*/React.createElement(\"div\", {\n              id: key1,\n              hidden: true,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(\"div\", {\n              id: idMergedTiffDiv,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 37\n              }\n            }, key1, \" merged image channels:\"), /*#__PURE__*/React.createElement(\"img\", {\n              class: \"contain\",\n              id: idMergedTiff,\n              src: require(\"../src/images/\" + value[0][\"merged_tiff\"]),\n              onClick: function onClick(event) {\n                return displayFullScreen(idMergedTiff);\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 37\n              }\n            })), /*#__PURE__*/React.createElement(\"div\", {\n              id: idMergedOverlayDiv,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(\"p\", {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 37\n              }\n            }, \" \", key1, \" segmented cells:\"), /*#__PURE__*/React.createElement(\"img\", {\n              class: \"contain\",\n              id: idMergedOverlay,\n              src: require(\"../src/images/\" + value[1][\"merged_overlays\"]),\n              onClick: function onClick(event) {\n                return displayFullScreen(idMergedOverlay);\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 37\n              }\n            })))]);\n          }\n        });\n      }));\n    }\n    /*setDropDownMarkers(\n        <div class=\"row\">\n            <p>Samples: </p>\n            <select name=\"markerSelector\" id=\"markerSelector\" onChange={event => handleChangeSelect(event, segmentation)}>\n                 <option id=\"optionNoneMarker\" value=\"None\" selected=\"true\">None</option>  \n                 {markerOptions}\n                  \n            </select>          \n            \n        </div>\n        )*/\n\n    /*if(counter == 1){\n        //Map samples and set the images to variable\n        setSampleImages(Object.entries(samples).map(([key,value]) => {\n            let idPreprocessed = \"idPre\" + key\n            let idThresholded = \"idThres\" + key\n            let idSegmented = \"idSeg\" + key\n             let idPreprocessedDiv = \"preDiv\" + key\n            let idThresholdedDiv = \"thresDiv\" + key\n            let idSegmentedDiv = \"segDiv\" + key\n              return([...sampleImages, \n            <div id = {key} hidden>\n                \n                <div id = {idPreprocessedDiv}>\n                    <p>Preprocessed {key}:</p>    \n                    <img class=\"contain\" id ={idPreprocessed} src={require(\"../src/images/\" + value[0][\"preprocessed\"])} onClick= {event => displayFullScreen(idPreprocessed)}></img>\n                </div>\n                <div id = {idThresholdedDiv}>\n                    <p>Thresholded {key}:</p>\n                    <img class=\"contain\" id ={idThresholded} src={require(\"../src/images/\" + value[1][\"thresholded\"])}  onClick= {event => displayFullScreen(idThresholded)}></img>\n                </div>\n                {segmentation ? (\n                    <div id = {idSegmentedDiv}>\n                        <p>Segmented {key}:</p>\n                        <img class=\"contain\" id ={idSegmented} src={require(\"../src/images/\" + value[2][\"overlays\"])}  onClick= {event => displayFullScreen(idSegmented)}></img>  \n                        <p>Number of cells detected in image segmentation : {totalCells[key]}</p> \n                        <p>Number of cells after removing unassigned ones : {resultingCells[key]}</p>       \n                        <br></br>\n                        <br></br>\n                    </div>               \n                ):(<></>)         \n                }   \n            </div>])\n        }))\n    }*/\n\n    /*if(counter > 1){\n        setSampleImages(Object.entries(samples).map(([key,value]) => {\n            console.log(key)\n            console.log(value)\n            \n        }))\n     }*/\n    //Set marker area plot\n\n\n    if (area != \"\") {\n      setAreaPlots( /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }\n      }, \"Measurement of marker positive area:\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"img\", {\n        id: \"areaPlot\",\n        src: require(\"../src/images/Area/\" + area),\n        onClick: function onClick(event) {\n          return displayFullScreen(\"areaPlot\");\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }\n      })));\n    }\n  };\n\n  var displayFullScreen = function displayFullScreen(id) {\n    var elem = document.getElementById(id);\n\n    if (document.fullscreenElement) {\n      document.exitFullscreen();\n    } else {\n      if (elem.requestFullscreen) {\n        elem.requestFullscreen();\n      } else if (elem.webkitRequestFullscreen) {\n        /* Safari */\n        elem.webkitRequestFullscreen();\n      } else if (elem.msRequestFullscreen) {\n        /* IE11 */\n        elem.msRequestFullscreen();\n      }\n    }\n  }; //Handles changes in the sample drop-down list\n\n\n  var handleChangeSelect = function handleChangeSelect(event, segmentation, merged) {\n    //displays images/nothing depending of the selected drop-down value\n    if (merged = true) {\n      var idMergedDiv = \"tiffDiv\" + event.target.value;\n      var idOverlayDiv = \"overlayDiv\" + event.target.value;\n      document.getElementById(idMergedDiv).style.display = \"block\";\n      document.getElementById(idOverlayDiv).style.display = \"block\";\n    } //let idSegmentedDiv = \"segDiv\" + event.target.value\n\n    /*console.log(\"Segmentation : \", segmentation)\n    console.log(totalCells)\n    console.log(resultingCells)*/\n\n    /*if(event.target.value == \"None\"){     \n        setCheckbox(\"\")  \n    }\n    else{\n        //IF the checkbox exists it is checked by default\n        if(document.getElementById(\"preprocessedImgCheck\") != null){\n            document.getElementById(\"preprocessedImgCheck\").checked = true;    \n        }\n        if(document.getElementById(\"thresholdImgCheck\") != null){\n            document.getElementById(\"thresholdImgCheck\").checked = true; \n        }\n        if(document.getElementById(\"segmentedImgCheck\") != null){\n            document.getElementById(\"segmentedImgCheck\").checked = true;    \n        }        \n         //If the image is hidden make them visible\n        document.getElementById(idPreprocessedDiv).style.display = \"block\"\n        document.getElementById(idThresholdedDiv).style.display = \"block\"\n        if(segmentation == true){\n            document.getElementById(idSegmentedDiv).style.display = \"block\"\n        }*/\n\n    /*setCheckbox(\n    <div class=\"row\">\n        <div class = \"colQC-1\">\n            <div class=\"checkbox\">    \n                <p>Preprocessed image: </p>\n                <input type = \"checkbox\" id=\"preprocessedImgCheck\" onClick={()=>handleCheckbox(idPreprocessedDiv, \"preprocessedImgCheck\")} defaultChecked/>                \n            </div>\n        </div>\n        <div class = \"colQC-2\">\n            <div class=\"checkbox\">    \n                <p>Thresholded image: </p>\n                <input type = \"checkbox\" id=\"thresholdImgCheck\" onClick={()=>handleCheckbox(idThresholdedDiv, \"thresholdImgCheck\")} defaultChecked/>                \n            </div>\n        </div>\n               \n        {segmentation ? (\n                  <div class = \"colQC-3\">\n                  <div class=\"checkbox\">    \n                      <p>Segmented image: </p>\n                      <input type = \"checkbox\" id=\"segmentedImgCheck\" onClick={()=>handleCheckbox(idSegmentedDiv, \"segmentedImgCheck\")} defaultChecked/>                \n                  </div>         \n               </div>\n        ):(<></>)         \n        }         \n    </div>    \n    )    \n     \n    } \n    if(event.target.value != \"None\"){\n    document.getElementById(event.target.value).style.display = \"block\"\n    }\n    //Hides images depending of the value\n    if(sample != \"\" && sample != \"None\"){\n    document.getElementById(sample).style.display = \"none\"\n    }\n    sample = event.target.value    */\n\n  };\n\n  var handleCheckbox = function handleCheckbox(idDiv, idCb) {\n    var elem = document.getElementById(idDiv); //Hide element\n\n    if (window.getComputedStyle(elem).display == \"block\") {\n      elem.style.display = \"none\";\n      document.getElementById(idCb).defaultChecked = false;\n    } //Display element\n    else if (window.getComputedStyle(elem).display == \"none\") {\n      elem.style.display = \"block\";\n      document.getElementById(idCb).defaultChecked = true;\n    }\n  }; //Display HTML to the user\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    class: \"resultsForm\",\n    id: \"resultsForm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"load\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 21\n    }\n  }, \"Running SIMPLI\")), /*#__PURE__*/React.createElement(\"div\", {\n    hidden: true,\n    id: \"results\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 21\n    }\n  }, \"SIMPLI results\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"resultsButton\",\n    type: \"button\",\n    onClick: function onClick(event) {\n      return displayResults();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 21\n    }\n  }, \"Display results\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"colQC-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 25\n    }\n  }, dropDownSamples), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"colQC-2\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 25\n    }\n  }, dropDownMarkers), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"colQC-3\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 25\n    }\n  }, checkbox)), sampleImages, areaPlots)));\n};\n\nexport default GetResults;","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","axios","Table","GetResults","plotPaths","setPlotPaths","areaPlots","setAreaPlots","sampleImages","setSampleImages","mergedImages","setMergedImages","dropDownSamples","setDropDownSamples","dropDownMarkers","setDropDownMarkers","checkbox","setCheckbox","displaySegmentationCb","setDisplaySegmentationCb","preprocessedCb","setPreprocessedCb","firstCall","setFirstCall","totalCells","setTotalCells","resultingCells","setResultingCells","sample","displayResults","document","getElementById","style","display","get","then","response","data","console","log","samples","area","displayImages","segmentation","merged","counter","i","Object","entries","keys","map","key","value","includes","sampleOptions","event","handleChangeSelect","key1","value1","idMergedTiff","idMergedOverlay","idMergedTiffDiv","idMergedOverlayDiv","require","displayFullScreen","id","elem","fullscreenElement","exitFullscreen","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","idMergedDiv","target","idOverlayDiv","handleCheckbox","idDiv","idCb","window","getComputedStyle","defaultChecked"],"sources":["/home/ernohanninen/simpli-app/src/getResults.js"],"sourcesContent":["import React,  { useState, forwardRef, useImperativeHandle } from 'react';\nimport axios from \"axios\";\nimport './App.css';\nimport Table from \"./sample_table.js\";\n\n\n\nconst GetResults = () => { \n    \n    //Variables\n    const [plotPaths, setPlotPaths] = useState(\"\")\n    const [areaPlots, setAreaPlots] = useState(\"\")\n    const [sampleImages, setSampleImages] = useState(\"\")\n    const [mergedImages, setMergedImages] = useState(\"\")\n\n    const [dropDownSamples, setDropDownSamples] = useState(\"\")\n    const [dropDownMarkers, setDropDownMarkers] = useState(\"\")\n    \n    const [checkbox, setCheckbox] = useState(\"\")\n    const [displaySegmentationCb, setDisplaySegmentationCb] = useState(false)\n    const [preprocessedCb, setPreprocessedCb] = useState(false)\n    const [firstCall,setFirstCall] = useState(true)\n    const [totalCells, setTotalCells] = useState({})\n    const [resultingCells, setResultingCells] = useState({})\n    \n    //const [displaySegmented, setDisplaySegmented] = useState(true)\n\n    var sample = \"\"\n\n    //Function which get the images from backend\n    const displayResults = () => {\n        document.getElementById(\"resultsButton\").style.display = \"none\"\n        axios.get(\"/fetchResults\")\n        .then(function(response){\n           setTotalCells(response.data[1])\n           setResultingCells(response.data[2])\n           console.log(\"PALUU ARVO\")\n           console.log(response.data)\n\n           console.log(response.data[1])\n           console.log(response.data[2])\n           //Extracting values from dictionary\n           let samples = response.data[0][\"samples\"]\n           let area = response.data[0][\"area\"]\n           console.log(area)\n           console.log(samples)\n        \n           setPlotPaths(area)    \n           displayImages(area, samples, response.data[1], response.data[2]) //Calling function which displays the images         \n        })\n    }\n    //Function which displays the images to the user\n    const displayImages = (area, samples, totalCells, resultingCells) => { \n\n        let segmentation = false\n        let merged = false\n\n        let counter = 0\n\n        let i = Object.entries(samples[Object.keys(samples)[0]]).map(([key,value]) => {\n            console.log(key)\n            console.log(value)\n            if(Object.keys(value).includes(\"overlays\")){\n                console.log(\"SEGMENTATION\")\n                segmentation = true\n            }\n            /*if(Object.keys(value).includes(\"preprocessed\")){\n                counter += 1\n            }*/\n        })\n        Object.entries(samples).map(([key,value]) => {\n            console.log(key)\n            console.log(value)\n            if(\"merged_overlays\" in samples){\n                let merged = true\n            }\n        })\n\n        var sampleOptions = Object.entries(Object.keys(samples)).map(([key,value]) => \n            <option value={value}>{value}</option>\n        )\n\n        /*var markerOptions = Object.entries(samples).map(([key,value]) => \n        <option value={value}>{value}</option>\n        )*/\n\n\n\n        /*if(counter > 1){\n            var sample_markers = []\n            Object.entries(samples[Object.keys(samples)[0]]).map(([key,value]) => {\n                console.log(value)\n                if(Object.keys(value).includes(\"preprocessed\")){\n                    let sample_name = value[Object.keys(value)]\n                    console.log(sample_name)\n                    sample_name = sample_name.split(\"/\")[1]\n                    console.log(sample_name)\n                    sample_name = sample_name.split(/(.*)-/)[1]\n                    console.log(sample_name)\n                    if(sample_name != \"ALL\"){\n                        sample_markers.push(sample_name)\n                    }\n                    \n                }\n                else{return}\n            })\n            samples = sample_markers\n        }*/\n        \n\n        //Get the values for drop-down list\n        /*if(counter == 1){\n            var optionItems = Object.entries(samples).map(([key,value]) => \n            <option value={key}>{key}</option>\n        )}\n        if(counter > 1){\n            var optionItems = Object.entries(samples).map(([key,value]) => \n            <option value={value}>{value}</option>\n        )}*/\n        \n        \n        //Create the dropdown list\n        setDropDownSamples(\n        <div class=\"row\">\n            <p>Samples: </p>\n            <select name=\"sampleSelector\" id=\"sampleSelector\" onChange={event => handleChangeSelect(event, segmentation, merged)}>\n                 <option id=\"optionNoneSample\" value=\"None\" selected=\"true\">None</option>  \n                 {sampleOptions}\n                  \n            </select>          \n            \n        </div>\n        )\n\n        if(merged == true){\n            setMergedImages(\n            Object.entries(Object.keys(samples)).map(([key1,value1]) => \n                Object.entries(samples).map(([key,value]) => {\n                    if(\"merged_tiff\" in key | \"merged_overlays\" in key){\n                        let idMergedTiff = \"idTiff\" + key1\n                        let idMergedOverlay = \"idOverlay\" + key1\n\n                        let idMergedTiffDiv = \"tiffDiv\" + key1\n                        let idMergedOverlayDiv = \"overlayDiv\" + key1\n\n                        \n\n                        return([...sampleImages, \n                            <div id = {key1} hidden>\n                                \n                                <div id = {idMergedTiffDiv}>\n                                    <p>{key1} merged image channels:</p>    \n                                    <img class=\"contain\" id ={idMergedTiff} src={require(\"../src/images/\" + value[0][\"merged_tiff\"])} onClick= {event => displayFullScreen(idMergedTiff)}></img>\n                                </div>\n                                <div id = {idMergedOverlayDiv}>\n                                    <p> {key1} segmented cells:</p>\n                                    <img class=\"contain\" id ={idMergedOverlay} src={require(\"../src/images/\" + value[1][\"merged_overlays\"])}  onClick= {event => displayFullScreen(idMergedOverlay)}></img>\n                                </div>\n                               \n                            </div>]\n\n)\n\n}\n\n                    })))\n                }\n\n                    \n\n                    \n    \n    \n                    \n\n\n          \n\n        /*setDropDownMarkers(\n            <div class=\"row\">\n                <p>Samples: </p>\n                <select name=\"markerSelector\" id=\"markerSelector\" onChange={event => handleChangeSelect(event, segmentation)}>\n                     <option id=\"optionNoneMarker\" value=\"None\" selected=\"true\">None</option>  \n                     {markerOptions}\n                      \n                </select>          \n                \n            </div>\n            )*/\n         \n        /*if(counter == 1){\n            //Map samples and set the images to variable\n            setSampleImages(Object.entries(samples).map(([key,value]) => {\n                let idPreprocessed = \"idPre\" + key\n                let idThresholded = \"idThres\" + key\n                let idSegmented = \"idSeg\" + key\n\n                let idPreprocessedDiv = \"preDiv\" + key\n                let idThresholdedDiv = \"thresDiv\" + key\n                let idSegmentedDiv = \"segDiv\" + key\n\n\n                return([...sampleImages, \n                <div id = {key} hidden>\n                    \n                    <div id = {idPreprocessedDiv}>\n                        <p>Preprocessed {key}:</p>    \n                        <img class=\"contain\" id ={idPreprocessed} src={require(\"../src/images/\" + value[0][\"preprocessed\"])} onClick= {event => displayFullScreen(idPreprocessed)}></img>\n                    </div>\n                    <div id = {idThresholdedDiv}>\n                        <p>Thresholded {key}:</p>\n                        <img class=\"contain\" id ={idThresholded} src={require(\"../src/images/\" + value[1][\"thresholded\"])}  onClick= {event => displayFullScreen(idThresholded)}></img>\n                    </div>\n                    {segmentation ? (\n                        <div id = {idSegmentedDiv}>\n                            <p>Segmented {key}:</p>\n                            <img class=\"contain\" id ={idSegmented} src={require(\"../src/images/\" + value[2][\"overlays\"])}  onClick= {event => displayFullScreen(idSegmented)}></img>  \n                            <p>Number of cells detected in image segmentation : {totalCells[key]}</p> \n                            <p>Number of cells after removing unassigned ones : {resultingCells[key]}</p>       \n                            <br></br>\n                            <br></br>\n                        </div>               \n                    ):(<></>)         \n                    }   \n                </div>])\n            }))\n        }*/\n\n        /*if(counter > 1){\n            setSampleImages(Object.entries(samples).map(([key,value]) => {\n                console.log(key)\n                console.log(value)\n                \n            }))\n\n        }*/\n        \n        //Set marker area plot\n        if(area != \"\"){\n            setAreaPlots(\n                <div>\n                    <b>Measurement of marker positive area:</b>\n                    <br></br>\n                    <img id =\"areaPlot\" src={require(\"../src/images/Area/\" + area)} onClick= {event => displayFullScreen(\"areaPlot\")}></img>\n                </div>\n            )\n        }\n        \n    } \n\n\n    const displayFullScreen = (id) => { \n        let elem = document.getElementById(id)\n        if(document.fullscreenElement){\n            document.exitFullscreen()\n        }\n        else{\n            if (elem.requestFullscreen) {\n                elem.requestFullscreen();\n              } else if (elem.webkitRequestFullscreen) { /* Safari */\n                elem.webkitRequestFullscreen();\n              } else if (elem.msRequestFullscreen) { /* IE11 */\n                elem.msRequestFullscreen();\n              }\n        }\n        \n    }\n\n    //Handles changes in the sample drop-down list\n    const handleChangeSelect = (event, segmentation, merged) => { \n        //displays images/nothing depending of the selected drop-down value\n\n        if(merged = true){\n            let idMergedDiv = \"tiffDiv\" + event.target.value\n            let idOverlayDiv = \"overlayDiv\" + event.target.value\n\n            document.getElementById(idMergedDiv).style.display = \"block\"\n            document.getElementById(idOverlayDiv).style.display = \"block\"\n        }\n\n\n        //let idSegmentedDiv = \"segDiv\" + event.target.value\n\n        /*console.log(\"Segmentation : \", segmentation)\n        console.log(totalCells)\n        console.log(resultingCells)*/\n        \n        /*if(event.target.value == \"None\"){     \n            setCheckbox(\"\")  \n        }\n        else{\n            //IF the checkbox exists it is checked by default\n            if(document.getElementById(\"preprocessedImgCheck\") != null){\n                document.getElementById(\"preprocessedImgCheck\").checked = true;    \n            }\n            if(document.getElementById(\"thresholdImgCheck\") != null){\n                document.getElementById(\"thresholdImgCheck\").checked = true; \n            }\n            if(document.getElementById(\"segmentedImgCheck\") != null){\n                document.getElementById(\"segmentedImgCheck\").checked = true;    \n            }        \n\n            //If the image is hidden make them visible\n            document.getElementById(idPreprocessedDiv).style.display = \"block\"\n            document.getElementById(idThresholdedDiv).style.display = \"block\"\n            if(segmentation == true){\n                document.getElementById(idSegmentedDiv).style.display = \"block\"\n            }*/\n\n\n            /*setCheckbox(\n            <div class=\"row\">\n                <div class = \"colQC-1\">\n                    <div class=\"checkbox\">    \n                        <p>Preprocessed image: </p>\n                        <input type = \"checkbox\" id=\"preprocessedImgCheck\" onClick={()=>handleCheckbox(idPreprocessedDiv, \"preprocessedImgCheck\")} defaultChecked/>                \n                    </div>\n                </div>\n                <div class = \"colQC-2\">\n                    <div class=\"checkbox\">    \n                        <p>Thresholded image: </p>\n                        <input type = \"checkbox\" id=\"thresholdImgCheck\" onClick={()=>handleCheckbox(idThresholdedDiv, \"thresholdImgCheck\")} defaultChecked/>                \n                    </div>\n                </div>\n                       \n                {segmentation ? (\n                          <div class = \"colQC-3\">\n                          <div class=\"checkbox\">    \n                              <p>Segmented image: </p>\n                              <input type = \"checkbox\" id=\"segmentedImgCheck\" onClick={()=>handleCheckbox(idSegmentedDiv, \"segmentedImgCheck\")} defaultChecked/>                \n                          </div>         \n\n                      </div>\n                ):(<></>)         \n                }         \n            </div>    \n            )    \n\n            \n        } \n\n        if(event.target.value != \"None\"){\n            document.getElementById(event.target.value).style.display = \"block\"\n        }\n        //Hides images depending of the value\n        if(sample != \"\" && sample != \"None\"){\n            document.getElementById(sample).style.display = \"none\"\n        }\n        sample = event.target.value    */\n        \n    }\n\n    const handleCheckbox = (idDiv, idCb) => {\n\n        var elem = document.getElementById(idDiv)\n        //Hide element\n        if(window.getComputedStyle(elem).display == \"block\"){\n            elem.style.display = \"none\"\n            document.getElementById(idCb).defaultChecked = false;\n        }\n        //Display element\n        else if(window.getComputedStyle(elem).display == \"none\"){\n            elem.style.display =\"block\"\n            document.getElementById(idCb).defaultChecked = true;\n\n        }\n\n    }\n \n    //Display HTML to the user\n    return(\n        <div>\n            <form class=\"resultsForm\" id=\"resultsForm\">\n                <div hidden id=\"load\">\n                    <p>Running SIMPLI</p>         \n                </div>\n                \n                <div hidden id=\"results\">  \n                    <b>SIMPLI results</b>  \n                    <br></br>\n                    <button id=\"resultsButton\" type=\"button\" onClick={event => displayResults()}>Display results</button>\n                    <div class = \"row\">\n                        <div class = \"colQC-1\">\n                            {dropDownSamples}     \n                        </div>\n                        <div class = \"colQC-2\">\n                            {dropDownMarkers}     \n                        </div>\n                        <div class = \"colQC-3\">\n                            {checkbox}                     \n                        </div>\n                    </div>\n                        \n                        \n                    \n                    {sampleImages}\n                    {areaPlots}\n                </div>\n            </form>\n        </div>\n    )\n}\nexport default GetResults;"],"mappings":"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"},"metadata":{},"sourceType":"module"}